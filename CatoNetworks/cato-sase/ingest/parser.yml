name: cato_sase
pipeline:
  - name: json_event
    external:
      name: json.parse-json
      properties:
        input_field: "{{original.message}}"
        output_field: output

  - name: parsed_date
    external:
      name: date.parse
      properties:
        input_field: "{{json_event.output.event_time}}"
        output_field: datetime
    filter: "{{json_event.output.event_time != None}}"

  - name: parse_mitre_tactics
    external:
      name: grok.match
      properties:
        raise_errors: false
        input_field: "{{json_event.output.mitre_attack_tactics}}"
        output_field: message
        pattern: '%{DATA:tactic_name_1} \(%{DATA:tactic_id_1}\)\, %{DATA:tactic_name_2} \(%{DATA:tactic_id_2}\)'
    filter: "{{json_event.output.mitre_attack_tactics != None}}"

  - name: parse_mitre_techniques
    external:
      name: grok.match
      properties:
        raise_errors: false
        input_field: "{{json_event.output.mitre_attack_techniques}}"
        output_field: message
        pattern: '%{DATA:technique_name_1} \(%{DATA:technique_id_1}\)\, %{DATA:technique_name_2} \(%{DATA:technique_id_2}\)'
    filter: "{{json_event.output.mitre_attack_tactics != None}}"

  - name: set_common_fields
  - name: set_os_info
  - name: set_event_fields
  - name: set_tactics_and_techniques

  - name: set_ips_fields
    filter: "{{json_event.output.event_sub_type == 'IPS'}}"

  - name: set_ng_malware_fields
    filter: "{{json_event.output.event_sub_type == 'NG Anti Malware'}}"

stages:
  set_event_fields:
    actions:
      - set:
          "@timestamp": "{{parsed_date.datetime}}"
          event.action: "{{json_event.output.action | lower}}"
          event.reason: "{{json_event.output.event_message}}"

      - set:
          event.category: ["network"]
          event.type: ["info"]

      - set:
          event.category: ["authentication"]
          event.type: ["start"]
          event.outcome: "success"
        filter: "{{json_event.output.get('login_type') != None or json_event.output.get('authentication_type') != None}}"

      - translate:
        dictionary:
          "Succeeded": "success"
          "failed": "failure"
        mapping:
          json_event.output.action: event.outcome
        filter: "{{json_event.output.get('login_type') != None or json_event.output.get('authentication_type') != None}}"

      ## https://support.catonetworks.com/hc/en-us/articles/360011568478
      - set:
          event.category: ["malware"]
        filter: "{{json_event.output.get('threat_type') != None or json_event.output.get('threat_name') != None}}"

      - set:
          event.category: ["intrusion_detection"]
          event.type: ["info"]
        filter: "{{json_event.output.event_sub_type == 'IPS'}}"

      - set:
          event.type: ["denied"]
        filter: "{{json_event.output.event_sub_type == 'IPS' and json_event.output.action == 'Block'}}"

      - set:
          event.type: ["start"]
        filter: "{{json_event.output.event_type == 'Connectivity' and json_event.output.event_sub_type == 'Connected'}}"

      - set:
          event.category: ["network"]
          event.type: ["allowed"]
        filter: "{{json_event.output.event_type == 'Security' and json_event.output.event_sub_type == 'RPF' and json_event.output.action == 'Allow'}}"

  set_os_info:
    actions:
      - set:
          host.name: "{{json_event.output.device_name}}"
          host.ip: "{{json_event.output.host_ip}}"
          host.mac: "{{json_event.output.host_mac}}"
          host.os.version: "{{json_event.output.os_version}}"

      - translate:
        dictionary:
          "OS_WINDOWS": "windows"
          "OS_MAC": "macos"
          "OS_LINUX": "linux"
          "OS_IOS": "ios"
          "OS_ANDROID": "android"
          "OS_UNKNOWN": "unknown"
        mapping:
          json_event.output.os_type: host.os.type
        filter: "{{json_event.output.os_type != None}}"

  set_common_fields:
    actions:
      # Default fields with predefined values
      - set:
          agent.version: "{{json_event.output.client_version}}"

          destination.geo.country_name: "{{json_event.output.dest_country}}"
          destination.ip: "{{json_event.output.dest_ip}}"
          destination.port: "{{json_event.output.dest_port}}"

          file.hash.sha256: "{{json_event.output.file_hash}}"
          file.name: "{{json_event.output.file_name}}"
          file.size: "{{json_event.output.file_size}}"

          network.transport: "{{json_event.output.ip_protocol}}"
          network.direction: "{{json_event.output.traffic_direction}}"
          url.original: "{{json_event.output.url}}"

          http.request.referrer: "{{json_event.output.referer_url}}"

          user.name: "{{json_event.output.user_name}}"
          user.email: "{{json_event.output.vpn_user_email}}"

          rule.id: "{{json_event.output.rule}}"
          rule.name: "{{json_event.output.rule_name}}"

          source.geo.country_name: "{{json_event.output.src_country}}"
          source.ip: "{{json_event.output.src_ip}}"
          source.nat.ip: "{{json_event.output.src_isp_ip}}"
          source.port: "{{json_event.output.src_port}}"

          cato.sase.threat_type: "{{json_event.output.threat_type}}"
          cato.sase.risk_level: "{{json_event.output.risk_level}}"
          cato.sase.event_type: "{{json_event.output.event_type}}"
          cato.sase.event_sub_type: "{{json_event.output.event_sub_type}}"
          cato.sase.custom_category: "{{json_event.output.custom_category}}"

  set_tactics_and_techniques:
    actions:
      - set:
          threat.tactic.id:
            [
              "{{parse_mitre_tactics.message.tactic_id_1}}",
              "{{parse_mitre_tactics.message.tactic_id_2}}",
            ]
          threat.tactic.name:
            [
              "{{parse_mitre_tactics.message.tactic_name_1}}",
              "{{parse_mitre_tactics.message.tactic_name_2}}",
            ]
        filter: "{{parse_mitre_tactics.message != None}}"

      - set:
          threat.technique.id:
            [
              "{{parse_mitre_techniques.message.technique_id_1}}",
              "{{parse_mitre_techniques.message.technique_id_2}}",
            ]
          threat.technique.name:
            [
              "{{parse_mitre_techniques.message.technique_name_1}}",
              "{{parse_mitre_techniques.message.technique_name_2}}",
            ]
        filter: "{{parse_mitre_techniques.message != None}}"

  set_ips_fields:
    actions:
      - set:
          threat.indicator.ip: "{{json_event.output.src_ip}}"
          threat.indicator.type: "ip"
          threat.indicator.description: "{{json_event.output.threat_name}}"
          threat.indicator.name: "{{json_event.output.src_ip}}"
          threat.indicator.reference: "{{json_event.output.src_ip}}"

  set_ng_malware_fields:
    actions:
      - set:
          threat.indicator.file.name: "{{json_event.output.file_name}}"
          threat.indicator.type: "file"
          threat.indicator.description: "{{json_event.output.threat_name}}"
          threat.indicator.name: "{{json_event.output.indicator}}"
          cato.sase.threat_verdict: "{{json_event.output.threat_verdict}}"
