name: solidserver-ddi
pipeline:
  - name: parse_event
    external:
      name: grok.match
      properties:
        output_field: message
        pattern: "%{EFFICIENTIP_DNS_QUERY}|%{EFFICIENTIP_DNS_ANSWER_1}|%{EFFICIENTIP_DNS_ANSWER_DEFAULT}|%{EFFICIENTIP_DNS_UPDATING_ZONE}|%{EFFICIENTIP_DNS_GUARDIAN}|%{EFFICIENTIP_DNS_GUARDIAN_LISTLOG}|%{EFFICIENTIP_RPZ_TRANSFER}|%{EFFICIENTIP_RPZ_ZONE}|%{EFFICIENTIP_RPZ_QNAME}|%{EFFICIENTIP_DNS_ERROR}|%{EFFICIENTIP_DNS_FORMAT_ERROR}|%{EFFICIENTIP_DNS_RECEIVED_NOTIFY}"
        custom_patterns:
          EFFICIENTIP_DNS_QUERY: '%{DNS_HEADER}: query: %{GREEDYDATA:dns_question_name} %{QUERY_CLASS:dns_question_class} %{QUESTION_TYPE:dns_question_type}( %{QUERY_FLAGS})? \(%{IP:server_ip}\)$'
          EFFICIENTIP_DNS_ANSWER_1: '%{DNS_HEADER}: answer: %{GREEDYDATA:dns_question_name} %{QUERY_CLASS:dns_question_class} %{QUESTION_TYPE:dns_question_type}( %{QUERY_FLAGS})? \(%{IP:server_ip}\) -> %{WORD:response_code} %{GREEDYDATA:dns_records}$'
          EFFICIENTIP_DNS_ANSWER_DEFAULT: '%{DNS_HEADER}: answer: %{GREEDYDATA:dns_question_name} %{QUERY_CLASS:dns_question_class} %{QUESTION_TYPE:dns_question_type}( %{QUERY_FLAGS})? \(%{IP:server_ip}\) -> %{WORD:response_code}( %{GREEDYDATA:dns_records})?$'
          EFFICIENTIP_DNS_GUARDIAN: '%{GUARDIAN_ACTION:guardian_action} trigger on %{IP:client_ip}(.%{GREEDYDATA})? \(action:%{WORD:action}\) \(%{GREEDYDATA:trigger_name}\)$'
          EFFICIENTIP_DNS_GUARDIAN_LISTLOG: 'List Matched %{IP:client_ip}#%{POSINT:client_port:int}: query: %{GREEDYDATA:dns_question_name} %{QUERY_CLASS:dns_question_class} %{QUESTION_TYPE:dns_question_type} \(%{IP:server_ip}\) \{%{GREEDYDATA:list_names}\}( \[%{GREEDYDATA:tag_names}\])?'
          EFFICIENTIP_DNS_UPDATING_ZONE: "%{DNS_HEADER}: updating zone '%{DATA:rpz_domain}/%{QUERY_CLASS:rpz_query_class}': %{DATA:action} %{GREEDYDATA:reason}?"
          EFFICIENTIP_RPZ_QNAME: "%{DNS_HEADER}: rpz QNAME %{GREEDYDATA} %{DATA:rpz_domain}/%{WORD:rpz_view}/%{QUERY_CLASS:rpz_query_class} via %{RPZ_SOURCE}"
          EFFICIENTIP_RPZ_TRANSFER: "(%{DNS_HEADER}: )?transfer of '%{DATA:rpz_domain}/%{QUERY_CLASS:rpz_query_class}(/%{WORD:rpz_view})?'( from %{RPZ_SOURCE})?: %{GREEDYDATA:reason}"
          EFFICIENTIP_RPZ_ZONE: "zone %{DATA:rpz_domain}/%{QUERY_CLASS:rpz_query_class}(/%{WORD:rpz_view})?: (%{DATA:action} from %{RPZ_SOURCE}: )?%{GREEDYDATA:reason}"
          EFFICIENTIP_DNS_ERROR: "%{ERROR_REASON:error} resolving '%{GREEDYDATA:dns_question_name}/%{QUESTION_TYPE:dns_question_type}/%{QUERY_CLASS:dns_question_class}': %{IP:server_ip}#%{INT:server_port}"
          EFFICIENTIP_DNS_FORMAT_ERROR: "DNS format error from %{IP:server_ip}#%{INT:server_port} resolving %{GREEDYDATA:dns_question_name}/%{QUESTION_TYPE:dns_question_type} for %{IP:client_ip}#%{INT:client_port}: %{GREEDYDATA:reason}"
          EFFICIENTIP_DNS_RECEIVED_NOTIFY: "%{DNS_HEADER}:( view %{WORD}:)? received notify for zone '%{DATA:rpz_domain}'"
          QUERY_FLAGS: "%{QUERY_FLAGS_RD:flags_rd}%{QUERY_FLAGS_EDNS:flags_edns}?%{QUERY_FLAGS_TCP:flags_tcp}?%{QUERY_FLAGS_DNSSEC:flags_dnssec}?%{QUERY_FLAGS_CD:flags_cd}?%{QUERY_FLAGS_DNS_SERVER_COOKIE}?%{QUERY_FLAGS_DNS_SERVER_COOKIE_WITHOUT_VALID_SERVER}?"
          QUERY_FLAGS_RD: '[\+\-]'
          QUERY_FLAGS_SIGNED: "S?"
          QUERY_FLAGS_EDNS: 'E(\(%{INT}\))?'
          QUERY_FLAGS_TCP: "T"
          QUERY_FLAGS_DNSSEC: "D"
          QUERY_FLAGS_CD: "C"
          QUERY_FLAGS_DNS_SERVER_COOKIE: "V"
          QUERY_FLAGS_DNS_SERVER_COOKIE_WITHOUT_VALID_SERVER: "K"
          QUERY_CLASS: "IN"
          DNS_HEADER: '(%{POSINT}\:)?client( @0x[0-9A-Fa-f]+)? %{IP:client_ip}#%{POSINT:client_port:int}( \(%{GREEDYDATA:log_query_name}\))?'
          QUESTION_TYPE: "A|AAAA|CAA|CDNSKEY|CDS|CERT|CNAME|CSYNC|DLV|DNAME|DNSKEY|DS|HINFO|LOC|MX|NAPTR|NS|NSEC|NSEC3|OPENPGPKEY|PTR|RRSIG|RP|SIG|SMIMEA|SOA|SRV|TSIG|TXT|URI|TYPE65|HTTPS"
          GUARDIAN_ACTION: "(DIS)?ARMING"
          RPZ_SOURCE: "(%{IP:source_ip}#%{INT:source_port}|%{DATA:source_name})"
          ERROR_REASON: "FORMERR|REFUSED %{DATA:reason}"

  - name: parse_dns_https
    filter: "{{ parse_event.message.get('dns_records') != None and 'HTTPS' in parse_event.message.get('dns_records')}}"
    external:
      name: grok.match
      properties:
        input_field: "{{parse_event.message.dns_records}}"
        output_field: message
        pattern: ".*?%{DNS_RECORD_HTTPS}.*"
        custom_patterns:
          HTTPS_DATA: "alpn=%{DATA} ipv4hint=((%{IPV4},?)+)( ipv6hint=((%{IPV6},?)+))?"
          DNS_RECORD_HTTPS: "%{NUMBER:https_ttl} HTTPS %{NUMBER} \\.( %{HTTPS_DATA})?"

  - name: parse_dns_rrsig
    filter: "{{ parse_event.message.get('dns_records') != None and 'RRSIG' in parse_event.message.get('dns_records')}}"
    external:
      name: grok.match
      properties:
        input_field: "{{parse_event.message.dns_records}}"
        output_field: message
        pattern: ".*?%{DNS_RECORD_RRSIG}.*"
        custom_patterns:
          DNS_RECORD_RRSIG: "%{NUMBER:rrsig_ttl} RRSIG %{WORD:type_covered} %{NUMBER:algo}( %{NUMBER:num_labels} %{NUMBER:original_ttl} %{NUMBER:expiration} %{NUMBER:inception} %{NUMBER:key_tag} %{HOSTNAME:signers_name} %{BASE64:signature})?"
          BASE64: '[-A-Za-z0-9+/\=]+'

  - name: parse_date
    filter: "{{parse_event.message.timestamp != null}}"
    external:
      name: date.parse
      properties:
        input_field: "{{parse_event.message.timestamp}}"
        output_field: timestamp

  - name: set_ecs_fields
    filter: "{{parse_event.message != None}}"
  - name: set_efficient_fields

stages:
  set_ecs_fields:
    actions:
      - set:
          event.dataset: "solidserver-ddi"
          event.category: ["network"]
          event.type: ["info"]
          observer.vendor: "EfficientIp"
          client.port: "{{parse_event.message.client_port}}"
          source.port: "{{parse_event.message.source_port}}"
          server.port: "{{parse_event.message.server_port}}"
          event.action: "{{parse_event.message.action}}"
          event.reason: "{{parse_event.message.reason}}"

      - set:
          client.ip: "{{parse_event.message.client_ip}}"
        filter: "{{parse_event.message.client_ip | is_ipaddress}}"

      - set:
          server.ip: "{{parse_event.message.server_ip}}"
        filter: "{{parse_event.message.server_ip | is_ipaddress}}"

      - set:
          source.ip: "{{parse_event.message.source_ip}}"
        filter: "{{parse_event.message.source_ip | is_ipaddress}}"

      - set:
          dns.type: "query"
        filter: '{{parse_event.message.get("response_code") == None and parse_event.message.get("guardian_action") == None}}'

      - set:
          dns.type: "answer"
          dns.response_code: "{{parse_event.message.response_code}}"
        filter: '{{parse_event.message.get("response_code") != None}}'

      - set:
          dns.question.class: "{{parse_event.message.dns_question_class}}"
          dns.question.type: "{{parse_event.message.dns_question_type}}"
          dns.question.name: "{{parse_event.message.dns_question_name}}"
        filter: '{{parse_event.message.get("guardian_action") == None}}'

      - set:
          dns.header_flags: >
            [
              {% if parse_event.message.flags_rd == "+" %}"RD",{% endif %}
              {% if parse_event.message.flags_cd == "C" %}"CD",{% endif %}
            ]
        filter: '{{parse_event.message.get("guardian_action") == None and (parse_event.message.get("flags_cd") != None or parse_event.message.get("flags_rd") != None)}}'

      - set:
          network.transport: "tcp"
        filter: '{{parse_event.message.flags_tcp == "T"}}'

      - set:
          network.transport: "udp"
        filter: '{{parse_event.message.flags_tcp != "T"  and parse_event.message.get("guardian_action") == None}}'

      - set:
          dns.answers: >
            {%- set records = parse_event.message.dns_records -%}
            {% if parse_dns_https %}{%- set records = records.replace(parse_dns_https.message.DNS_RECORD_HTTPS, '').strip() -%}{% endif %}
            {% if parse_dns_rrsig %}{%- set records = records.replace(parse_dns_rrsig.message.DNS_RECORD_RRSIG, '').strip() -%}{%- endif -%}
            [
                {%- for record in records.strip().split() | batch(3) -%}
                  {"ttl": {{record[0]}}, "type": "{{record[1]}}", "data": "{{record[2]}}"},
                {%- endfor -%}
                {% if parse_dns_https %}{"ttl": {{parse_dns_https.message.https_ttl}}, "type": "HTTPS", "data": "{{parse_dns_https.message.HTTPS_DATA or '.'}}"},{% endif %}
                {% if parse_dns_rrsig %}{"ttl": {{parse_dns_rrsig.message.rrsig_ttl}}, "type": "RSSIG", "data": "HTTPS"},{% endif %}
            ]
        filter: "{{parse_dns_https != null or parse_dns_rrsig != null}}"

      - set:
          dns.answers: >
            [
                {%- for record in parse_event.message.dns_records.split() | batch(3) -%}
                  {"ttl": {{record[0]}}, "type": "{{record[1]}}", "data": "{{record[2]}}"},
                {%- endfor -%}
            ]
        filter: "{{parse_dns_https == null and parse_dns_rrsig == null}}"

      - set:
          event.outcome: "failure"
        filter: '{{parse_event.message.get("error") != None or original.message.endswith("invalid response")}}'

  set_efficient_fields:
    actions:
      - set:
          efficientip.guardian_action: "{{parse_event.message.guardian_action | lower}}"
          event.action: "{{parse_event.message.action | lower}}"
          efficientip.guardian_trigger_name: "{{parse_event.message.trigger_name}}"
        filter: '{{parse_event.message.get("guardian_action") != None}}'

      - set:
          efficientip.list_names: "{{parse_event.message.list_names.split(',')}}"
        filter: '{{parse_event.message.get("list_names") != None}}'

      - set:
          efficientip.tag_names: "{{parse_event.message.tag_names.split(',')}}"
        filter: '{{parse_event.message.get("tag_names") != None}}'

      - set:
          efficientip.rpz.domain: "{{parse_event.message.rpz_domain}}"
          efficientip.rpz.query.class: "{{parse_event.message.rpz_query_class}}"
          efficientip.rpz.view: "{{parse_event.message.rpz_view}}"
          efficientip.rpz.source.name: "{{parse_event.message.source_name}}"
