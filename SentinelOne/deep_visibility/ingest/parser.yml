name: deepvisibility
pipeline:
  - name: json_event
    external:
      name: json.parse-json
      properties:
        input_field: '{{original.message}}'
  
  # Time conversions Cloud Funnel 1.0
  - name: convert_timestamp
    filter: "{{ json_event.message.timestamp and json_event.message.timestamp.millisecondsSinceEpoch | length == 13 }}"
    external:
      name: date.parse
      properties:
        input_field: "{{json_event.message.timestamp.millisecondsSinceEpoch[:-3]}}.{{json_event.message.timestamp.millisecondsSinceEpoch[-3:]}}"
        output_field: start_date
        format: timestamp

  - name: convert_process_exec_start
    filter: "{{json_event.message.source != null and json_event.message.source.executable.creationTime.millisecondsSinceEpoch != null and json_event.message.source.executable.creationTime.millisecondsSinceEpoch | length == 13}}"
    external:
      name: date.parse
      properties:
        input_field: "{{json_event.message.source.executable.creationTime.millisecondsSinceEpoch[:-3]}}.{{json_event.message.source.executable.creationTime.millisecondsSinceEpoch[-3:]}}"
        output_field: start_date
        format: timestamp

  - name: convert_source_process_start
    filter: "{{json_event.message.source != null and json_event.message.source.fullPid.startTime.millisecondsSinceEpoch != null and json_event.message.source.fullPid.startTime.millisecondsSinceEpoch | length == 13}}"
    external:
      name: date.parse
      properties:
        input_field: "{{json_event.message.source.fullPid.startTime.millisecondsSinceEpoch[:-3]}}.{{json_event.message.source.fullPid.startTime.millisecondsSinceEpoch[-3:]}}"
        output_field: start_date
        format: timestamp

  - name: convert_process_start
    filter: "{{json_event.message.process != null and json_event.message.process.fullPid.startTime.millisecondsSinceEpoch != null and json_event.message.process.fullPid.startTime.millisecondsSinceEpoch | length == 13}}"
    external:
      name: date.parse
      properties:
        input_field: "{{json_event.message.process.fullPid.startTime.millisecondsSinceEpoch[:-3]}}.{{json_event.message.process.fullPid.startTime.millisecondsSinceEpoch[-3:]}}"
        output_field: start_date
        format: timestamp

  - name: convert_parent_process_start
    filter: "{{json_event.message.parent != null and json_event.message.parent.fullPid.startTime.millisecondsSinceEpoch != null and json_event.message.parent.fullPid.startTime.millisecondsSinceEpoch | length == 13}}"
    external:
      name: date.parse
      properties:
        input_field: "{{json_event.message.parent.fullPid.startTime.millisecondsSinceEpoch[:-3]}}.{{json_event.message.parent.fullPid.startTime.millisecondsSinceEpoch[-3:]}}"
        output_field: start_date
        format: timestamp

  - name: convert_target_process_start
    filter: "{{json_event.message.target != null and json_event.message.target.fullPid.startTime.millisecondsSinceEpoch != null and json_event.message.target.fullPid.startTime.millisecondsSinceEpoch | length == 13}}"
    external:
      name: date.parse
      properties:
        input_field: "{{json_event.message.target.fullPid.startTime.millisecondsSinceEpoch[:-3]}}.{{json_event.message.target.fullPid.startTime.millisecondsSinceEpoch[-3:]}}"
        output_field: start_date
        format: timestamp

  - name: convert_file_creation_time
    filter: "{{json_event.message.file != null and json_event.message.file.creationTime.millisecondsSinceEpoch != null and json_event.message.file.creationTime.millisecondsSinceEpoch | length == 13}}"
    external:
      name: date.parse
      properties:
        input_field: "{{json_event.message.file.creationTime.millisecondsSinceEpoch[:-3]}}.{{json_event.message.file.creationTime.millisecondsSinceEpoch[-3:]}}"
        output_field: start_date
        format: timestamp

  - name: convert_target_file_creation_time
    filter: "{{json_event.message.targetFile != null and json_event.message.targetFile.creationTime.millisecondsSinceEpoch != null and json_event.message.targetFile.creationTime.millisecondsSinceEpoch | length == 13}}"
    external:
      name: date.parse
      properties:
        input_field: "{{json_event.message.targetFile.creationTime.millisecondsSinceEpoch[:-3]}}.{{json_event.message.targetFile.creationTime.millisecondsSinceEpoch[-3:]}}"
        output_field: start_date
        format: timestamp

  # Time conversions Cloud Funnel 2.0
  - name: convert_timestamp
    filter: '{{json_event.message.get("@timestamp") != None}}'
    external:
      name: date.parse
      properties:
        input_field: '{{json_event.message["@timestamp"]}}'
        output_field: start_date
        format: null
        timezone: UTC
        
  - name: convert_process_exec_start
    filter: '{{json_event.message.event.source != null and json_event.message.event.source.executable.creationTime.millisecondsSinceEpoch != null and json_event.message.event.source.executable.creationTime.millisecondsSinceEpoch | length == 13}}'
    external:
      name: date.parse
      properties:
        input_field: '{{json_event.message.event.source.executable.creationTime.millisecondsSinceEpoch[:-3]}}.{{json_event.message.event.source.executable.creationTime.millisecondsSinceEpoch[-3:]}}'
        output_field: start_date
        format: timestamp
        timezone: UTC

  - name: convert_source_process_start
    filter: '{{json_event.message.event.source != null and json_event.message.event.source.fullPid.startTime.millisecondsSinceEpoch != null and
      json_event.message.event.source.fullPid.startTime.millisecondsSinceEpoch | length == 13}}'
    external:
      name: date.parse
      properties:
        input_field: '{{json_event.message.event.source.fullPid.startTime.millisecondsSinceEpoch[:-3]}}.{{json_event.message.event.source.fullPid.startTime.millisecondsSinceEpoch[-3:]}}'
        output_field: start_date
        format: timestamp
        timezone: UTC

  - name: convert_process_start
    filter: '{{json_event.message.event.process != null and json_event.message.event.process.fullPid.startTime.millisecondsSinceEpoch != null and
      json_event.message.event.process.fullPid.startTime.millisecondsSinceEpoch | length == 13}}'
    external:
      name: date.parse
      properties:
        input_field: '{{json_event.message.event.process.fullPid.startTime.millisecondsSinceEpoch[:-3]}}.{{json_event.message.event.process.fullPid.startTime.millisecondsSinceEpoch[-3:]}}'
        output_field: start_date
        format: timestamp
        timezone: UTC

  - name: convert_parent_process_start
    filter: '{{json_event.message.event.source.parent != null and json_event.message.event.source.parent.fullPid.startTime.millisecondsSinceEpoch != null and json_event.message.event.source.parent.fullPid.startTime.millisecondsSinceEpoch | length == 13}}'
    external:
      name: date.parse
      properties:
        input_field: '{{json_event.message.event.source.parent.fullPid.startTime.millisecondsSinceEpoch[:-3]}}.{{json_event.message.event.source.parent.fullPid.startTime.millisecondsSinceEpoch[-3:]}}'
        output_field: start_date
        format: timestamp
        timezone: UTC

  - name: convert_target_process_start
    filter: '{{json_event.message.event.source.target != null and json_event.message.event.source.target.fullPid.startTime.millisecondsSinceEpoch != null and json_event.message.event.source.target.fullPid.startTime.millisecondsSinceEpoch | length == 13}}'
    external:
      name: date.parse
      properties:
        input_field: '{{json_event.message.event.source.target.fullPid.startTime.millisecondsSinceEpoch[:-3]}}.{{json_event.message.event.source.target.fullPid.startTime.millisecondsSinceEpoch[-3:]}}'
        output_field: start_date
        format: timestamp
        timezone: UTC

  - name: convert_file_creation_time
    filter: '{{json_event.message.event.file != null and json_event.message.event.file.creationTime.millisecondsSinceEpoch != null and json_event.message.event.file.creationTime.millisecondsSinceEpoch | length == 13}}'
    external:
      name: date.parse
      properties:
        input_field: '{{json_event.message.event.file.creationTime.millisecondsSinceEpoch[:-3]}}.{{json_event.message.event.file.creationTime.millisecondsSinceEpoch[-3:]}}'
        output_field: start_date
        format: timestamp
        timezone: UTC

  - name: convert_target_file_creation_time
    filter: '{{json_event.message.event.targetFile != null and json_event.message.event.targetFile.creationTime.millisecondsSinceEpoch != null and
      json_event.message.event.targetFile.creationTime.millisecondsSinceEpoch | length == 13}}'
    external:
      name: date.parse
      properties:
        input_field: '{{json_event.message.event.targetFile.creationTime.millisecondsSinceEpoch[:-3]}}.{{json_event.message.event.targetFile.creationTime.millisecondsSinceEpoch[-3:]}}'
        output_field: start_date
        format: timestamp
        timezone: UTC
  
  # File extractions      
  - name: find_target_file_name
    filter: '{{(json_event.message.targetFile != null and json_event.message.targetFile.isDir == "E_FALSE") or (json_event.message.event.targetFile != null and json_event.message.event.targetFile.isDir == "E_FALSE")}}'
    external:
      name: grok.match
      properties:
        input_field: '{{json_event.message.targetFile.path or json_event.message.event.targetFile.path}}'
        output_field: file
        pattern: '%{GREEDYDATA}[\\\/]+%{GREEDYDATA:name}$'
        custom_patterns: {}

  - name: find_dll_name
    filter: '{{json_event.message.get("path") != None or json_event.message.event.get("path") != None}}'
    external:
      name: grok.match
      properties:
        input_field: '{{json_event.message.path or json_event.message.event.path}}'
        output_field: file
        pattern: '%{GREEDYDATA}[\\\/]+%{GREEDYDATA:name}$'
        custom_patterns: {}
  
  - name: find_reg_value_key_name
    filter: '{{(json_event.message.get("regValue") != None and json_event.message.regValue.get("path") != None) or (json_event.message.event.get("regValue") != None and json_event.message.event.regValue.get("path") != None)}}'
    external:
      name: grok.match
      properties:
        input_field: '{{json_event.message.regValue.path or json_event.message.event.regValue.path}}'
        output_field: key
        pattern: '%{GREEDYDATA}[\\\/]+%{GREEDYDATA:name}$'
        custom_patterns: {}

  - name: find_reg_key_name
    filter: '{{(json_event.message.get("regKey") != None and json_event.message.regKey.get("path") != None) or (json_event.message.event.get("regKey") != None and json_event.message.event.regKey.get("path") != None)}}'
    external:
      name: grok.match
      properties:
        input_field: '{{json_event.message.regKey.path or json_event.message.event.regKey.path}}'
        output_field: key
        pattern: '%{GREEDYDATA}[\\\/]+%{GREEDYDATA:name}$'
        custom_patterns: {}

  - name: set_meta_fields

  - name: set_common_fields

  - name: set_source_fields
    filter: '{{json_event.message.get("source") != None or json_event.message.event.get("source") != None}}'

  - name: set_process_fields
    filter: '{{json_event.message.get("process") != None or json_event.message.event.get("process") != None}}'

  - name: set_ip_fields
    filter: '{{(json_event.message.get("sourceAddress") != None or json_event.message.get("destinationAddress") != None) or (json_event.message.event.get("sourceAddress") != None or json_event.message.event.get("destinationAddress") != None)}}'

  - name: set_source_parent_fields
    filter: '{{(json_event.message.get("source") != None and json_event.message.source.get("parent") != None) or (json_event.message.event.get("source") != None and json_event.message.event.source.get("parent") != None)}}'

  - name: set_parent_fields
    filter: '{{json_event.message.get("parent") != None or json_event.message.event.get("parent") != None}}'

  - name: set_target_fields
    filter: '{{json_event.message.get("target") != None or json_event.message.event.get("target") != None}}'

  - name: set_dns_fields
    filter: '{{json_event.message.event_type == "dns" or json_event.message.event.type == "dns"}}'

  - name: set_module_load_fields
    filter: '{{json_event.message.event_type == "moduleLoad" or json_event.message.event.type == "moduleLoad"}}'

  - name: set_process_signature
    filter: '{{(json_event.message.get("process") != None and json_event.message.get("signature") != None) or (json_event.message.event.get("process") != None and json_event.message.event.get("signature") != None)}}'

  - name: set_file_signature
    filter: '{{(json_event.message.get("file") != None and json_event.message.get("signature") != None) or (json_event.message.event.get("file") != None and json_event.message.event.get("signature") != None)}}'

  - name: set_file_fields
    filter: '{{json_event.message.get("file") != None or json_event.message.event.get("file") != None}}'

  - name: set_kernel_fields
    filter: '{{json_event.message.get("isKernelModule") != None or json_event.message.event.get("isKernelModule") != None}}'

  - name: set_target_file_fields
    filter: '{{json_event.message.get("targetFile") != None or json_event.message.event.get("targetFile") != None}}'

  - name: set_reg_value_fields
    filter: '{{json_event.message.get("regValue") != None or json_event.message.event.get("regValue") != None}}'

  - name: set_reg_key_fields
    filter: '{{json_event.message.get("regKey") != None or json_event.message.event.get("regKey") != None}}'

  - name: set_script_fields
    filter: '{{json_event.message.event_type == "scripts" or json_event.message.event.type == "scripts"}}'

  - name: set_http_fields
    filter: '{{json_event.message.event_type == "http" or json_event.message.event.type == "http"}}'

  - name: set_indicator_fields
    filter: '{{json_event.message.event_type == "behavioralIndicators" or json_event.message.event.type == "behavioralIndicators"}}'

stages:
  set_meta_fields:
    actions:
      - set:
          host.name: '{{json_event.message.meta.computerName}}'
          host.type: '{{json_event.message.meta.machineType}}'
          event.action: '{{json_event.message.event_type or json_event.message.event.type}}'
          host.os.name: '{{json_event.message.meta.osName}}'
          agent.version: '{{json_event.message.meta.agentVersion}}'
          host.os.family: '{{json_event.message.meta.osFamily}}'
          deepvisibility.agent.uuid: '{{json_event.message.meta.uuid}}'
          deepvisibility.event.type: '{{json_event.message.event_type or json_event.message.event.type}}'
          deepvisibility.agent.seq_id: '{{json_event.message.meta.seqId}}'
          deepvisibility.agent.trace_id: '{{json_event.message.meta.traceId}}'
          deepvisibility.host.os.revision: '{{json_event.message.meta.osRevision}}'
          deepvisibility.true_context.key: '{{json_event.message.trueContext.key.value or json_event.message.event.trueContext.key.value}}'
          deepvisibility.agent.managment_url: '{{json_event.message.meta.mgmtUrl}}'
      - set:
          event.start: '{{convert_timestamp.start_date}}'

  set_common_fields:
    actions:
      - set:
          process.exit_code: '{{json_event.message.exitCode or json_event.message.event.exitCode}}'
          deepvisibility.process.relations: '{{ json_event.message.relations or json_event.message.event.relations }}'
          deepvisibility.scheduled_task.name: '{{ json_event.message.taskName or json_event.message.event.taskName }}'
          deepvisibility.process.desired_access: '{{ json_event.message.desiredAccess or json_event.message.event.desiredAccess }}'
          deepvisibility.scheduled_task.trigger_type: '{{ json_event.message.triggerType or json_event.message.event.triggerType }}'
      - set:
          file.hash.md5: '{{ json_event.message.hashes.md5 or json_event.message.event.hashes.md5 }}'
          file.hash.sha1: '{{ json_event.message.hashes.sha1 or json_event.message.event.hashes.sha1 }}'
          file.hash.sha256: '{{ json_event.message.hashes.sha256 or json_event.message.event.hashes.sha256 }}'
        filter: '{{json_event.message.get("hashes") != None or json_event.message.event.get("hashes") != None}}'

  set_source_fields:
    actions:
      - set:
          user.id: '{{json_event.message.source.user.sid or json_event.message.event.source.user.sid}}'
          user.name: '{{json_event.message.source.user.name or json_event.message.event.source.user.name}}'
          process.pid: '{{json_event.message.source.fullPid.pid or json_event.message.event.source.fullPid.pid}}'
          process.title: '{{(json_event.message.source.name | trim) or (json_event.message.event.source.name | trim)}}'
          process.hash.md5: '{{json_event.message.source.executable.hashes.md5 or json_event.message.event.source.executable.hashes.md5}}'
          process.hash.sha1: '{{json_event.message.source.executable.hashes.sha1 or json_event.message.event.source.executable.hashes.sha1}}'
          process.executable: '{{json_event.message.source.executable.path or json_event.message.event.source.executable.path}}'
          process.hash.sha256: '{{json_event.message.source.executable.hashes.sha256 or json_event.message.event.source.executable.hashes.sha256}}'
          process.command_line: '{{json_event.message.source.commandLine or json_event.message.event.source.commandLine}}'
          process.working_directory: '{{(json_event.message.source.executable.path.split("\\")[0:-1] | join("\\")) or (json_event.message.event.source.executable.path.split("\\")[0:-1] | join("\\"))}}'
          deepvisibility.process.root: '{{json_event.message.source.root or json_event.message.event.source.root}}'
          deepvisibility.process.family: '{{json_event.message.source.subsystem or json_event.message.event.source.subsystem}}'
          deepvisibility.process.excluded: '{{json_event.message.source.excluded or json_event.message.event.source.excluded}}'
          deepvisibility.process.is_wow64: '{{json_event.message.source.isWow64 or json_event.message.event.source.isWow64}}'
          deepvisibility.process.node.key: '{{json_event.message.source.node.key.value or json_event.message.event.source.node.key.value}}'
          deepvisibility.process.user.sid: '{{json_event.message.source.user.sid or json_event.message.event.source.user.sid}}'
          deepvisibility.process.session_id: '{{json_event.message.source.sessionId or json_event.message.event.source.sessionId}}'
          deepvisibility.process.interactive: '{{json_event.message.source.interactive or json_event.message.event.source.interactive}}'
          deepvisibility.process.executable.name: '{{json_event.message.source.executable.path or json_event.message.event.source.executable.path}}'
          deepvisibility.process.integrity_level: '{{json_event.message.source.integrityLevel or json_event.message.event.source.integrityLevel}}'
          deepvisibility.process.parent.node.key: '{{json_event.message.source.parent.node.key.value or json_event.message.event.source.parent.node.key.value}}'
          deepvisibility.process.executable.start: '{{json_event.message.source.executable.creationTime.millisecondsSinceEpoch or json_event.message.event.source.executable.creationTime.millisecondsSinceEpoch}}'
          deepvisibility.process.true_context.key: '{{json_event.message.source.trueContext.key.value or json_event.message.event.source.trueContext.key.value}}'
          deepvisibility.process.executable.is_dir: '{{json_event.message.source.executable.isDir or json_event.message.event.source.executable.isDir}}'
          deepvisibility.process.executable.node.key: '{{json_event.message.source.executable.node.key.value or json_event.message.event.source.executable.node.key.value}}'
          deepvisibility.process.counters.dns_lookups: '{{json_event.message.source.counters.dnsLookups or json_event.message.event.source.counters.dnsLookups}}'
          deepvisibility.process.counters.module_load: '{{json_event.message.source.counters.moduleLoad or json_event.message.event.source.counters.moduleLoad}}'
          deepvisibility.process.counters.net_conn_out: '{{json_event.message.source.counters.netConnOut or json_event.message.event.source.counters.netConnOut}}'
          deepvisibility.process.executable.size_bytes: '{{json_event.message.source.executable.sizeBytes or json_event.message.event.source.executable.sizeBytes}}'
          deepvisibility.process.counters.cross_process: '{{json_event.message.source.counters.crossProcess or json_event.message.event.source.counters.crossProcess}}'
          deepvisibility.process.counters.file_creation: '{{json_event.message.source.counters.fileCreation or json_event.message.event.source.counters.fileCreation}}'
          deepvisibility.process.counters.file_deletion: '{{json_event.message.source.counters.fileDeletion or json_event.message.event.source.counters.fileDeletion}}'
          deepvisibility.process.counters.os_child_process: '{{json_event.message.source.counters.osChildProcess or json_event.message.event.source.counters.osChildProcess}}'
          deepvisibility.process.counters.file_modification: '{{json_event.message.source.counters.fileModification or json_event.message.event.source.counters.fileModification}}'
          deepvisibility.process.counters.model_child_process: '{{json_event.message.source.counters.modelChildProcess or json_event.message.event.source.counters.modelChildProcess}}'
          deepvisibility.process.counters.registry_modification: '{{json_event.message.source.counters.registryModification or json_event.message.event.source.counters.registryModification}}'
          deepvisibility.process.is_redirected_command_processor: '{{json_event.message.source.isRedirectedCommandProcessor or json_event.message.event.source.isRedirectedCommandProcessor}}'
          deepvisibility.process.executable.signature.signed.identity: '{{json_event.message.source.executable.signature.signed.identity or json_event.message.event.source.executable.signature.signed.identity}}'
          deepvisibility.process.counters.cross_process_dup_thread_handle: '{{json_event.message.source.counters.crossProcessDupThreadHandle or json_event.message.event.source.counters.crossProcessDupThreadHandle}}'
          deepvisibility.process.counters.cross_process_dup_process_handle: '{{json_event.message.source.counters.crossProcessDupProcessHandle or json_event.message.event.source.counters.crossProcessDupProcessHandle}}'
      - set:
          process.start: '{{convert_source_process_start.start_date}}'
        filter: '{{ convert_source_process_start != null }}'
      - set:
          deepvisibility.process.executable.start: '{{convert_process_exec_start.start_date}}'
        filter: '{{ convert_process_exec_start != null }}'
      - set:
          process.name: '{{(json_event.message.source.executable.path | basename) or (json_event.message.event.source.executable.path | basename)}}'

  set_process_fields:
    actions:
      - set:
          user.id: '{{json_event.message.process.user.sid or json_event.message.event.process.user.sid}}'
          user.name: '{{json_event.message.process.user.name or json_event.message.event.process.user.name}}'
          process.pid: '{{json_event.message.process.fullPid.pid or json_event.message.event.process.fullPid.pid}}'
          process.title: '{{(json_event.message.process.name | trim) or (json_event.message.event.process.name | trim)}}'
          process.hash.md5: '{{json_event.message.process.executable.hashes.md5 or json_event.message.event.process.executable.hashes.md5}}'
          process.hash.sha1: '{{json_event.message.process.executable.hashes.sha1 or json_event.message.event.process.executable.hashes.sha1}}'
          process.executable: '{{json_event.message.process.executable.path or json_event.message.event.process.executable.path}}'
          process.hash.sha256: '{{json_event.message.process.executable.hashes.sha256 or json_event.message.event.process.executable.hashes.sha256}}'
          process.command_line: '{{json_event.message.process.commandLine or json_event.message.event.process.commandLine}}'
          process.working_directory: '{{(json_event.message.process.executable.path.split("\\")[0:-1] | join("\\")) or (json_event.message.event.process.executable.path.split("\\")[0:-1] | join("\\"))}}'
          deepvisibility.process.root: '{{json_event.message.process.root or json_event.message.event.process.root}}'
          deepvisibility.process.family: '{{json_event.message.process.subsystem or json_event.message.event.process.subsystem}}'
          deepvisibility.process.excluded: '{{json_event.message.process.excluded or json_event.message.event.process.excluded}}'
          deepvisibility.process.is_wow64: '{{json_event.message.process.isWow64 or json_event.message.event.process.isWow64}}'
          deepvisibility.process.node.key: '{{json_event.message.process.node.key.value or json_event.message.event.process.node.key.value}}'
          deepvisibility.process.user.sid: '{{json_event.message.process.user.sid or json_event.message.event.process.user.sid}}'
          deepvisibility.process.session_id: '{{json_event.message.process.sessionId or json_event.message.event.process.sessionId}}'
          deepvisibility.process.interactive: '{{json_event.message.process.interactive or json_event.message.event.process.interactive}}'
          deepvisibility.process.executable.name: '{{json_event.message.process.executable.path or json_event.message.event.process.executable.path}}'
          deepvisibility.process.integrity_level: '{{json_event.message.process.integrityLevel or json_event.message.event.process.integrityLevel}}'
          deepvisibility.process.parent.node.key: '{{json_event.message.process.parent.node.key.value or json_event.message.event.process.parent.node.key.value}}'
          deepvisibility.process.executable.start: '{{json_event.message.process.executable.creationTime.millisecondsSinceEpoch or json_event.message.event.process.executable.creationTime.millisecondsSinceEpoch}}'
          deepvisibility.process.true_context.key: '{{json_event.message.process.trueContext.key.value or json_event.message.event.process.trueContext.key.value}}'
          deepvisibility.process.executable.is_dir: '{{json_event.message.process.executable.isDir or json_event.message.event.process.executable.isDir}}'
          deepvisibility.process.executable.node.key: '{{json_event.message.process.executable.node.key.value or json_event.message.event.process.executable.node.key.value}}'
          deepvisibility.process.counters.dns_lookups: '{{json_event.message.process.counters.dnsLookups or json_event.message.event.process.counters.dnsLookups}}'
          deepvisibility.process.counters.module_load: '{{json_event.message.process.counters.moduleLoad or json_event.message.event.process.counters.moduleLoad}}'
          deepvisibility.process.counters.net_conn_out: '{{json_event.message.process.counters.netConnOut or json_event.message.event.process.counters.netConnOut}}'
          deepvisibility.process.executable.size_bytes: '{{json_event.message.process.executable.sizeBytes or json_event.message.event.process.executable.sizeBytes}}'
          deepvisibility.process.counters.cross_process: '{{json_event.message.process.counters.crossProcess or json_event.message.event.process.counters.crossProcess}}'
          deepvisibility.process.counters.file_creation: '{{json_event.message.process.counters.fileCreation or json_event.message.event.process.counters.fileCreation}}'
          deepvisibility.process.counters.file_deletion: '{{json_event.message.process.counters.fileDeletion or json_event.message.event.process.counters.fileDeletion}}'
          deepvisibility.process.counters.os_child_process: '{{json_event.message.process.counters.osChildProcess or json_event.message.event.process.counters.osChildProcess}}'
          deepvisibility.process.counters.file_modification: '{{json_event.message.process.counters.fileModification or json_event.message.event.process.counters.fileModification}}'
          deepvisibility.process.counters.model_child_process: '{{json_event.message.process.counters.modelChildProcess or json_event.message.event.process.counters.modelChildProcess}}'
          deepvisibility.process.counters.registry_modification: '{{json_event.message.process.counters.registryModification or json_event.message.event.process.counters.registryModification}}'
          deepvisibility.process.is_redirected_command_processor: '{{json_event.message.process.isRedirectedCommandProcessor or json_event.message.event.process.isRedirectedCommandProcessor}}'
          deepvisibility.process.executable.signature.signed.identity: '{{json_event.message.process.executable.signature.signed.identity or json_event.message.event.process.executable.signature.signed.identity}}'
          deepvisibility.process.counters.cross_process_dup_thread_handle: '{{json_event.message.process.counters.crossProcessDupThreadHandle or json_event.message.event.process.counters.crossProcessDupThreadHandle}}'
          deepvisibility.process.counters.cross_process_dup_process_handle: '{{json_event.message.process.counters.crossProcessDupProcessHandle or json_event.message.event.process.counters.crossProcessDupProcessHandle}}'
      - set:
          process.start: '{{convert_process_start.start_date}}'
        filter: '{{ convert_process_start != null }}'
      - set:
          process.name: '{{(json_event.message.process.executable.path | basename) or (json_event.message.event.process.executable.path | basename) }}'

  set_ip_fields:
    actions:
      - set:
          source.ip: '{{json_event.message.sourceAddress.address or json_event.message.event.sourceAddress.address}}'
          source.port: '{{json_event.message.sourceAddress.port or json_event.message.event.sourceAddress.port}}'
          source.address: '{{json_event.message.sourceAddress.address or json_event.message.event.sourceAddress.address}}'
        filter: '{{ json_event.message.get("sourceAddress") != None or json_event.message.event.get("sourceAddress") != None }}'
      - set:
          destination.ip: '{{json_event.message.destinationAddress.address or json_event.message.event.destinationAddress.address}}'
          destination.port: '{{json_event.message.destinationAddress.port or json_event.message.event.destinationAddress.port}}'
          destination.address: '{{json_event.message.destinationAddress.address or json_event.message.event.destinationAddress.address}}'
        filter: '{{ json_event.message.get("destinationAddress") != None or json_event.message.event.get("destinationAddress") != None }}'
      - set:
          network.direction: inbound
        filter: '{{ json_event.message.direction == "INCOMING" or json_event.message.event.direction == "INCOMING" }}'
      - set:
          network.direction: outbound
        filter: '{{ json_event.message.direction == "OUTGOING" or json_event.message.event.direction == "OUTGOING" }}'

  set_source_parent_fields:
    actions:
      - set:
          process.parent.pid: '{{json_event.message.source.parent.fullPid.pid or json_event.message.event.source.parent.fullPid.pid}}'
          process.parent.title: '{{(json_event.message.source.parent.name | trim) or (json_event.message.event.source.parent.name | trim)}}'
          process.parent.hash.md5: '{{json_event.message.source.parent.executable.hashes.md5 or json_event.message.event.source.parent.executable.hashes.md5}}'
          process.parent.hash.sha1: '{{json_event.message.source.parent.executable.hashes.sha1 or json_event.message.event.source.parent.executable.hashes.sha1}}'
          process.parent.hash.sha256: '{{json_event.message.source.parent.executable.hashes.sha256 or json_event.message.event.source.parent.executable.hashes.sha256}}'
          process.parent.command_line: '{{json_event.message.source.parent.commandLine or json_event.message.event.source.parent.commandLine}}'
          deepvisibility.process.parent.root: '{{json_event.message.source.parent.root or json_event.message.event.source.parent.root}}'
          deepvisibility.process.parent.family: '{{json_event.message.source.parent.subsystem or json_event.message.event.source.parent.subsystem}}'
          deepvisibility.process.parent.excluded: '{{json_event.message.source.parent.excluded or json_event.message.event.source.parent.excluded}}'
          deepvisibility.process.parent.is_wow64: '{{json_event.message.source.parent.isWow64 or json_event.message.event.source.parent.isWow64}}'
          deepvisibility.process.parent.node.key: '{{json_event.message.source.parent.node.key.value or json_event.message.event.source.parent.node.key.value}}'
          deepvisibility.process.parent.user.sid: '{{json_event.message.source.parent.user.sid or json_event.message.event.source.parent.user.sid}}'
          deepvisibility.process.parent.session_id: '{{json_event.message.source.parent.sessionId or json_event.message.event.source.parent.sessionId}}'
          deepvisibility.process.parent.interactive: '{{json_event.message.source.parent.interactive or json_event.message.event.source.parent.interactive}}'
          deepvisibility.process.parent.executable.name: '{{json_event.message.source.parent.executable.path or json_event.message.event.source.parent.executable.path}}'
          deepvisibility.process.parent.integrity_level: '{{json_event.message.source.parent.integrityLevel or json_event.message.event.source.parent.integrityLevel}}'
          deepvisibility.process.parent.parent.node.key: '{{json_event.message.source.parent.parent.node.key.value or json_event.message.event.source.parent.parent.node.key.value}}'
          deepvisibility.process.parent.executable.start: '{{json_event.message.source.parent.executable.creationTime.millisecondsSinceEpoch or json_event.message.event.source.parent.executable.creationTime.millisecondsSinceEpoch}}'
          deepvisibility.process.parent.true_context.key: '{{json_event.message.source.parent.trueContext.key.value or json_event.message.event.source.parent.trueContext.key.value}}'
          deepvisibility.process.parent.executable.is_dir: '{{json_event.message.source.parent.executable.isDir or json_event.message.event.source.parent.executable.isDir}}'
          deepvisibility.process.parent.executable.node.key: '{{json_event.message.source.parent.executable.node.key.value or json_event.message.event.source.parent.executable.node.key.value}}'
          deepvisibility.process.parent.counters.dns_lookups: '{{json_event.message.source.parent.counters.dnsLookups or json_event.message.event.source.parent.counters.dnsLookups}}'
          deepvisibility.process.parent.counters.module_load: '{{json_event.message.source.parent.counters.moduleLoad or json_event.message.event.source.parent.counters.moduleLoad}}'
          deepvisibility.process.parent.counters.net_conn_out: '{{json_event.message.source.parent.counters.netConnOut or json_event.message.event.source.parent.counters.netConnOut}}'
          deepvisibility.process.parent.executable.size_bytes: '{{json_event.message.source.parent.executable.sizeBytes or json_event.message.event.source.parent.executable.sizeBytes}}'
          deepvisibility.process.parent.counters.cross_process: '{{json_event.message.source.parent.counters.crossProcess or json_event.message.event.source.parent.counters.crossProcess}}'
          deepvisibility.process.parent.counters.file_creation: '{{json_event.message.source.parent.counters.fileCreation or json_event.message.event.source.parent.counters.fileCreation}}'
          deepvisibility.process.parent.counters.file_deletion: '{{json_event.message.source.parent.counters.fileDeletion or json_event.message.event.source.parent.counters.fileDeletion}}'
          deepvisibility.process.parent.counters.os_child_process: '{{json_event.message.source.parent.counters.osChildProcess or json_event.message.event.source.parent.counters.osChildProcess}}'
          deepvisibility.process.parent.counters.file_modification: '{{json_event.message.source.parent.counters.fileModification or json_event.message.event.source.parent.counters.fileModification}}'
          deepvisibility.process.parent.counters.model_child_process: '{{json_event.message.source.parent.counters.modelChildProcess or json_event.message.event.source.parent.counters.modelChildProcess}}'
          deepvisibility.process.parent.counters.registry_modification: '{{json_event.message.source.parent.counters.registryModification or json_event.message.event.source.parent.counters.registryModification}}'
          deepvisibility.process.parent.is_redirected_command_processor: '{{json_event.message.source.parent.isRedirectedCommandProcessor or json_event.message.event.source.parent.isRedirectedCommandProcessor}}'
          deepvisibility.process.parent.executable.signature.signed.identity: '{{json_event.message.source.parent.executable.signature.signed.identity or json_event.message.event.source.parent.executable.signature.signed.identity}}'
          deepvisibility.process.parent.counters.cross_process_dup_thread_handle: '{{json_event.message.source.parent.counters.crossProcessDupThreadHandle or json_event.message.event.source.parent.counters.crossProcessDupThreadHandle}}'
          deepvisibility.process.parent.counters.cross_process_dup_process_handle: '{{json_event.message.source.parent.counters.crossProcessDupProcessHandle or json_event.message.event.source.parent.counters.crossProcessDupProcessHandle}}'
      - set:
          process.parent.name: '{{(json_event.message.source.parent.executable.path.split("\\")| last | lower) or (json_event.message.event.source.parent.executable.path.split("\\")| last | lower)}}'
          process.parent.working_directory: '{{(json_event.message.source.parent.executable.path.split("\\")[0:-1] | join("\\")) or (json_event.message.event.source.parent.executable.path.split("\\")[0:-1] | join("\\")) }}'
        filter: '{{(json_event.message.source.parent.get("executable") != None and json_event.message.source.parent.executable.get("path") != None) or (json_event.message.event.source.parent.get("executable") != None and json_event.message.event.source.parent.executable.get("path") != None)}}'
  
  set_parent_fields:
    actions:
      - set:
          process.parent.pid: '{{json_event.message.parent.fullPid.pid or json_event.message.event.parent.fullPid.pid}}'
          process.parent.title: '{{(json_event.message.parent.name | trim) or (json_event.message.event.parent.name | trim)}}'
          process.parent.hash.md5: '{{json_event.message.parent.executable.hashes.md5 or json_event.message.event.parent.executable.hashes.md5}}'
          process.parent.hash.sha1: '{{json_event.message.parent.executable.hashes.sha1 or json_event.message.event.parent.executable.hashes.sha1}}'
          process.parent.executable: '{{json_event.message.parent.executable.path or json_event.message.event.parent.executable.path}}'
          process.parent.hash.sha256: '{{json_event.message.parent.executable.hashes.sha256 or json_event.message.event.parent.executable.hashes.sha256}}'
          process.parent.command_line: '{{json_event.message.parent.commandLine or json_event.message.event.parent.commandLine}}'
          deepvisibility.process.parent.root: '{{json_event.message.parent.root or json_event.message.event.parent.root}}'
          deepvisibility.process.parent.family: '{{json_event.message.parent.subsystem or json_event.message.event.parent.subsystem}}'
          deepvisibility.process.parent.excluded: '{{json_event.message.parent.excluded or json_event.message.event.parent.excluded}}'
          deepvisibility.process.parent.is_wow64: '{{json_event.message.parent.isWow64 or json_event.message.event.parent.isWow64}}'
          deepvisibility.process.parent.node.key: '{{json_event.message.parent.node.key.value or json_event.message.event.parent.node.key.value}}'
          deepvisibility.process.parent.user.sid: '{{json_event.message.parent.user.sid or json_event.message.event.parent.user.sid}}'
          deepvisibility.process.parent.session_id: '{{json_event.message.parent.sessionId or json_event.message.event.parent.sessionId}}'
          deepvisibility.process.parent.interactive: '{{json_event.message.parent.interactive or json_event.message.event.parent.interactive}}'
          deepvisibility.process.parent.executable.name: '{{json_event.message.parent.executable.path or json_event.message.event.parent.executable.path}}'
          deepvisibility.process.parent.integrity_level: '{{json_event.message.parent.integrityLevel or json_event.message.event.parent.integrityLevel}}'
          deepvisibility.process.parent.parent.node.key: '{{json_event.message.parent.parent.node.key.value or json_event.message.event.parent.parent.node.key.value}}'
          deepvisibility.process.parent.executable.start: '{{json_event.message.parent.executable.creationTime.millisecondsSinceEpoch or json_event.message.event.parent.executable.creationTime.millisecondsSinceEpoch}}'
          deepvisibility.process.parent.true_context.key: '{{json_event.message.parent.trueContext.key.value or json_event.message.event.parent.trueContext.key.value}}'
          deepvisibility.process.parent.executable.is_dir: '{{json_event.message.parent.executable.isDir or json_event.message.event.parent.executable.isDir}}'
          deepvisibility.process.parent.executable.node.key: '{{json_event.message.parent.executable.node.key.value or json_event.message.event.parent.executable.node.key.value}}'
          deepvisibility.process.parent.counters.dns_lookups: '{{json_event.message.parent.counters.dnsLookups or json_event.message.event.parent.counters.dnsLookups}}'
          deepvisibility.process.parent.counters.module_load: '{{json_event.message.parent.counters.moduleLoad or json_event.message.event.parent.counters.moduleLoad}}'
          deepvisibility.process.parent.counters.net_conn_out: '{{json_event.message.parent.counters.netConnOut or json_event.message.event.parent.counters.netConnOut}}'
          deepvisibility.process.parent.executable.size_bytes: '{{json_event.message.parent.executable.sizeBytes or json_event.message.event.parent.executable.sizeBytes}}'
          deepvisibility.process.parent.counters.cross_process: '{{json_event.message.parent.counters.crossProcess or json_event.message.event.parent.counters.crossProcess}}'
          deepvisibility.process.parent.counters.file_creation: '{{json_event.message.parent.counters.fileCreation or json_event.message.event.parent.counters.fileCreation}}'
          deepvisibility.process.parent.counters.file_deletion: '{{json_event.message.parent.counters.fileDeletion or json_event.message.event.parent.counters.fileDeletion}}'
          deepvisibility.process.parent.counters.os_child_process: '{{json_event.message.parent.counters.osChildProcess or json_event.message.event.parent.counters.osChildProcess}}'
          deepvisibility.process.parent.counters.file_modification: '{{json_event.message.parent.counters.fileModification or json_event.message.event.parent.counters.fileModification}}'
          deepvisibility.process.parent.counters.model_child_process: '{{json_event.message.parent.counters.modelChildProcess or json_event.message.event.parent.counters.modelChildProcess}}'
          deepvisibility.process.parent.counters.registry_modification: '{{json_event.message.parent.counters.registryModification or json_event.message.event.parent.counters.registryModification}}'
          deepvisibility.process.parent.is_redirected_command_processor: '{{json_event.message.parent.isRedirectedCommandProcessor or json_event.message.event.parent.isRedirectedCommandProcessor}}'
          deepvisibility.process.parent.executable.signature.signed.identity: '{{json_event.message.parent.executable.signature.signed.identity or json_event.message.event.parent.executable.signature.signed.identity}}'
          deepvisibility.process.parent.counters.cross_process_dup_thread_handle: '{{json_event.message.parent.counters.crossProcessDupThreadHandle or json_event.message.event.parent.counters.crossProcessDupThreadHandle}}'
          deepvisibility.process.parent.counters.cross_process_dup_process_handle: '{{json_event.message.parent.counters.crossProcessDupProcessHandle or json_event.message.event.parent.counters.crossProcessDupProcessHandle}}'
      - set:
          process.parent.start: '{{convert_parent_process_start.start_date}}'
        filter: '{{ convert_parent_process_start != null }}'
      - set:
          process.parent.name: '{{(json_event.message.parent.executable.path.split("\\") | last | lower) or (json_event.message.event.parent.executable.path.split("\\") | last | lower)}}'
          process.parent.working_directory: '{{(json_event.message.parent.executable.path.split("\\")[0:-1] | join("\\")) or (json_event.message.event.parent.executable.path.split("\\")[0:-1] | join("\\")) }}'
        filter: '{{(json_event.message.parent.get("executable") != None and json_event.message.parent.executable.get("path") != None) or (json_event.message.event.parent.get("executable") != None and json_event.message.event.parent.executable.get("path") != None)}}'

  set_target_fields:
    actions:
      - set:
          deepvisibility.process.target.pid: '{{json_event.message.target.fullPid.pid or json_event.message.event.target.fullPid.pid}}'
          deepvisibility.process.target.name: '{{json_event.message.target.name or json_event.message.event.target.name}}'
          deepvisibility.process.target.root: '{{json_event.message.target.root or json_event.message.event.target.root}}'
          deepvisibility.process.target.family: '{{json_event.message.target.subsystem or json_event.message.event.target.subsystem}}'
          deepvisibility.process.target.excluded: '{{json_event.message.target.excluded or json_event.message.event.target.excluded}}'
          deepvisibility.process.target.hash.md5: '{{json_event.message.target.executable.hashes.md5 or json_event.message.event.target.executable.hashes.md5}}'
          deepvisibility.process.target.is_wow64: '{{json_event.message.target.isWow64 or json_event.message.event.target.isWow64}}'
          deepvisibility.process.target.node.key: '{{json_event.message.target.node.key.value or json_event.message.event.target.node.key.value}}'
          deepvisibility.process.target.user.sid: '{{json_event.message.target.user.sid or json_event.message.event.target.user.sid}}'
          deepvisibility.process.target.hash.sha1: '{{json_event.message.target.executable.hashes.sha1 or json_event.message.event.target.executable.hashes.sha1}}'
          deepvisibility.process.target.executable: '{{json_event.message.process.executable.path or json_event.message.event.process.executable.path}}'
          deepvisibility.process.target.session_id: '{{json_event.message.target.sessionId or json_event.message.event.target.sessionId}}'
          deepvisibility.process.target.hash.sha256: '{{json_event.message.target.executable.hashes.sha256 or json_event.message.event.target.executable.hashes.sha256}}'
          deepvisibility.process.target.interactive: '{{json_event.message.target.interactive or json_event.message.event.target.interactive}}'
          deepvisibility.process.target.command_line: '{{json_event.message.target.commandLine or json_event.message.event.target.commandLine}}'
          deepvisibility.process.target.executable.name: '{{json_event.message.target.executable.path or json_event.message.event.target.executable.path}}'
          deepvisibility.process.target.integrity_level: '{{json_event.message.target.integrityLevel or json_event.message.event.target.integrityLevel}}'
          deepvisibility.process.target.parent.node.key: '{{json_event.message.target.parent.node.key.value or json_event.message.event.target.parent.node.key.value}}'
          deepvisibility.process.target.executable.start: '{{json_event.message.target.executable.creationTime.millisecondsSinceEpoch or json_event.message.event.target.executable.creationTime.millisecondsSinceEpoch}}'
          deepvisibility.process.target.true_context.key: '{{json_event.message.target.trueContext.key.value or json_event.message.event.target.trueContext.key.value}}'
          deepvisibility.process.target.executable.is_dir: '{{json_event.message.target.executable.isDir or json_event.message.event.target.executable.isDir}}'
          deepvisibility.process.target.working_directory: '{{(json_event.message.target.executable.path.split("\\")[0:-1] | join("\\")) or (json_event.message.event.target.executable.path.split("\\")[0:-1] | join("\\")) }}'
          deepvisibility.process.target.executable.node.key: '{{json_event.message.target.executable.node.key.value or json_event.message.event.target.executable.node.key.value}}'
          deepvisibility.process.target.counters.dns_lookups: '{{json_event.message.target.counters.dnsLookups or json_event.message.event.target.counters.dnsLookups}}'
          deepvisibility.process.target.counters.module_load: '{{json_event.message.target.counters.moduleLoad or json_event.message.event.target.counters.moduleLoad}}'
          deepvisibility.process.target.counters.net_conn_out: '{{json_event.message.target.counters.netConnOut or json_event.message.event.target.counters.netConnOut}}'
          deepvisibility.process.target.executable.size_bytes: '{{json_event.message.target.executable.sizeBytes or json_event.message.event.target.executable.sizeBytes}}'
          deepvisibility.process.target.counters.cross_process: '{{json_event.message.target.counters.crossProcess or json_event.message.event.target.counters.crossProcess}}'
          deepvisibility.process.target.counters.file_creation: '{{json_event.message.target.counters.fileCreation or json_event.message.event.target.counters.fileCreation}}'
          deepvisibility.process.target.counters.file_deletion: '{{json_event.message.target.counters.fileDeletion or json_event.message.event.target.counters.fileDeletion}}'
          deepvisibility.process.target.counters.os_child_process: '{{json_event.message.target.counters.osChildProcess or json_event.message.event.target.counters.osChildProcess}}'
          deepvisibility.process.target.counters.file_modification: '{{json_event.message.target.counters.fileModification or json_event.message.event.target.counters.fileModification}}'
          deepvisibility.process.target.counters.model_child_process: '{{json_event.message.target.counters.modelChildProcess or json_event.message.event.target.counters.modelChildProcess}}'
          deepvisibility.process.target.counters.registry_modification: '{{json_event.message.target.counters.registryModification or json_event.message.event.target.counters.registryModification}}'
          deepvisibility.process.target.is_redirected_command_processor: '{{json_event.message.target.isRedirectedCommandProcessor or json_event.message.event.target.isRedirectedCommandProcessor}}'
          deepvisibility.process.target.executable.signature.signed.identity: '{{json_event.message.target.executable.signature.signed.identity or json_event.message.event.target.executable.signature.signed.identity}}'
          deepvisibility.process.target.counters.cross_process_dup_thread_handle: '{{json_event.message.target.counters.crossProcessDupThreadHandle or json_event.message.event.target.counters.crossProcessDupThreadHandle}}'
          deepvisibility.process.target.counters.cross_process_dup_process_handle: '{{json_event.message.target.counters.crossProcessDupProcessHandle or json_event.message.event.target.counters.crossProcessDupProcessHandle}}'
      - set:
          deepvisibility.process.target.start: '{{convert_target_process_start.start_date}}'
        filter: '{{ convert_target_process_start != null }}'
  
  set_dns_fields:
    actions:
      - set:
          dns.question.name: '{{json_event.message.query or json_event.message.event.query}}'
          deepvisibility.dns.answers.results: '{{json_event.message.results or json_event.message.event.results}}'
  
  set_module_load_fields:
    actions:
      - set:
          dll.name: '{{find_dll_name.file.name}}'
          dll.path: '{{json_event.message.path or json_event.message.event.path}}'

  set_process_signature:
    actions:
      - set:
          process.code_signature.exists: 'True'
          process.code_signature.subject_name: '{{json_event.message.signature.signed.identity or json_event.message.event.signature.signed.identity}}'
        filter: '{{ json_event.message.signature.get("signed") != None or json_event.message.event.signature.get("signed") != None }}'
      - set:
          process.code_signature.valid: 'True'
        filter: '{{ (json_event.message.signature.get("signed") != None and json_event.message.signature.signed.get("valid") != None) or (json_event.message.event.signature.get("signed") != None and json_event.message.event.signature.signed.get("valid") != None) }}'
      - set:
          process.code_signature.valid: 'False'
        filter: '{{ (json_event.message.signature.get("signed") != None and json_event.message.signature.signed.get("invalid") != None) or (json_event.message.event.signature.get("signed") != None and json_event.message.event.signature.signed.get("invalid") != None) }}'

  set_file_signature:
    actions:
      - set:
          file.code_signature.exists: 'True'
          file.code_signature.subject_name: '{{json_event.message.signature.signed.identity or json_event.message.event.signature.signed.identity}}'
        filter: '{{ json_event.message.signature.get("signed") != None or json_event.message.event.signature.get("signed") != None }}'
      - set:
          file.code_signature.valid: 'True'
        filter: '{{ json_event.message.signature.signed.get("valid") != None or json_event.message.event.signature.signed.get("valid") != None }}'
      - set:
          file.code_signature.valid: 'False'
        filter: '{{ json_event.message.signature.signed.get("invalid") != None or json_event.message.event.signature.signed.get("invalid") != None }}'

  set_file_fields:
    actions:
      - set:
          file.uid: '{{ json_event.message.file.owner.sid or json_event.message.event.file.owner.sid }}'
          file.path: '{{ json_event.message.file.path or json_event.message.event.file.path }}'
          file.size: '{{ json_event.message.file.sizeBytes or json_event.message.event.file.sizeBytes }}'
          file.owner: '{{ json_event.message.file.owner.name or json_event.message.event.file.owner.name }}'
          file.hash.md5: '{{ json_event.message.file.hashes.md5 or json_event.message.event.file.hashes.md5 }}'
          file.hash.sha1: '{{ json_event.message.file.hashes.sha1 or json_event.message.event.file.hashes.sha1 }}'
          file.hash.sha256: '{{ json_event.message.file.hashes.sha256 or json_event.message.event.file.hashes.sha256 }}'
          deepvisibility.file.location: '{{ json_event.message.file.fileLocation or json_event.message.event.file.fileLocation }}'
      - set:
          file.type: dir
        filter: '{{ json_event.message.file.isDir != "E_FALSE" or json_event.message.event.file.isDir != "E_FALSE"  }}'
      - set:
          file.name: '{{(json_event.message.file.path.split("\\") | last) or (json_event.message.event.file.path.split("\\") | last) }}'
          file.extension: '{{(json_event.message.file.path.split(".")|last) or (json_event.message.event.file.path.split(".")|last)}}'
        filter: '{{(json_event.message.get("file") != None and json_event.message.file.isDir == "E_FALSE") or (json_event.message.event.get("file") != None and json_event.message.event.file.isDir == "E_FALSE")}}'
      - set:
          file.created: '{{convert_file_creation_time.start_date}}'
        filter: '{{ convert_file_creation_time != null }}'
  
  set_kernel_fields:
    actions:
      - set:
          deepvisibility.file.is_kernel_module: 'True'
        filter: '{{ json_event.message.isKernelModule != "E_FALSE" or json_event.message.event.isKernelModule != "E_FALSE"  }}'
      - set:
          deepvisibility.file.is_kernel_module: 'False'
        filter: '{{ json_event.message.isKernelModule == "E_FALSE" or json_event.message.event.isKernelModule == "E_FALSE"  }}'

  set_target_file_fields:
    actions:
      - set:
          file.uid: '{{json_event.message.targetFile.owner.sid or json_event.message.event.targetFile.owner.sid}}'
          file.path: '{{json_event.message.targetFile.path or json_event.message.event.targetFile.path}}'
          file.size: '{{json_event.message.targetFile.sizeBytes or json_event.message.event.targetFile.sizeBytes}}'
          file.owner: '{{json_event.message.targetFile.owner.name or json_event.message.event.targetFile.owner.name}}'
          deepvisibility.file.location: '{{json_event.message.targetFile.fileLocation or json_event.message.event.targetFile.fileLocation}}'
          deepvisibility.file.node.key: '{{json_event.message.targetFile.node.key.value or json_event.message.event.targetFile.node.key.value}}'
      - set:
          file.type: dir
        filter: '{{(json_event.message.targetFile.get("isDir") != None and json_event.message.targetFile.isDir != "E_FALSE") or (json_event.message.event.targetFile.get("isDir") != None and json_event.message.event.targetFile.isDir != "E_FALSE")}}'
      - set:
          file.type: file
        filter: '{{json_event.message.targetFile.isDir == "E_FALSE" or json_event.message.event.targetFile.isDir == "E_FALSE"}}'
      - set:
          file.name: '{{(json_event.message.targetFile.path.split("\\") | last) or (json_event.message.event.targetFile.path.split("\\") | last) }}'
          file.extension: '{{(json_event.message.targetFile.path.split(".")|last) or (json_event.message.event.targetFile.path.split(".")|last)}}'
        filter: '{{(json_event.message.get("targetFile") != None and json_event.message.targetFile.isDir == "E_FALSE") or (json_event.message.event.get("targetFile") != None and json_event.message.event.targetFile.isDir == "E_FALSE")}}'
      - set:
          file.created: '{{convert_target_file_creation_time.start_date}}'
        filter: '{{convert_target_file_creation_time != null }}'

  set_reg_value_fields:
    actions:
      - set:
          registry.path: '{{ json_event.message.regValue.path or json_event.message.event.regValue.path }}'
          registry.value: '{{ find_reg_value_key_name.key.name }}'
          deepvisibility.registry.value_type: '{{(json_event.message.valueType | string()) or (json_event.message.event.valueType | string()) }}'
          deepvisibility.registry.new.value_type: '{{(json_event.message.newValueType | string()) or (json_event.message.event.newValueType | string()) }}'
          deepvisibility.registry.old.value_type: '{{(json_event.message.oldValueType | string()) or (json_event.message.event.oldValueType | string()) }}'
      - fallback: ''
        dictionary:
          '0': REG_NONE
          '1': REG_SZ
          '2': REG_EXPAND_SZ
          '3': REG_BINARY
          '4': REG_DWORD
          '5': REG_DWORD_BIG_ENDIAN
          '6': REG_LINK
          '7': REG_MULTI_SZ
          '8': REG_RESOURCE_LIST
          '9': REG_QWORD
        mapping:
          deepvisibility.registry.value_type: registry.data.type
          deepvisibility.registry.new.value_type: registry.data.type
          deepvisibility.registry.old.value_type: deepvisibility.registry.old.data.type
        name: translate
      - set:
          registry.data.bytes: '{{ json_event.message.newValueData or json_event.message.event.newValueData }}'
        filter: '{{ (json_event.message.get("newValueData") != None and json_event.message.newValueType in [0, 3]) or (json_event.message.event.get("newValueData") != None and json_event.message.event.newValueType in [0, 3]) }}'
      - set:
          registry.data.strings:
            - '{{ (json_event.message.newValueData | string()) or (json_event.message.event.newValueData | string()) }}'
        filter: '{{ (json_event.message.get("newValueData") != None and json_event.message.newValueType not in [0, 3]) or (json_event.message.event.get("newValueData") != None and json_event.message.event.newValueType not in [0, 3]) }}'
      - set:
          deepvisibility.registry.old.data.bytes: '{{ json_event.message.oldValueData or json_event.message.event.oldValueData }}'
        filter: '{{ (json_event.message.get("oldValueData") != None and json_event.message.oldValueType in [0, 3]) or (json_event.message.event.get("oldValueData") != None and json_event.message.event.oldValueType in [0, 3]) }}'
      - set:
          deepvisibility.registry.old.data.strings: ['{{ (json_event.message.oldValueData | string()) or (json_event.message.event.oldValueData | string()) }}']
        filter: '{{ (json_event.message.get("oldValueData") != None and json_event.message.oldValueType not in [0, 3]) or (json_event.message.event.get("oldValueData") != None and json_event.message.event.oldValueType not in [0, 3]) }}'

  set_reg_key_fields:
    actions:
      - set:
          registry.path: '{{ json_event.message.regKey.path or json_event.message.event.regKey.path }}'
          registry.value: '{{ find_reg_key_name.key.name }}'
          deepvisibility.registry.export_path: '{{ json_event.message.exportPath or json_event.message.event.exportPath }}'
          deepvisibility.registry.import_path: '{{ json_event.message.importPath or json_event.message.event.importPath }}'
          deepvisibility.registry.old.key_name: '{{ json_event.message.oldKeyName or json_event.message.event.oldKeyName}}'
          deepvisibility.registry.security_information: '{{json_event.message.securityInformation or json_event.message.event.securityInformation}}'
      - set:
          user.id: '{{json_event.message.owner.user.sid or json_event.message.event.owner.user.sid}}'
          user.name: '{{json_event.message.owner.user.name or json_event.message.event.owner.user.name}}'
        filter: '{{ json_event.message.get("owner") != None or json_event.message.event.get("owner") != None }}'

  set_script_fields:
    actions:
      - set:
          file.size: '{{ json_event.message.originalSize or json_event.message.event.originalSize }}'
          deepvisibility.script.app_name: '{{ json_event.message.appName or json_event.message.event.appName }}'
      - set:
          file.hash.md5: '{{ json_event.message.hashes.md5 or json_event.message.event.hashes.md5 }}'
          file.hash.sha1: '{{ json_event.message.hashes.sha1 or json_event.message.event.hashes.sha1 }}'
          file.hash.sha256: '{{ json_event.message.hashes.sha256 or json_event.message.event.hashes.sha256 }}'
        filter: '{{ json_event.message.get("contentHash") != None or json_event.message.event.get("contentHash") != None}}'

  set_http_fields:
    actions:
      - set:
          url.original: '{{ json_event.message.url or json_event.message.event.url }}'
          http.request.method: '{{ json_event.message.method or json_event.message.event.method }}'

  set_indicator_fields:
    actions:
      - set:
          deepvisibility.indicator.id: '{{ json_event.message.indicator or json_event.message.event.indicator }}'
          deepvisibility.indicator.name: '{{ json_event.message.friendlyName or json_event.message.event.friendlyName }}'
          deepvisibility.indicator.tactics: '{{ json_event.message.tactics or json_event.message.event.tactics }}'
          deepvisibility.indicator.category: '{{ json_event.message.category or json_event.message.event.category }}'
          deepvisibility.indicator.metadata: '{{ json_event.message.metadata or json_event.message.event.metadata }}'
          deepvisibility.indicator.description: '{{ json_event.message.description or json_event.message.event.description }}'
          deepvisibility.indicator.classification: '{{ json_event.message.classification or json_event.message.event.classification }}'
          deepvisibility.indicator.long_description: '{{ json_event.message.long_description or json_event.message.event.long_description }}'


# TODO when ingest will be abble to manage lists, parse dns.answers.results with grok patern as follows :
# example from intake-formats/SentinelOne/deep_visibility/tests/event_dns.json
#
#  {
#   "dns": {
#     "answers": [
#       {
#         "name": "googlehosted.l.googleusercontent.com",
#         "type": "CNAME",
#         "data": "142.250.179.65"
#       }
#     ]
#   }
# }
