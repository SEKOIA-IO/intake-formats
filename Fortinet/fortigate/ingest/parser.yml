name: fortigate
pipeline:
  - name: parsed_event
    external:
      name: cef.parse-cef
    filter: '{{original.message.startswith("CEF")}}'

  - name: parsed_event
    external:
      name: kv.parse-kv
      properties:
        value_sep: '='
        item_sep: ','
    filter: "{{original.message | re_match('^\\s*\\w+=[^,]+(?:,\\w+=.*)\\s*$')}}"

  - name: parsed_event
    external:
      name: kv.parse-kv
      properties:
        value_sep: '='
        item_sep: \s
    filter: "{{original.message | re_match('^\\s*\\w+=[^\\s]+(?:\\s\\w+=.*)\\s*$')}}"

  - name: parsed_date
    filter: '{{parsed_event.message.get("FTNTFGTeventtime") != None}}'
    external:
      name: date.parse
      properties:
        input_field: '{{parsed_event.message.FTNTFGTeventtime}}'
        output_field: date
        timezone: '{{parsed_event.message.FTNTFGTtz}}'

  - name: parsed_date
    filter: '{{parsed_event.message.get("FortinetFortiGateeventtime") != None}}'
    external:
      name: date.parse
      properties:
        input_field: '{{parsed_event.message.FortinetFortiGateeventtime}}'
        output_field: date
        timezone: '{{parsed_event.message.FortinetFortiGatetz}}'

  - name: parsed_date
    filter: '{{parsed_event.message.get("eventtime") != None}}'
    external:
      name: date.parse
      properties:
        input_field: '{{parsed_event.message.eventtime }}'
        output_field: date
        timezone: '{{parsed_event.message.tz}}'

  - name: parsed_date
    filter: '{{parsed_event.message.get("timestamp") != None}}'
    external:
      name: date.parse
      properties:
        input_field: '{{parsed_event.message.timestamp }}'
        output_field: date
        timezone: '{{parsed_event.message.tz}}'

  - name: field_extraction

stages:
  field_extraction:
    actions:
      - set:
          '@timestamp': "{{parsed_date.date}}"
          action.name: "{{parsed_event.message.name or parsed_event.message.FTNTFGTaction or parsed_event.message.FortinetFortiGateaction or parsed_event.message.act or parsed_event.message.action}}"
          action.outcome: "{{parsed_event.message.status or 'success'}}"
          action.type: "{{parsed_event.message.subtype or parsed_event.message.FTNTFGTsubtype or parsed_event.message.FortinetFortiGatesubtype}}"
          destination.address: "{{parsed_event.message.dstip or parsed_event.message.dst}}"
          destination.bytes: "{{parsed_event.message.rcvdbyte or parsed_event.message.out}}"
          destination.domain: "{{parsed_event.message.hostname}}"
          destination.ip: "{{parsed_event.message.dstip or parsed_event.message.dst}}"
          destination.mac: "{{parsed_event.message.dstmac}}"
          destination.nat.ip: "{{parsed_event.message.tranip or parsed_event.message.destinationTranslatedAddress}}"
          destination.nat.port: "{{parsed_event.message.destinationTranslatedPort}}"
          destination.packets: "{{parsed_event.message.rcvdpkt or parsed_event.message.FTNTFGTrcvpkt or parsed_event.message.FortinetFortiGatercvdpkt or parsed_event.message.get('Packets Received')}}"
          destination.port: "{{parsed_event.message.dstport or parsed_event.message.dpt}}"
          dns.question.name: "{{parsed_event.message.qname or parsed_event.message.FTNFGTqname or parsed_event.message.FortinetFortiGateqname}}"
          dns.question.type: "{{parsed_event.message.qtype or parsed_event.message.FTNFGTqtype or parsed_event.message.FortinetFortiGateqtype}}"
          event.action: "{{parsed_event.message.reason}}"
          fortinet.event.type: "{{parsed_event.message.type}}"
          event.code: "{{parsed_event.message.logid or parsed_event.message.FTNTFGTlogid or parsed_event.message.FortinetFortiGatelogid}}"
          event.reason: "{{parsed_event.message.msg}}"
          event.severity: "{{parsed_event.message.Severity}}"
          event.timezone: "{{parsed_event.message.FortinetFortiGatetz or parsed_event.message.tz or parsed_event.message.FTNTFGTtz }}"
          file.name: "{{parsed_event.message.fname}}"
          fortinet.apprisk: "{{parsed_event.message.apprisk}}"
          fortinet.event.desc: "{{parsed_event.message.desc}}"
          http.request.method: "{{parsed_event.message.method}}"
          log.level: "{{parsed_event.message.level or parsed_event.message.FTNTFGTlevel or parsed_event.message.FortinetFortiGatelevel}}"
          network.application: "{{parsed_event.message.app}}"
          network.protocol: "{{parsed_event.message.service}}"
          network.transport: "{{parsed_event.message.proto}}"
          observer.egress.interface.name: "{{parsed_event.message.dstintf}}"
          observer.ingress.interface.name: "{{parsed_event.message.srcintf}}"
          observer.type: "{{parsed_event.message.DeviceProduct}}"
          observer.vendor: "{{parsed_event.message.DeviceVendor}}"
          observer.version: "{{parsed_event.message.DeviceVersion}}"
          rule.category: "{{parsed_event.message.appcat or parsed_event.message.catdesc}}"
          rule.ruleset: "{{parsed_event.message.applist or parsed_event.message.policytype}}"
          source.address: "{{parsed_event.message.remip or parsed_event.message.srcip or parsed_event.message.src}}"
          source.bytes: "{{parsed_event.message.sentbyte or parsed_event.message.in}}"
          source.ip: "{{parsed_event.message.remip or parsed_event.message.srcip or parsed_event.message.src}}"
          source.mac: "{{parsed_event.message.srcmac}}"
          source.nat.ip: "{{parsed_event.message.tunnelip or parsed_event.message.sourceTranslatedAddress}}"
          source.nat.port: "{{parsed_event.message.sourceTranslatedPort}}"
          source.packets: "{{parsed_event.message.sentpkt or parsed_event.message.FTNTFGTsentpkt or parsed_event.message.FortinetFortiGatesentpkt or parsed_event.message.get('Packets Sent')}}"
          source.port: "{{parsed_event.message.srcport or parsed_event.message.spt}}"
          source.user.name: "{{parsed_event.message.user}}"
          icmp.request.type: "{{parsed_event.message.icmptype}}"
          icmp.request.code: "{{parsed_event.message.icmpcode}}"
          url.full: "{{parsed_event.message.url or parsed_event.message.request}}"
          url.original: "{{parsed_event.message.url or parsed_event.message.request}}"
          user_agent.original: "{{parsed_event.message.requestClientApplication}}"

      - translate:
        dictionary:
          0: "hopopt"
          1: "icmp"
          2: "igmp"
          3: "ggp"
          4: "ipv4"
          5: "st"
          6: "tcp"
          7: "cbt"
          8: "egp"
          9: "igp"
          10: "bbn-rcc-mon"
          11: "nvp-ii"
          12: "pup"
          13: "argus"
          14: "emcon"
          15: "xnet"
          16: "chaos"
          17: "udp"
          18: "mux"
          19: "dcn-meas"
          20: "hmp"
          21: "prm"
          22: "xns-idp"
          23: "trunk-1"
          24: "trunk-2"
          25: "leaf-1"
          26: "leaf-2"
          27: "rdp"
          28: "irtp"
          29: "iso-tp4"
          30: "netblt"
          31: "mfe-nsp"
          32: "merit-inp"
          33: "dccp"
          34: "3pc"
          35: "idpr"
          36: "xtp"
          37: "ddp"
          38: "idpr-cmtp"
          39: "tp++"
          40: "il"
          41: "ipv6"
          42: "sdrp"
          43: "ipv6-route"
          44: "ipv6-frag"
          45: "idrp"
          46: "rsvp"
          47: "gre"
          48: "dsr"
          49: "bna"
          50: "esp"
          51: "ah"
          52: "i-nlsp"
          53: "swipe"
          54: "narp"
          55: "mobile"
          56: "tlsp"
          57: "skip"
          58: "ipv6-icmp"
          59: "ipv6-nonxt"
          60: "ipv6-opts"
          61: "any host internal protocol"
          62: "cftp"
          63: "any local network"
          64: "sat-expak"
          65: "kryptolan"
          66: "rvd"
          67: "ippc"
          68: "any distributed file system"
          69: "sat-mon"
          70: "visa"
          71: "ipcv"
          72: "cpnx"
          73: "cphb"
          74: "wsn"
          75: "pvp"
          76: "br-sat-mon"
          77: "sun-nd"
          78: "wb-mon"
          79: "wb-expak"
          80: "iso-ip"
          81: "vmtp"
          82: "secure-vmtp"
          83: "vines"
          84: "ttp"
          85: "nsfnet-igp"
          86: "dgp"
          87: "tcf"
          88: "eigrp"
          89: "ospfigp"
          90: "sprite-rpc"
          91: "larp"
          92: "mtp"
          93: "ax.25"
          94: "ipip"
          95: "micp"
          96: "scc-sp"
          97: "etherip"
          98: "encap"
          99: "any private encryption scheme"
          100: "gmtp"
          101: "ifmp"
          102: "pnni"
          103: "pim"
          104: "aris"
          105: "scps"
          106: "qnx"
          107: "a/n"
          108: "ipcomp"
          109: "snp"
          110: "compaq-peer"
          111: "ipx-in-ip"
          112: "vrrp"
          113: "pgm"
          114: "any 0-hop protocol"
          115: "l2tp"
          116: "ddx"
          117: "iatp"
          118: "stp"
          119: "srp"
          120: "uti"
          121: "smp"
          122: "sm"
          123: "ptp"
          124: "isis over ipv4"
          125: "fire"
          126: "crtp"
          127: "crudp"
          128: "sscopmce"
          129: "iplt"
          130: "sps"
          131: "pipe"
          132: "sctp"
          133: "fc"
          134: "rsvp-e2e-ignore"
          135: "mobility header"
          136: "udplite"
          137: "mpls-in-ip"
          138: "manet"
          139: "hip"
          140: "shim6"
          141: "wesp"
          142: "rohc"
          253: "unassigned"
          254: "use for experimentation and testing"
          255: "reserved"
        mapping:
          parsed_event.message.proto: network.transport
