name: fortinet-fortigate
ignored_values: ["N/A", "undefined", "Reserved"]
pipeline:
  # If event is formatted as CEF
  - name: parsed_event
    external:
      name: cef.parse-cef
    filter: '{{original.message.startswith("CEF")}}'

  # Handle when the event is formatted as CEF, but doesn't hold the prefix
  - name: parsed_event
    external:
      name: cef.parse-cef
      properties:
        input_field: "CEF:{{original.message}}"
    filter: '{{original.message.startswith("0|Fortinet")}}'

  # If event is formatted as KV
  - name: parsed_event
    external:
      name: kv.parse-kv
      properties:
        value_sep: "="
        item_sep: ","
    filter: "{{original.message | re_match('^\\s*\\w+=[^,]+(?:,\\w+=.*)\\s*$')}}"

  # If event is formatted as standard
  - name: parsed_event
    external:
      name: kv.parse-kv
      properties:
        value_sep: "="
        item_sep: \s
    filter: "{{original.message | re_match('^\\s*\\w+=[^\\s]+(?:\\s\\w+=.*)\\s*$')}}"

  - name: parsed_date
    filter: '{{parsed_event.message.get("FTNTFGTeventtime") != None}}'
    external:
      name: date.parse
      properties:
        input_field: "{{parsed_event.message.FTNTFGTeventtime}}"
        output_field: date
        timezone: "UTC"

  - name: parsed_date
    filter: '{{parsed_event.message.get("FortinetFortiGateeventtime") != None}}'
    external:
      name: date.parse
      properties:
        input_field: "{{parsed_event.message.FortinetFortiGateeventtime}}"
        output_field: date
        timezone: "UTC"

  - name: parsed_date
    filter: '{{parsed_event.message.get("timestamp") != None}}'
    external:
      name: date.parse
      properties:
        input_field: "{{parsed_event.message.timestamp }}"
        output_field: date
        timezone: "{{parsed_event.message.tz}}"

  - name: parsed_date
    filter: '{{parsed_event.message.get("start") != None}}'
    external:
      name: date.parse
      properties:
        input_field: "{{parsed_event.message.start }}"
        output_field: date
        timezone: "{{parsed_event.message.tz}}"

  - name: parsed_date
    filter: '{{parsed_event.message.get("eventtime") != None}}'
    external:
      name: date.parse
      properties:
        input_field: "{{parsed_event.message.eventtime }}"
        output_field: date
        timezone: "UTC"

  - name: parsed_source_ip
    external:
      name: grok.match
      properties:
        input_field: "{{ parsed_event.message.ui }}"
        output_field: result
        pattern: "%{DATA}%{IP:source_ip}%{GREEDYDATA}"

  - name: field_extraction
  - name: set_event_dataset
  #  commented for backward compatibility
  #  - name: ecs_categorization_fields
  - name: backward_compatibility

stages:
  backward_compatibility:
    actions:
      - set:
          event.provider: "{{parsed_event.message.method}}"
          action.name: "{{final.event.action}}"
          event.type: "{{parsed_event.message.desc}}"
          action.type: "{{parsed_event.message.subtype or parsed_event.message.FTNTFGTsubtype or parsed_event.message.FortinetFortiGatesubtype}}"
          action.outcome: "{{parsed_event.message.status or parsed_event.message.outcome}}"
          action.properties.icmp_code: "{{parsed_event.message.icmpcode}}"
          action.properties.icmp_type: "{{parsed_event.message.icmptype}}"
          log.description: "{{parsed_event.message.logdesc}}"
          log.hostname: "{{parsed_event.message.devname}}"
          dns.rrname: "{{final.dns.question.name}}"
          dns.rrtype: "{{final.dns.question.type}}"
          rule.apprisk: "{{parsed_event.message.apprisk}}"
      - set:
          url.full: "{{final.url.original}}"
        filter: '{{final.url.get("original") != None and final.url.original.startswith("http")}}'

      - set:
          event.category: "{{parsed_event.message.Name.split(':')[0]}}"
        filter: '{{parsed_event.message.get("Name") != None}}'

      - set:
          event.category: "{{parsed_event.message.cat.split(':')[0]}}"
        filter: '{{parsed_event.message.get("cat") != None}}'

      - set:
          event.category: "{{parsed_event.message.type}}"
        filter: '{{parsed_event.message.get("type") != None}}'

      - set:
          event.reason: "{{parsed_event.message.reason}}"

      - set:
          action.outcome_reason: "{{parsed_event.message.outcome_reason or parsed_event.message.reason}}"

      - set:
          action.outcome_reason: "{{parsed_event.message.msg.strip('\n').strip('\"')}}"
        filter: '{{parsed_event.message.get("msg") != None }}'

      - set:
          action.type: '{{parsed_event.message.get("FTNTFGTeventtype")}} - {{backward_compatibility.action.type}}'
        filter: '{{parsed_event.message.get("FTNTFGTeventtype") != None }}'

      - set:
          action.target: "network-traffic"
        filter: '{{final.get("source") != None and final.get("destination") != None and final.get("action") != None}}'

      - set:
          action.outcome: "success"
        filter: '{{backward_compatibility.action.get("name") != None and backward_compatibility.action.get("outcome") == None}}'

  set_event_dataset:
    # This stage is used so harmonize the value
    # of event.dataset between every supported event formats (cef, kv, standard)
    # the formats kv and standard types are translated to CEF events "cat" field
    actions:
      - set:
          event.dataset: "{{ parsed_event.message.cat}}"
        filter: '{{original.message.startswith("CEF") or original.message.startswith("0|Fortinet")}}'

      - translate:
        dictionary:
          "vpn": "event:vpn"
          "system": "event:system"
          "wad": "utm:wad"
          "anomaly": "utm:anomaly"
          "app-ctrl": "utm:app-ctrl"
          "forward": "traffic:forward"
          "local": "traffic:local"
          "dns-response": "dns:dns-response"
        mapping:
          parsed_event.message.subtype: event.dataset
        filter: '{{parsed_event.message.get("subtype") != None}}'

  #  ecs_categorization_fields:
  #    actions:
  #      - set:
  #          event.kind: "event"
  #          event.category: ["network"]
  #action
  #          event.type: [ "allowed", "connection" ]
  #        filter: '{{parsed_event.message.action == "accept"
  #         or parsed_event.message.act in ["pass", "permit", "passthrough", "log-only", "ssl-new-con", "accept", "dns"]
  #         or parsed_event.message.action in ["pass", "ip-conn"]
  #         or parsed_event.message.FortinetFortiGateaction in ["accept"] }}'
  #
  #      - set:
  #          event.type: [ "connection", "end" ]
  #        filter: '{{parsed_event.message.act == "close"
  #         or parsed_event.message.action in ["server-rst"]
  #         or parsed_event.message.FortinetFortiGateaction in ["timeout"]}}'
  #
  #      - set:
  #          event.type: [ "denied", "connection", "end" ]
  #        filter: '{{parsed_event.message.act in ["block", "blocked", "clear_session", "reset"]
  #         or parsed_event.message.action in ["clear_session"]}}'

  field_extraction:
    actions:
      - set:
          "@timestamp": "{{parsed_date.date}}"
          event.start: "{{parsed_event.message.itime | to_rfc3339}}"
          event.action: "{{parsed_event.message.name or parsed_event.message.FTNTFGTaction or parsed_event.message.FortinetFortiGateaction or parsed_event.message.act or parsed_event.message.action or parsed_event.message.reason}}"
          destination.address: "{{parsed_event.message.dstip or parsed_event.message.dst}}"
          destination.bytes: "{{parsed_event.message.rcvdbyte or parsed_event.message.in}}"
          destination.domain: "{{parsed_event.message.remotename or parsed_event.message.dhost or parsed_event.message.hostname}}"
          destination.mac: "{{parsed_event.message.dstmac}}"
          destination.nat.port: "{{parsed_event.message.destinationTranslatedPort}}"
          destination.packets: "{{parsed_event.message.rcvdpkt or parsed_event.message.FTNTFGTrcvpkt or parsed_event.message.FortinetFortiGatercvdpkt or parsed_event.message.get('Packets Received')}}"
          destination.port: "{{parsed_event.message.dstport or parsed_event.message.dpt or parsed_event.message.locport}}"
          destination.user.name: "{{parsed_event.message.duser}}"
          dns.question.name: "{{parsed_event.message.qname or parsed_event.message.FTNFGTqname or parsed_event.message.FortinetFortiGateqname}}"
          dns.question.type: "{{parsed_event.message.qtype or parsed_event.message.FTNFGTqtype or parsed_event.message.FortinetFortiGateqtype}}"
          dns.question.class: "{{parsed_event.message.qclass or parsed_event.message.FTNFGTqclass or parsed_event.message.FortinetFortiGateqclass}}"
          fortinet.fortigate.log_version: "{{parsed_event.message.logver}}"
          fortinet.fortigate.src_internet_service: "{{parsed_event.message.srcinetsvc}}"
          fortinet.fortigate.dst_internet_service: "{{parsed_event.message.dstinetsvc}}"
          fortinet.fortigate.dst_reputation: "{{parsed_event.message.dstreputation | int}}"
          fortinet.fortigate.nat_translation_type: "{{parsed_event.message.trandisp}}"
          fortinet.fortigate.vpntype: "{{parsed_event.message.vpntype}}"
          fortinet.fortigate.cfgtid: "{{parsed_event.message.cfgtid or parsed_event.message.FTNTFGTcfgtid or parsed_event.message.FortinetFortiGatecfgtid}}"
          fortinet.fortigate.cfgattr: "{{parsed_event.message.cfgattr or parsed_event.message.FTNTFGTcfgattr or parsed_event.message.FortinetFortiGatecfgattr}}"
          fortinet.fortigate.cfgpath: "{{parsed_event.message.cfgpath or parsed_event.message.FTNTFGTcfgpath or parsed_event.message.FortinetFortiGatecfgpath}}"
          fortinet.fortigate.event.type: "{{parsed_event.message.type}}"
          fortinet.fortigate.event.severity: "{{parsed_event.message.severity or parsed_event.message.FTNTFGTseverity}}"
          fortinet.fortigate.security_profile: "{{parsed_event.message.profile}}"
          fortinet.fortigate.sn: "{{parsed_event.message.sn or parsed_event.message.FTNTFGTsn or FortinetFortiGatesn}}"
          fortinet.fortigate.threat.level: "{{parsed_event.message.crlevel}}"
          fortinet.fortigate.threat.score: "{{parsed_event.message.crscore}}"
          fortinet.fortigate.threat.type: "{{parsed_event.message.craction}}"
          event.code: "{{parsed_event.message.logid or parsed_event.message.FTNTFGTlogid or parsed_event.message.FortinetFortiGatelogid or parsed_event.message.DeviceEventClassID}}"
          event.reason: "{{parsed_event.message.msg}}"
          event.timezone: "{{parsed_event.message.FortinetFortiGatetz or parsed_event.message.tz or parsed_event.message.FTNTFGTtz }}"
          file.name: "{{parsed_event.message.fname}}"
          file.size: "{{parsed_event.message.fsize}}"
          fortinet.fortigate.apprisk: "{{parsed_event.message.apprisk}}"
          fortinet.fortigate.event.desc: "{{parsed_event.message.desc}}"
          fortinet.fortigate.virtual_domain: "{{parsed_event.message.vd}}"
          log.level: "{{parsed_event.message.level or parsed_event.message.FTNTFGTlevel or parsed_event.message.FortinetFortiGatelevel}}"
          observer.hostname: "{{parsed_event.message.devname}}"
          host.name: "{{parsed_event.message.srcname}}"
          host.os.family: "{{parsed_event.message.osname}}"
          observer.serial_number: "{{parsed_event.message.devid or parsed_event.message.deviceExternalId}}"
          network.transport: "{{parsed_event.message.proto}}"
          observer.egress.interface.name: "{{parsed_event.message.dstintf or parsed_event.message.deviceOutboundInterface}}"
          observer.egress.interface.alias: "{{parsed_event.message.dstintfrole}}"
          observer.ingress.interface.name: "{{parsed_event.message.srcintf or parsed_event.message.deviceInboundInterface}}"
          observer.ingress.interface.alias: "{{parsed_event.message.srcintfrole}}"
          observer.type: "{{parsed_event.message.DeviceProduct}}"
          observer.vendor: "{{parsed_event.message.DeviceVendor}}"
          observer.version: "{{parsed_event.message.DeviceVersion}}"
          rule.category: "{{parsed_event.message.appcat or parsed_event.message.catdesc or parsed_event.message.requestContext}}"
          rule.ruleset: "{{parsed_event.message.applist or parsed_event.message.policytype}}"
          source.bytes: "{{parsed_event.message.sentbyte or parsed_event.message.out}}"
          source.domain: "{{parsed_event.message.shost}}"
          source.ip: "{{parsed_source_ip.result.source_ip}}"
          source.mac: "{{parsed_event.message.srcmac or parsed_event.message.mac}}"
          source.nat.port: "{{parsed_event.message.sourceTranslatedPort}}"
          source.packets: "{{parsed_event.message.sentpkt or parsed_event.message.FTNTFGTsentpkt or parsed_event.message.FortinetFortiGatesentpkt or parsed_event.message.get('Packets Sent')}}"
          source.port: "{{parsed_event.message.srcport or parsed_event.message.spt or parsed_event.message.remport}}"
          fortinet.fortigate.icmp.request.type: "{{parsed_event.message.icmptype}}"
          fortinet.fortigate.icmp.request.code: "{{parsed_event.message.icmpcode}}"
          url.original: "{{parsed_event.message.url or parsed_event.message.request}}"
          user_agent.original: "{{parsed_event.message.requestClientApplication or parsed_event.message.agent}}"
          user.name: "{{parsed_event.message.unauthuser}}"
          fortinet.fortigate.user.source: "{{parsed_event.message.unauthusersource}}"
          fortinet.fortigate.attack.name: "{{parsed_event.message.attack}}"
          fortinet.fortigate.attack.id: "{{parsed_event.message.attackid}}"
          fortinet.fortigate.policyid: "{{parsed_event.message.policyid}}"
          fortinet.fortigate.policytype: "{{parsed_event.message.policytype}}"
          fortinet.fortigate.policyname: "{{parsed_event.message.policyname}}"
          fortinet.fortigate.poluuid: "{{parsed_event.message.poluuid}}"
          fortinet.fortigate.sessionid: "{{parsed_event.message.sessionid}}"
          fortinet.fortigate.utmaction: "{{parsed_event.message.utmaction}}"
          group.name: "{{parsed_event.message.group or parsed_event.message.FTNTFGTgroup}}"

      - set:
          destination.geo.country_name: "{{parsed_event.message.dstcountry}}"
          destination.geo.region_name: "{{parsed_event.message.dstregion}}"
          destination.geo.city_name: "{{parsed_event.message.dstcity}}"
          source.geo.country_name: "{{parsed_event.message.srccountry}}"

      - set:
          network.forwarded_ip: "{{parsed_event.message.forwardedfor}}"
        filter: "{{ ',' not in parsed_event.message.get('forwardedfor', '' )}}"

      - set:
          network.forwarded_ip: >
            [
              {% for ip in parsed_event.message.forwardedfor.split(',') %}
                "{{ip}}",
              {% endfor %}
            ]
        filter: "{{ ',' in parsed_event.message.get('forwardedfor', '' )}}"

      - set:
          event.duration: "{{(parsed_event.message.duration | int) * 1_000_000_000}}" # nanoseconds
        filter: "{{parsed_event.message.duration | int(-1) > 0}}"

      - set:
          fortinet.fortigate.method: "{{parsed_event.message.method}}"
        filter: "{{parsed_event.message.subtype in ['webfilter', 'system'] and parsed_event.message.method in ['jsconsole', 'domain', 'ip']}}"

      - set:
          network.protocol: "{{parsed_event.message.method}}"
        filter: "{{parsed_event.message.subtype in ['webfilter', 'system'] and parsed_event.message.method not in ['jsconsole', 'domain', 'ip']}}"

      - set:
          http.request.method: "{{parsed_event.message.method or parsed_event.message.httpmethod}}"
        filter: "{{parsed_event.message.subtype not in ['webfilter', 'system']}}"

      - set:
          http.request.referrer: "{{parsed_event.message.http_referer}}"

      - set:
          file.name: "{{parsed_event.message.fname or parsed_event.message.url | basename}}"
        filter: "{{parsed_event.message.subtype == 'app-ctrl'}}"

      - set:
          fortinet.fortigate.poluuid: "{{parsed_event.message.uuid}}"
        filter: "{{parsed_event.message.cfgpath == 'firewall.policy'}}"

      - set:
          destination.nat.ip: "{{parsed_event.message.tranip}}"
        filter: "{{parsed_event.message.tranip | is_ipaddress}}"

      - set:
          destination.nat.ip: "{{parsed_event.message.destinationTranslatedAddress}}"
        filter: "{{parsed_event.message.destinationTranslatedAddress | is_ipaddress}}"

      - set:
          destination.ip: "{{parsed_event.message.locip}}"
        filter: "{{parsed_event.message.get('locip')| is_ipaddress}}"

      - set:
          destination.ip: "{{parsed_event.message.dstip}}"
        filter: "{{parsed_event.message.get('dstip') | is_ipaddress}}"

      - set:
          destination.ip: "{{parsed_event.message.dst}}"
        filter: "{{parsed_event.message.get('dst') | is_ipaddress}}"

      - set:
          source.ip: "{{parsed_event.message.ip}}"
        filter: "{{parsed_event.message.get('ip') | is_ipaddress}}"
      - set:
          source.ip: "{{parsed_event.message.remip}}"
        filter: "{{parsed_event.message.get('remip')| is_ipaddress}}"
      - set:
          source.ip: "{{parsed_event.message.srcip}}"
        filter: "{{parsed_event.message.get('srcip') | is_ipaddress}}"
      - set:
          source.ip: "{{parsed_event.message.src}}"
        filter: "{{parsed_event.message.get('src') | is_ipaddress}}"

      - set:
          source.nat.ip: "{{parsed_event.message.tunnelip}}"
        filter: "{{parsed_event.message.get('tunnelip') | is_ipaddress}}"

      - set:
          source.nat.ip: "{{parsed_event.message.sourceTranslatedAddress}}"
        filter: "{{parsed_event.message.get('sourceTranslatedAddress') | is_ipaddress}}"

      - set:
          source.nat.ip: "{{parsed_event.message.transip}}"
        filter: "{{parsed_event.message.get('transip') | is_ipaddress}}"

      - set:
          dns.question.name: "{{parsed_event.message.qname.strip()[1:-1]}}"
        filter: "{{parsed_event.message.get('qname') != None and parsed_event.message.qname.strip().startswith('[') and parsed_event.message.qname.strip().endswith(']')}}"
      - set:
          source.user.name: "{{parsed_event.message.user or parsed_event.message.suser}}"
          user.name: "{{parsed_event.message.user or parsed_event.message.suser}}"
      - set:
          network.bytes: "{{parsed_event.message.get('in', 0) | int + parsed_event.message.get('out', 0) | int}}"
        filter: "{{parsed_event.message.get('in') != None or parsed_event.message.get('out') != None }}"
      - set:
          network.bytes: "{{parsed_event.message.get('sentbyte', 0) | int + parsed_event.message.get('rcvdbyte', 0) | int}}"
        filter: "{{parsed_event.message.get('sentbyte') != None or parsed_event.message.get('rcvdbyte') != None }}"

      - set:
          network.application: "{{parsed_event.message.app}}"
          network.protocol: "{{parsed_event.message.app | lower}}"
        filter: '{{parsed_event.message.get("app") != None}}'
      - set:
          network.protocol: "{{parsed_event.message.service | lower}}"
        filter: '{{parsed_event.message.get("service") != None}}'
      - set:
          destination.user.domain: '{{final.destination.user.name.split("\\") | first}}'
          destination.user.name: '{{final.destination.user.name.split("\\") | last}}'
        filter: "{{final.get('destination', {}).get('user', {}).get('name') != None and '\\\\' in final.destination.user.name}}"
      - set:
          source.user.domain: '{{final.source.user.name.split("\\") | first}}'
          source.user.name: '{{final.source.user.name.split("\\") | last}}'
          user.name: '{{final.source.user.name.split("\\") | last}}'
        filter: "{{final.get('source', {}).get('user', {}).get('name') != None and '\\\\' in final.source.user.name}}"
      - set:
          user.domain: '{{final.user.name.split("\\") | first}}'
          user.name: '{{final.user.name.split("\\") | last}}'
        filter: "{{final.get('user', {}).get('name') != None and '\\\\' in final.user.name}}"
      - set:
          destination.user.full_name: "{{final.destination.user.name}}"
          destination.user.name: '{{final.destination.user.name.split(",cn=") | first}}'
        filter: "{{final.get('destination', {}).get('user', {}).get('name') != None and ',cn=' in final.destination.user.name}}"
      - set:
          user.full_name: "{{final.source.user.name}}"
          source.user.full_name: "{{final.source.user.name}}"
          user.name: '{{final.source.user.name.split(",cn=") | first}}'
          source.user.name: '{{final.source.user.name.split(",cn=") | first}}'
        filter: "{{final.get('source', {}).get('user', {}).get('name') != None and ',cn=' in final.source.user.name}}"
      - set:
          user.full_name: "{{final.source.user.name}}"
          user.name: "{{final.user.name.split(',cn=') | first}}"
        filter: "{{final.get('user', {}).get('name') != None and ',cn=' in final.user.name}}"
      - set:
          fortinet.fortigate.logdev.id: "{{parsed_event.message.logdev_id}}"
          fortinet.fortigate.logdev.name: "{{parsed_event.message.logdev_name}}"
          fortinet.fortigate.logdev.last_logging: "{{parsed_event.message.logdev_last_logging | to_rfc3339}}"
        filter: "{{parsed_event.message.subtype == 'logdev'}}"
      - set:
          fortinet.fortigate.tunnel.name: "{{parsed_event.message.vpntunnel}}"
          fortinet.fortigate.tunnel.version: "{{parsed_event.message.version}}"
          fortinet.fortigate.tunnel.type: "{{parsed_event.message.tunneltype}}"
          fortinet.fortigate.tunnel.id: "{{parsed_event.message.tunnelid}}"
        filter: "{{parsed_event.message.subtype == 'vpn'}}"
      - set:
          fortinet.fortigate.tunnel.ip: "{{parsed_event.message.tunnelip}}"
        filter: "{{parsed_event.message.subtype == 'vpn' and parsed_event.message.get('tunnelip') | is_ipaddress}}"
      - set:
          fortinet.fortigate.total.duration: "{{(parsed_event.message.duration | int) * 1_000_000_000}}" # nanoseconds
          fortinet.fortigate.total.received_bytes: "{{parsed_event.message.rcvdbyte}}"
          fortinet.fortigate.total.sent_bytes: "{{parsed_event.message.sentbyte}}"
          fortinet.fortigate.total.received_packets: "{{parsed_event.message.rcvdpk}}"
          fortinet.fortigate.total.sent_packets: "{{parsed_event.message.sentpkt}}"
          event.duration: "{{(parsed_event.message.durationdelta| int) * 1_000_000_000}}" # nanoseconds
          source.bytes: "{{parsed_event.message.sentdelta}}"
          source.packets: "{{parsed_event.message.sentpktdelta}}"
          destination.bytes: "{{parsed_event.message.rcvddelta}}"
          destination.packets: "{{parsed_event.message.rcvdpktdelta}}"
          network.bytes: "{{parsed_event.message.get('sentdelta', 0) | int + parsed_event.message.get('rcvddelta', 0) | int}}"
        filter: "{{parsed_event.message.logid =='0000000020'}}"

      - translate:
        dictionary:
          incoming: "inbound"
          outgoing: "outbound"
        mapping:
          parsed_event.message.direction: network.direction
        filter: "{{parsed_event.message.get('direction') != None}}"

      - translate:
        dictionary:
          0: "inbound"
          1: "outbound"
        mapping:
          parsed_event.message.deviceDirection: network.direction
        filter: "{{parsed_event.message.get('deviceDirection') != None}}"

      - translate:
        dictionary:
          0: "hopopt"
          1: "icmp"
          2: "igmp"
          3: "ggp"
          4: "ipv4"
          5: "st"
          6: "tcp"
          7: "cbt"
          8: "egp"
          9: "igp"
          10: "bbn-rcc-mon"
          11: "nvp-ii"
          12: "pup"
          13: "argus"
          14: "emcon"
          15: "xnet"
          16: "chaos"
          17: "udp"
          18: "mux"
          19: "dcn-meas"
          20: "hmp"
          21: "prm"
          22: "xns-idp"
          23: "trunk-1"
          24: "trunk-2"
          25: "leaf-1"
          26: "leaf-2"
          27: "rdp"
          28: "irtp"
          29: "iso-tp4"
          30: "netblt"
          31: "mfe-nsp"
          32: "merit-inp"
          33: "dccp"
          34: "3pc"
          35: "idpr"
          36: "xtp"
          37: "ddp"
          38: "idpr-cmtp"
          39: "tp++"
          40: "il"
          41: "ipv6"
          42: "sdrp"
          43: "ipv6-route"
          44: "ipv6-frag"
          45: "idrp"
          46: "rsvp"
          47: "gre"
          48: "dsr"
          49: "bna"
          50: "esp"
          51: "ah"
          52: "i-nlsp"
          53: "swipe"
          54: "narp"
          55: "mobile"
          56: "tlsp"
          57: "skip"
          58: "ipv6-icmp"
          59: "ipv6-nonxt"
          60: "ipv6-opts"
          61: "any host internal protocol"
          62: "cftp"
          63: "any local network"
          64: "sat-expak"
          65: "kryptolan"
          66: "rvd"
          67: "ippc"
          68: "any distributed file system"
          69: "sat-mon"
          70: "visa"
          71: "ipcv"
          72: "cpnx"
          73: "cphb"
          74: "wsn"
          75: "pvp"
          76: "br-sat-mon"
          77: "sun-nd"
          78: "wb-mon"
          79: "wb-expak"
          80: "iso-ip"
          81: "vmtp"
          82: "secure-vmtp"
          83: "vines"
          84: "ttp"
          85: "nsfnet-igp"
          86: "dgp"
          87: "tcf"
          88: "eigrp"
          89: "ospfigp"
          90: "sprite-rpc"
          91: "larp"
          92: "mtp"
          93: "ax.25"
          94: "ipip"
          95: "micp"
          96: "scc-sp"
          97: "etherip"
          98: "encap"
          99: "any private encryption scheme"
          100: "gmtp"
          101: "ifmp"
          102: "pnni"
          103: "pim"
          104: "aris"
          105: "scps"
          106: "qnx"
          107: "a/n"
          108: "ipcomp"
          109: "snp"
          110: "compaq-peer"
          111: "ipx-in-ip"
          112: "vrrp"
          113: "pgm"
          114: "any 0-hop protocol"
          115: "l2tp"
          116: "ddx"
          117: "iatp"
          118: "stp"
          119: "srp"
          120: "uti"
          121: "smp"
          122: "sm"
          123: "ptp"
          124: "isis over ipv4"
          125: "fire"
          126: "crtp"
          127: "crudp"
          128: "sscopmce"
          129: "iplt"
          130: "sps"
          131: "pipe"
          132: "sctp"
          133: "fc"
          134: "rsvp-e2e-ignore"
          135: "mobility header"
          136: "udplite"
          137: "mpls-in-ip"
          138: "manet"
          139: "hip"
          140: "shim6"
          141: "wesp"
          142: "rohc"
          253: "unassigned"
          254: "use for experimentation and testing"
          255: "reserved"
        mapping:
          parsed_event.message.proto: network.transport
