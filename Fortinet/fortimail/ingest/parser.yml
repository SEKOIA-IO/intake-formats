name: fortimail
ignored_values: ["N/A"]
pipeline:
  - name: parsed_event
    external:
      name: kv.parse-kv
      properties:
        input_field: "{{original.message}}"

  - name: parsed_msg
    external:
      name: grok.match
      properties:
        raise_errors: false
        input_field: parsed_event.message.msg
        output_field: file
        pattern: '%{DATA:type} name: %{DATA:name}(\(checksum:%{DATA:hash}\))?, scanned by Antivirus Scanner\(%{DATA:event_status}\)(, Content Filter\(clean\))?'

  - name: parse_starttls
    external:
      name: grok.match
      properties:
        raise_errors: false
        input_field: parsed_event.message.msg
        output_field: msg
        pattern: "STARTTLS=server, cert-subject=%{GREEDYDATA:tls_server_subject}, cert-issuer=%{GREEDYDATA:tls_server_issuer}, verifymsg=%{GREEDYDATA:event_reason}"
    filter: "{{'STARTTLS=server' in parsed_event.message.msg}}"

  - name: parse_full_url
    external:
      name: grok.match
      properties:
        raise_errors: false
        input_field: parsed_event.message.msg
        output_field: msg
        pattern: "%{URL_FULL_SPAM}|%{URL_FULL_1}|%{URL_ORIGINAL_1}|%{URL_ORIGINAL_2}"
        custom_patterns:
          URL_FULL_SPAM: "FortiGuard-AntiSpam identified spam URL: %{URI:url_full}"
          URL_FULL_1: "%{DATA}identified URL: %{DATA:url_full},%{GREEDYDATA}"
          URL_ORIGINAL_1: "%{DATA} identified URL(%{DATA}): %{URI:url_original}"
          URL_ORIGINAL_2: "URL %{URI:url_original} %{GREEDYDATA}"

  - name: parse_verify_msg
    external:
      name: grok.match
      properties:
        raise_errors: false
        input_field: parsed_event.message.msg
        output_field: msg
        pattern: "STARTTLS=client, cert-subject=%{GREEDYDATA:tls_client_subject}, cert-issuer=%{GREEDYDATA:tls_client_issuer}, verifymsg=%{GREEDYDATA:event_reason}"
    filter: "{{'verifymsg=' in parsed_event.message.msg}}"

  - name: parse_file_information
    external:
      name: grok.match
      properties:
        raise_errors: false
        input_field: parsed_event.message.msg
        output_field: msg
        pattern: '%{DATA:file_type} %{DATA:file_name}\s\(checksum: %{DATA:file_hash_sha256}\) has been scanned by FortiSandbox.( Scan result: rating=%{GREEDYDATA:tmp_event_status})?'
    filter: "{{'has been scanned by FortiSandbox' in parsed_event.message.msg}}"

  - name: parse_stat_message
    external:
      name: grok.match
      properties:
        raise_errors: false
        input_field: parsed_event.message.msg
        output_field: msg
        pattern: "to=%{DATA:email_to}, (delay=%{DATA:tmp_delay}, )?(xdelay=%{DATA:tmp_xdelay}, )?(mailer=%{DATA:tmp_mailer}, )?(pri=%{NUMBER:tmp_priority_level_msg}, )?(relay=%{RELAY_INFO:relay}, )?(dsn=%{DATA:tmp_dsn_version}, )?stat=%{GREEDYDATA:event_reason}"
        custom_patterns:
          RELAY_INFO: '(%{HOSTNAME:destination_domain}? \[%{IP:_destination_ip}\])|(\[%{IP:_destination_ip}\] \[%{IP:_destination_ip2}\])'
    filter: "{{parsed_event.message.get('type') == 'event' and parsed_event.message.get('msg') and 'stat=' in parsed_event.message.get('msg')}}"

  - name: parse_webfilter_full_url
    external:
      name: grok.match
      properties:
        raise_errors: false
        input_field: parsed_event.message.msg
        output_field: msg
        pattern: "FortiGuard-WebFilter identified URL: %{DATA:url_full}, category: %{DATA:tmp_spam_category}, id: %{GREEDYDATA:tmp_spam_id}."
    filter: "{{parsed_event.message.get('msg') and 'FortiGuard-WebFilter identified URL' in parsed_event.message.msg}}"

  - name: parse_event_with_no_stat
    external:
      name: kv.parse-kv
      properties:
        value_sep: "="
        item_sep: ',\s'
        input_field: parsed_event.message.msg
        output_field: msg
    filter: "{{'stat=' not in parsed_event.message.get('msg') and parsed_event.message.get('type') == 'event'}}"

  - name: parse_ui
    external:
      name: grok.match
      properties:
        raise_errors: false
        input_field: parsed_event.message.ui
        output_field: msg
        pattern: '%{DATA}\(%{IP:source_ip}\)'

  - name: parse_relay_data
    external:
      name: grok.match
      properties:
        raise_errors: false
        input_field: parse_event_with_no_stat.msg.relay
        output_field: msg
        pattern: "%{RELAY:relay}"
        custom_patterns:
          RELAY: "%{RELAY_HOST_AND_IP}|%{RELAY_HOST_ONLY}|%{RELAY_IP_ONLY}"
          RELAY_HOST_AND_IP: '%{HOSTNAME:destination_domain} \[%{IP:_destination_ip}\]'
          RELAY_HOST_ONLY: "%{HOSTNAME:destination_domain}"
          RELAY_IP_ONLY: ' \[%{IP:_destination_ip}\]'
    filter: "{{parse_event_with_no_stat.get('msg') != None}}"

  - name: set_ecs_fields
  - name: finalizer

stages:
  finalizer:
    actions:
      - set:
          destination.size_in_char: "{{parse_stat_message.msg.destination_domain | length}}"
        filter: "{{parse_stat_message.msg.destination_domain | length > 0}}"

      - set:
          source.size_in_char: "{{parsed_event.message.domain | length}}"
        filter: "{{parsed_event.message.domain | length > 0}}"

  set_ecs_fields:
    actions:
      - set:
          action.outcome: "{{parsed_event.message.disposition}}"
          destination.ip: "{{parsed_event.message.dst_ip or parse_stat_message.msg._destination_ip}}"
          action.outcome_reason: "{{parsed_event.message.msg}}"
          event.category: "{{parsed_event.message.subtype}}"
          event.kind: "{{parsed_event.message.type}}"
          event.message: "{{parsed_event.message.msg}}"
          http.request.bytes: "{{parsed_event.message.message_length}}"
          log.level: "{{parsed_event.message.pri}}"
          network.direction: "{{parsed_event.message.direction}}"
          source.address: "{{parsed_event.message.client_name}}"
          source.domain: "{{parsed_event.message.domain}}"
          source.ip: "{{parsed_event.message.client_ip}}"
          url.full: "{{parse_full_url.msg.url_full}}"
          url.original: "{{parse_full_url.msg.url_original}}"

      - set:
          action.properties.bits_sent_ratio: "{{parse_event_with_no_stat.msg.bits}}"
          action.properties.class: "{{parse_event_with_no_stat.msg.class}}"
          action.properties.daemon: "{{parse_event_with_no_stat.msg.daemon}}"
          action.properties.delay: "{{parse_stat_message.msg.tmp_delay}}"
          action.properties.device_id: "{{parsed_event.message.device_id}}"
          action.properties.dns_resolution_attempt: "{{parsed_event.message.resolved}}"
          action.properties.dsn_version: "{{parse_stat_message.msg.tmp_dsn_version or parse_event_with_no_stat.msg.dsn}}"
          action.properties.event_status: "{{parsed_event.message.status or parsed_msg.file.event_status or parse_file_information.msg.tmp_event_status}}"
          action.properties.host_sender: "{{parsed_event.message.hfrom}}"
          action.properties.hostname_info: "{{parse_event_with_no_stat.msg.Hostname}}"
          action.properties.log_id: "{{parsed_event.message.log_id}}"
          action.properties.mailer: "{{parsed_event.message.mailer or parse_stat_message.msg.tmp_mailer or parse_event_with_no_stat.msg.mailer}}"
          action.properties.message_id: "{{parse_event_with_no_stat.msg.msgid.replace('<', '').replace('>', '')}}"
          action.properties.nrcpts: "{{parse_event_with_no_stat.msg.nrcpts}}"
          action.properties.policy_id: "{{parsed_event.message.polid}}"
          action.properties.priority_level_msg: "{{parse_stat_message.msg.tmp_priority_level_msg or parse_event_with_no_stat.msg.pri}}"
          action.properties.session_id: "{{parsed_event.message.session_id}}"
          action.properties.source_country: "{{parsed_event.message.client_cc}}"
          action.properties.spam_category: "{{parse_webfilter_full_url.msg.tmp_spam_category}}"
          action.properties.spam_id: "{{parse_webfilter_full_url.msg.tmp_spam_id}}"
          action.properties.src_type: "{{parsed_event.message.src_type}}"
          action.properties.stat: "{{parse_event_with_no_stat.msg.stat}}"
          action.properties.user_identifier: "{{parsed_event.message.ui}}"
          action.properties.verify: "{{parse_event_with_no_stat.msg.verify}}"
          action.properties.virus: "{{parsed_event.message.virus}}"
          action.properties.xdelay: "{{parse_stat_message.msg.tmp_xdelay or parse_event_with_no_stat.msg.xdelay }}"

      - set:
          action.properties.relay: >
            {%- if parse_relay_data.msg.destination_domain | length > 0 -%}{{parse_relay_data.msg.destination_domain}}{%- elif parse_relay_data.msg._destination_ip | length > 0-%}{{parse_relay_data.msg._destination_ip}}{%- endif -%}
          destination.domain: "{{parse_relay_data.msg.destination_domain}}"
          destination.address: "{{parse_relay_data.msg.destination_domain}}"
          destination.ip: "{{parse_relay_data.msg._destination_ip}}"
        filter: "{{parse_relay_data.msg.relay | length > 0}}"

      - set:
          action.properties.relay: "{{parse_stat_message.msg._destination_ip}}"
        filter: "{{parse_stat_message.msg._destination_ip | length > 0}}"

      - set:
          action.properties.relay: "{{parse_stat_message.msg.destination_domain}}"
        filter: "{{parse_stat_message.msg.destination_domain | length > 0}}"

      - set:
          source.ip: "{{parsed_event.message.relay.replace('[', '').replace(']', '')}}"
        filter: "{{parsed_event.message.get('relay', '') | is_ipaddress}}"

      - set:
          source.ip: "{{parse_ui.msg.source_ip}}"

      - set:
          action.properties.start_tls: "server"
        filter: "{{'STARTTLS=server' in parsed_event.message.msg}}"

      - set:
          action.properties.start_tls: "client"
        filter: "{{'STARTTLS=client' in parsed_event.message.msg}}"

      - set:
          action.properties.start_tls: "{{parse_event_with_no_stat.msg.STARTTLS}}"
        filter: "{{parsed_event.message.get('type') == 'event' and 'stat=' not in parsed_event.message.get('msg') and 'STARTTLS' in parse_event_with_no_stat.msg}}"

      - set:
          event.action: "{{parsed_event.message.action}}"
          user.name: "{{parsed_event.message.user}}"
        filter: "{{parsed_event.message.get('type') == 'event'}}"

      - set:
          action.outcome_reason: "{{parsed_event.message.classifier}}"
        filter: "{{parsed_event.message.get('type') == 'statistics'}}"

      - set:
          email.from.address: "{{parse_event_with_no_stat.msg.from.replace('<', '').replace('>', '')}}"

      - set:
          email.from.address: "{% if parsed_event.message.get('from') %}{{parsed_event.message.from.replace('<', '').replace('>', '')}}{% endif %}"
          email.to.address: "{% if parsed_event.message.get('to') %}{{parsed_event.message.to.replace('<', '').replace('>', '')}}{% endif %}"
        filter: "{{parsed_event.message.get('type', 'statistics') in ['statistics', 'spam', 'virus']}}"

      - set:
          file.size: "{{parse_event_with_no_stat.msg.size}}"
          network.protocol: "{{parse_event_with_no_stat.msg.proto}}"
          tls.cipher: "{{parse_event_with_no_stat.msg.cipher}}"
        filter: "{{'stat=' not in parsed_event.message.get('msg') and parsed_event.message.get('type') == 'event'}}"

      - set:
          file.hash.sha256: "{{parsed_msg.file.hash}}"
          file.name: "{{parsed_msg.file.name}}"
          file.type: "{{parsed_msg.file.type | lower}}"
        filter: "{{parsed_event.message.get('msg') and 'scanned by Antivirus Scanner' in parsed_event.message.get('msg')}}"

      - set:
          event.reason: "{{parse_starttls.msg.event_reason}}"
          tls.server.issuer: "{{parse_starttls.msg.tls_server_issuer}}"
          tls.server.subject: "{{parse_starttls.msg.tls_server_subject}}"
        filter: "{{parsed_event.message.get('msg') and 'STARTTLS=server' in parsed_event.message.msg}}"

      - set:
          event.reason: "{{parse_verify_msg.msg.event_reason}}"
          tls.client.issuer: "{{parse_verify_msg.msg.tls_client_issuer}}"
          tls.client.subject: "{{parse_verify_msg.msg.tls_client_subject}}"
        filter: "{{'verifymsg=' in parsed_event.message.msg}}"

      - set:
          file.hash.sha256: "{{parse_file_information.msg.file_hash_sha256}}"
          file.name: "{{parse_file_information.msg.file_name}}"
          file.type: "{{parse_file_information.msg.file_type | lower}}"
        filter: "{{'has been scanned by FortiSandbox' in parsed_event.message.msg}}"

      - set:
          email.to.address: "{{parse_stat_message.msg.email_to.replace('<', '').replace('>', '')}}"
          user.email: "{{parse_stat_message.msg.email_to.replace('<', '').replace('>', '')}}"
          user.name: "{{parse_stat_message.msg.mailer}}"
          destination.domain: "{{parse_stat_message.msg.destination_domain}}"
          destination.address: "{{parse_stat_message.msg.destination_domain}}"
          destination.ip: "{{parse_stat_message.msg._destination_ip}}"
          event.reason: "{{parse_stat_message.msg.event_reason}}"
        filter: "{{parsed_event.message.get('type') == 'event' and parsed_event.message.get('msg') and 'stat=' in parsed_event.message.get('msg')}}"

      - set:
          event.action: "{{parsed_event.message.action}}"
          user.name: "{{parsed_event.message.user}}"
        filter: "{{parsed_event.message.get('type') == 'kevent'}}"

      - set:
          email.subject: "{{parsed_event.message.subject}}"
        filter: "{{parsed_event.message.get('type') == 'spam'}}"
