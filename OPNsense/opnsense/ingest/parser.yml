name: 'opnsense-package-filter'
pipeline:
  - name: parsed_event
    external:
      name: grok.match
      properties:
        input_field: '{{original.message}}'
        output_field: message
        pattern: '%{PACKET_FILTER},(%{PF_IPV4}|%{PF_IPV6}),(%{PF_UDP}|%{PF_TCP}|%{PF_CARP}|%{PF_ICMP})'

        custom_patterns:
          PACKET_FILTER: '%{NUMBER:rulenr},%{DATA:subrulenr},%{DATA:anchorname},%{WORD:label},%{WORD:interface},%{WORD:reason},%{WORD:action},%{WORD:dir}'
          PF_IPV4: '4,%{WORD:tos},%{DATA:ecn},%{NUMBER:ttl},%{NUMBER:id},%{NUMBER:offset},%{WORD:flags},%{NUMBER:protonum},%{WORD:protoname},%{NUMBER:length},%{IPV4:src},%{IPV4:dst}'
          PF_IPV6: '6,%{DATA:class},%{DATA:flow},%{DATA:hoplimit},%{WORD:protoname},%{NUMBER:protonum},{NUMBER:length},%{IPV6:src},%{IPV6:dst}'
          PF_UDP: '%{NUMBER:srcport},%{NUMBER:dstport},%{NUMBER:datalen}'
          PF_TCP: '%{NUMBER:srcport},%{NUMBER:dstport},%{NUMBER:datalen},%{WORD:flags},%{NUMBER:seq},%{DATA:ack},%{NUMBER:window},%{DATA:urg},%{WORD:options}'
          PF_CARP: '%{DATA:hoplimit},%{DATA:vhid},%{DATA:version},%{DATA:advskew},%{DATA:advbase}'
          PF_ICMP: '%{DATA:datalenght}'

  - name: set_ecs_fields
    stages:
      set_ecs_fields:
        actions:
          - set:
              source.ip: "{{parsed_event.message.src}}"
              destination.ip: "{{parsed_event.message.dst}}"
              rule.id: "{{parsed_event.message.rulenr}}"
              rule.description: "{{parsed_event.message.subrulenr}}"
              event.module: "{{parsed_event.message.anchorname}}"
              event.labels: "{{parsed_event.message.label}}"
              interface.name: "{{parsed_event.message.interface}}"
              event.reason: "{{parsed_event.message.reason}}"
              event.action: "{{parsed_event.message.action}}"
              network.direction: "{{parsed_event.message.dir}}"
              network.transport.tos: "{{parsed_event.message.tos}}"
              network.transport.ecn: "{{parsed_event.message.ecn}}"
              network.transport.ttl: "{{parsed_event.message.ttl}}"
              event.id: "{{parsed_event.message.id}}"
              event.offset: "{{parsed_event.message.offset}}"
              network.transport.flags: "{{parsed_event.message.flags}}"
              network.protocol: "{{parsed_event.message.protonum}}"
              network.transport: "{{parsed_event.message.protoname}}"
              network.bytes: "{{parsed_event.message.length}}"
              source.port: "{{parsed_event.message.srcport}}"
              destination.port: "{{parsed_event.message.dstport}}"
              event.dataset: "{{parsed_event.message.datalen}}"
              event.type: "{{parsed_event.message.flags}}"
              event.sequence: "{{parsed_event.message.seq}}"
              event.acknowledgement: "{{parsed_event.message.ack}}"
              event.window_size: "{{parsed_event.message.window}}"
              event.urgent: "{{parsed_event.message.urg}}"
              event.network.options: "{{parsed_event.message.option}}"
              event.classification: "{{parsed_event.message.class}}"
              opnsense.vhid: "{{parsed_event.message.vhid}}"
              event.version: "{{parsed_event.message.version}}"
              network.icmp.skew: "{{parsed_event.message.advskew}}"
              network.icmp.base: "{{parsed_event.message.advbase}}"
              opnsense.datalength: "{{parsed_event.message.datalenght}}"
              network.flow.id: "{{parsed_event.message.flow}}"

