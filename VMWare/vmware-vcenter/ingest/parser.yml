name: vmware-vcenter
pipeline:
  - name: parsed_event
    external:
      name: grok.match
      properties:
        input_field: "{{original.message}}"
        output_field: message
        pattern: "%{SESSION_TYPE_1}|%{SESSION_TYPE_2}|%{SESSION_TYPE_3}|%{SESSION_TYPE_4}|%{SESSION_TYPE_5}|%{SESSION_TYPE_6}|%{CONNECTIONS}|%{FAULT}|%{FAULT_TYPE_2}|%{HTTP_LOGS_1}|%{HTTP_LOGS_2}|%{OTHERS_EVENTS_TYPE_6}|%{OTHERS_EVENTS}|%{OTHERS_EVENTS_TYPE_2}|%{OTHERS_EVENTS_TYPE_3}|%{OTHERS_EVENTS_TYPE_5}|%{OTHERS_EVENTS_TYPE_7}"
        custom_patterns:
          SESSION_TYPE_1: 'Event \[%{INT:id}\] \[1-1\] \[%{TIMESTAMP_ISO8601:timestamp}\] \[%{DATA:event_code}\] \[%{DATA:log_level}\] \[%{DATA:source_user_name}\] \[%{HOSTNAME:hostname}\] \[%{INT}] \[Cannot login %{USERNAME:username}@%{IP:ip_address}\]'
          SESSION_TYPE_2: 'Event \[%{INT:id}\] \[1-1\] \[%{TIMESTAMP_ISO8601:timestamp}\] \[%{DATA:event_code}\] \[%{DATA:log_level}\] \[%{DATA}\] \[%{DATA}\] \[%{INT}\] \[User (%{DATA:source_user_domain}\\)?%{DATA:source_user_name}@%{IP:ip_address} logged in as %{DATA:username}\]'
          SESSION_TYPE_3: 'Event \[%{INT:id}\] \[1-1\] \[%{TIMESTAMP_ISO8601:timestamp}\] \[%{DATA:event_code}\] \[%{DATA:log_level}\] \[%{DATA}\] \[%{HOSTNAME:hostname}?\] \[%{INT}\] \[User (%{DATA:user_domain}\\)?%{DATA:username}@%{IP:ip_address} logged out \(login time: %{GREEDYDATA:login_time}, number of API invocations: %{INT:api_invocations}, user agent: %{GREEDYDATA:user_agent}\)\]'
          SESSION_TYPE_4: 'Event \[%{INT:id}\] \[1-1\] \[%{TIMESTAMP_ISO8601:timestamp}\] \[%{DATA:event_code}\] \[%{DATA:log_level}\] \[%{DATA}\] \[%{HOSTNAME:hostname}\] \[%{INT}\] \[SSH session was opened for %{DATA}%{USERNAME:username}@%{IP:ip_address}%{DATA}.\]'
          SESSION_TYPE_5: 'Event \[%{INT:id}\] \[1-1\] \[%{TIMESTAMP_ISO8601:timestamp}\] \[%{DATA:event_code}\] \[%{DATA:log_level}\] \[%{DATA}\] \[%{HOSTNAME:hostname}\] \[%{INT}\] \[SSH session was closed for %{DATA}%{USERNAME:username}@%{IP:ip_address}%{DATA}.\]'
          SESSION_TYPE_6: 'Event \[%{INT:id}\] \[1-1\] \[%{TIMESTAMP_ISO8601:timestamp}\] \[%{DATA:event_code}\] \[%{DATA:log_level}\] \[%{HOSTNAME:hostname}\] \[%{DATA}\] \[%{INT}\] \[User cannot logon since the user is %{GREEDYDATA:reason}\]'
          CONNECTIONS: 'Event \[%{INT:id}\] \[1-1\] \[%{TIMESTAMP_ISO8601:timestamp}\] \[%{DATA:event_code}\] \[%{DATA:log_level}\] \[%{DATA}\] \[%{HOSTNAME:hostname}] \[%{INT}\] \[Connected to %{DATA:source_address} in %{DATA}\]'
          FAULT: '%{TIMESTAMP_ISO8601:timestamp} %{DATA:log_level} %{DATA:process}\[%{DATA:pid}\] \[%{DATA:originator_info}\] %{GREEDYDATA:reason}; %{GREEDYDATA}\(Fault cause: %{DATA:event_code}\\n--> \)%{GREEDYDATA:context}\]'
          FAULT_TYPE_2: '%{TIMESTAMP_ISO8601:timestamp} %{DATA:log_level} %{DATA:process}\[%{DATA:pid}\] \[%{DATA:originator_info}\] %{GREEDYDATA:reason}: %{DATA:event_code}:%{GREEDYDATA} userName:\\\\n--> \\\"%{DATA:username}\\\"%{GREEDYDATA} \\\"%{DATA:locale}\\\"'
          HTTP_LOGS_1: '%{TIMESTAMP_ISO8601:timestamp} %{DATA:log_level} %{DATA:process}\[%{DATA:pid}\] \[%{DATA:originator_info}\] %{TIMESTAMP_ISO8601:datetime} %{DATA:http_method} %{URIPATH:url_path} HTTP/%{NUMBER:http_version} %{NUMBER:response_status} %{DATA:upstream_status} - %{NUMBER} %{NUMBER} %{NUMBER} %{NUMBER} %{NUMBER} %{IP:source_ip}:%{NUMBER:source_port} %{IP:destination_ip}:%{NUMBER:destination_port} %{IP:ip_address}:%{NUMBER:local_port1} %{IP:local_ip2}:%{NUMBER:local_port2}'
          HTTP_LOGS_2: '\[%{HTTPDATE:http_logs2_timestamp}\] %{DATA:thread} \[Request]\ %{IP:source_ip}:%{NUMBER:source_port} to local %{NUMBER:destination_port} - HTTP/%{NUMBER:http_version} %{DATA:http_method} %{URIPATH:url_path} %{DATA} %{NUMBER:response_status} - %{NUMBER:response_bytes} bytes %{DATA} process %{NUMBER:process_time}ms / commit %{NUMBER:commit_time}ms / conn \[%{DATA:conn_status}\]'
          OTHERS_EVENTS: '%{TIMESTAMP_ISO8601:timestamp} %{DATA:log_level} %{DATA:process}\[%{INT:pid}\] \[%{DATA}\] %{DATA} -- %{GREEDYDATA:reason}'
          OTHERS_EVENTS_TYPE_2: '%{TIMESTAMP_ISO8601:timestamp} \[%{DATA:thread}\] %{DATA:log_level} opId=%{DATA:operationID} %{DATA:process} - %{GREEDYDATA:reason}'
          OTHERS_EVENTS_TYPE_3: '%{TIMESTAMP_ISO8601:timestamp}: %{DATA}: \[%{GREEDYDATA:reason}\]'
          OTHERS_EVENTS_TYPE_5: '\[%{TIMESTAMP_ISO8601:timestamp}\] \[%{DATA:log_level} \] %{GREEDYDATA:reason}'
          OTHERS_EVENTS_TYPE_6: 'Event \[%{INT:id}\] \[1-1\] \[%{TIMESTAMP_ISO8601:timestamp}\] \[%{DATA:event_code}\] \[%{DATA:log_level}\] \[%{DATA}\] \[%{DATA}\] \[%{INT}\] \[A ticket for %{USERNAME:username} of type %{DATA} on %{IP:ip_address} in %{DATA} has been acquired\]'
          OTHERS_EVENTS_TYPE_7: 'Event \[%{INT:id}\] \[1-1\] \[%{TIMESTAMP_ISO8601:timestamp}\] \[%{DATA:event_code}\] \[%{DATA:log_level}\] \[%{DATA:source_user_name}?\] \[%{HOSTNAME:hostname}?\] \[%{INT}] \[%{GREEDYDATA:reason}\]'
  - name: parsed_date
    external:
      name: date.parse
      properties:
        input_field: "{{parsed_event.message.http_logs2_timestamp}}"
        output_field: datetime
        format: "%d/%b/%Y:%H:%M:%S %z"

  - name: set_ecs_fields
    filter: "{{parsed_event.message != None}}"

stages:
  set_ecs_fields:
    actions:
      - set:
          "@timestamp": "{{parsed_event.message.timestamp}}"
          user.name: "{{parsed_event.message.username}}"
          user.domain: "{{parsed_event.message.user_domain}}"
          source.ip: "{{parsed_event.message.source_ip}}"
          destination.ip: "{{parsed_event.message.destination_ip}}"
          source.user.name: "{{parsed_event.message.source_user_name}}"
          source.user.domain: "{{parsed_event.message.source_user_domain}}"
          user_agent.original: "{{parsed_event.message.user_agent}}"
          host.name: "{{parsed_event.message.hostname}}"
          event.reason: "{{parsed_event.message.reason}}"
          log.level: "{{parsed_event.message.log_level}}"
          http.request.method: "{{parsed_event.message.http_method}}"
          url.path: "{{parsed_event.message.url_path}}"
          http.response.status_code: "{{parsed_event.message.response_status}}"
          http.response.bytes: "{{parsed_event.message.response_bytes}}"
          vmware_vcenter.event_id: "{{parsed_event.message.id}}"
          event.code: "{{parsed_event.message.event_code}}"
          process.pid: "{{parsed_event.message.pid}}"
          process.name: "{{parsed_event.message.process}}"
          source.port: "{{parsed_event.message.source_port}}"
          http.version: "{{parsed_event.message.http_version}}"
          destination.port: "{{parsed_event.message.destination_port}}"
          source.address: "{{parsed_event.message.source_address}}"
          client.geo.country_iso_code: "{{parsed_event.message.locale}}"
          host.ip: "{{parsed_event.message.ip_address}}"
          vmware_vcenter.network.port: "{{parsed_event.message.local_port1}}"
          vmware_vcenter.login_time: "{{parsed_event.message.login_time}}"
          vmware_vcenter.api_invocations: "{{parsed_event.message.api_invocations}}"
          vmware_vcenter.datetime: "{{parsed_event.message.datetime}}"
          vmware_vcenter.upstream_status: "{{parsed_event.message.upstream_status}}"
          vmware_vcenter.host.ip2: "{{parsed_event.message.local_ip2}}"
          vmware_vcenter.network.port2: "{{parsed_event.message.local_port2}}"
          vmware_vcenter.conn_status: "{{parsed_event.message.conn_status}}"
          vmware_vcenter.commit_time: "{{parsed_event.message.commit_time}}"
          vmware_vcenter.thread: "{{parsed_event.message.thread}}"
          vmware_vcenter.operationID: "{{parsed_event.message.operationID}}"

      - set:
          "@timestamp": "{{parsed_date.datetime}}"
        filter: '{{parsed_date.get("datetime") != None}}'

      - set:
          process.end: "{{parsed_event.message.process_time}}"
        filter: "{{parsed_event.message.process_time > 0}}"

      - set:
          observer.vendor: "VMWare"
          observer.product: "VCenter"

      - translate:
        dictionary:
          vim.event.UserLoginSessionEvent: ["start"]
          vim.event.HostConnectedEvent: ["start"]
          vim.event.EventEx: ["info"]
          vim.event.BadUsernameSessionEvent: ["end"]
          vim.event.UserLogoutSessionEvent: ["end"]
          vim.event.AlreadyAuthenticatedSessionEvent: ["end"]
        mapping:
          parsed_event.message.event_code: event.type
        fallback: ["connection"]

      - translate:
        dictionary:
          vim.event.UserLoginSessionEvent: ["authentication"]
          vim.event.HostConnectedEvent: ["authentication"]
          vim.event.EventEx: ["authentication"]
          vim.event.BadUsernameSessionEvent: ["authentication"]
          vim.event.UserLogoutSessionEvent: ["authentication"]
          vim.event.AlreadyAuthenticatedSessionEvent: ["authentication"]
        mapping:
          parsed_event.message.event_code: event.category
        fallback: ["network"]
