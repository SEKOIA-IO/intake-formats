name: azure-ad
pipeline:
  - name: parsed_event
    external:
      name: json.parse-json

  - name: parsed_date
    external:
      name: date.parse
      properties:
        input_field: "{{parsed_event.message.time or parsed_event.message.createdDateTime}}"
        output_field: date

  - name: parsed_additional_info
    external:
      name: json.parse-json
      properties:
        input_field: "{{parsed_event.message.properties.additionalInfo}}"
        output_field: "message"
    filter: "{{ parsed_event.message.properties != null and parsed_event.message.properties.additionalInfo != null}}"

  - name: azuread
  - name: log_type_authentication
    filter: "{{parsed_event.message.properties.authenticationDetails != null}}"
  - name: log_type_auditlogs
    filter: '{{ parsed_event.message.properties != null and parsed_event.message.category == "AuditLogs" }}'
  - name: log_type_auditlogs_has_message_properties
    filter: '{{ parsed_event.message.properties != null and parsed_event.message.category == "AuditLogs" }}'
  - name: read_message_properties
    filter: "{{ parsed_event.message.properties != null }}"
  - name: read_message_properties_location_geoCoordinates
    filter: "{{ parsed_event.message.properties != null and parsed_event.message.properties.location != null }}"
  - name: read_device_details
    filter: "{{ parsed_event.message.deviceDetail != null }}"

stages:
  read_device_details:
    actions:
      - set:
          host.os.name: "{{ parsed_event.message.deviceDetail.operatingSystem }}"
          user_agent.name: "{{ parsed_event.message.deviceDetail.browser }}"

  read_message_properties:
    actions:
      - set:
          action.type: "{{parsed_event.message.properties.operationType |lower}}"
          event.reason: "{{ parsed_event.message.properties.riskType }}"
          error.code: "{{parsed_event.message.properties.status.errorCode}}"
          host.id: "{{parsed_event.message.properties.deviceDetail.deviceId}}"
          host.hostname: "{{parsed_event.message.properties.deviceDetail.displayName}}"
          host.os.type: "{{parsed_event.message.properties.deviceDetail.operatingSystem}}"
          error.message: "{{parsed_event.message.properties.status.additionalDetails or parsed_event.message.properties.status.failureReason}}"
          user.full_name: "{{ parsed_event.message.properties.userDisplayName }}"
          user.email: "{{ parsed_event.message.properties.userPrincipalName }}"
          user_agent.original: "{{ parsed_event.message.properties.userAgent }}"
          service.name: "{{ parsed_event.message.properties.resourceDisplayName }}"
          azuread.properties.id: "{{parsed_event.message.properties.id}}"
          azuread.properties.requestId: "{{parsed_event.message.properties.requestId}}"
          azuread.properties.correlationId: "{{parsed_event.message.properties.correlationId}}"
          azuread.properties.riskEventType: "{{parsed_event.message.properties.riskEventType}}"
          azuread.properties.riskState: "{{parsed_event.message.properties.riskState}}"
          azuread.properties.riskLevel: "{{parsed_event.message.properties.riskLevel}}"
          azuread.properties.riskDetail: "{{parsed_event.message.properties.riskDetail}}"
          azuread.properties.riskLevelAggregated: "{{parsed_event.message.properties.riskLevelAggregated}}"
          azuread.properties.riskLevelDuringSignIn: "{{parsed_event.message.properties.riskLevelDuringSignIn}}"
          azuread.properties.riskEventTypes: "{{parsed_event.message.properties.riskEventTypes}}"
          azuread.properties.riskEventTypes_v2: "{{parsed_event.message.properties.riskEventTypes_v2}}"
          azuread.properties.authenticationProtocol: "{{parsed_event.message.properties.authenticationProtocol}}"
          azuread.properties.appId: "{{parsed_event.message.properties.appId}}"
          azuread.properties.appDisplayName: "{{parsed_event.message.properties.appDisplayName}}"
          azuread.properties.source: "{{parsed_event.message.properties.source}}"
          azuread.properties.detectionTimingType: "{{parsed_event.message.properties.detectionTimingType}}"
          azuread.properties.status.errorCode: "{{parsed_event.message.properties.status.errorCode}}"
          azuread.properties.status.additionalDetails: "{{parsed_event.message.properties.status.additionalDetails}}"
          azuread.properties.status.failureReason: "{{parsed_event.message.properties.status.failureReason}}"
          azuread.properties.activity: "{{parsed_event.message.properties.activity}}"
          azuread.properties.deviceDetail.isCompliant: "{{parsed_event.message.properties.deviceDetail.isCompliant}}"
          azuread.properties.deviceDetail.isManaged: "{{parsed_event.message.properties.deviceDetail.isManaged}}"
          azuread.properties.deviceDetail.trustType: "{{parsed_event.message.properties.deviceDetail.trustType}}"
          azuread.properties.original_transfer_method: "{{parsed_event.message.properties.originalTransferMethod}}"
          azuread.properties.session_id: "{{parsed_event.message.properties.sessionId}}"
          azuread.properties.userPrincipalObjectID: "{{parsed_event.message.properties.UserPrincipalObjectID}}"
          azuread.properties.authenticationRequirement: "{{parsed_event.message.properties.authenticationRequirement}}"

      - set:
          azuread.properties.network_location.network_type: "{{(parsed_event.message.properties.networkLocationDetails | first).networkType}}"
          azuread.properties.network_location.network_names: "{{(parsed_event.message.properties.networkLocationDetails | first).networkNames}}"
        filter: "{{parsed_event.message.get('properties', {}).get('networkLocationDetails', []) | length > 0}}"

      - set:
          event.type: ["connection"]
        filter: '{{ parsed_event.message.properties.activity == "signin" }}'
      - set:
          event.reason: "{{parsed_event.message.properties.status.failureReason}}"
        filter: "{{ parsed_event.message.properties.status != null }}"

      - translate:
        dictionary:
          "SignInLogs": ["authentication"]
          "NonInteractiveUserSignInLogs": ["authentication"]
        mapping:
          parsed_event.message.category: event.category
        fallback: ["iam"]

  read_message_properties_location_geoCoordinates:
    actions:
      - set:
          source.geo.city_name: "{{ parsed_event.message.properties.location.city}}"
          source.geo.region_name: "{{ parsed_event.message.properties.location.state }}"

      - set:
          source.geo.location: '{ "lon": "{{parsed_event.message.properties.location.geoCoordinates.longitude}}","lat": "{{parsed_event.message.properties.location.geoCoordinates.latitude}}" }'
        filter: "{{ parsed_event.message.properties.location.geoCoordinates | length > 0 }}"

  azuread:
    actions:
      - set:
          "@timestamp": "{{parsed_date.date}}"
          service.type: "ldap"
          service.name: '{{ parsed_event.message.resourceDisplayName or "Azure Active Directory"}}'
          action.name: "{{parsed_event.message.operationName}}"
          event.action: "{{parsed_event.message.operationName}}"
          user.id: "{{ parsed_event.message.userId}}"
          user.name: "{{ parsed_event.message.userPrincipalName}}"
          user_agent.original: "{{ parsed_event.message.userAgent}}"
          log.level: "{{parsed_event.message.Level}}"
          http.request.method: "{{parsed_event.message.properties.requestMethod}}"
          http.response.status_code: "{{parsed_event.message.properties.responseStatusCode}}"
          url.original: "{{parsed_event.message.properties.requestUri}}"

      - set:
          azuread.properties.scopes: >
            [
            {% for scope in parsed_event.message.properties.scopes.split(" ") %}
              "{{scope}}",
            {% endfor %}
            ]
        filter: "{{parsed_event.message.properties.get('scopes') != None}}"

      - set:
          user.target.name: >
            {%- for item in parsed_event.message.properties.targetResources -%}
              {%- if item.type == "User" -%}{{ item.userPrincipalName }}{%- endif -%}
            {%- endfor -%}
          user.target.id: >
            {%- for item in parsed_event.message.properties.targetResources -%}
              {%- if item.type == "User" -%}{{ item.id }}{%- endif -%}
            {%- endfor -%}
        filter: "{{parsed_event.message.properties.targetResources | selectattr('type', 'equalto', 'User') | list | length == 1 and parsed_event.message.properties.targetResources | selectattr('type', 'equalto', 'User') | map(attribute = 'modifiedProperties') | list | first != [] }}"

      - set:
          user.target.group.name: >
            {%- for item in parsed_event.message.properties.targetResources -%}
              {%- if item.type == "Group" -%}{{ item.displayName }}{%- endif -%}
            {%- endfor -%}
          user.target.group.id: >
            {%- for item in parsed_event.message.properties.targetResources -%}
              {%- if item.type == "Group" -%}{{ item.id }}{%- endif -%}
            {%- endfor -%}
        filter: "{{parsed_event.message.properties.targetResources | selectattr('type', 'equalto', 'Group') | list | length == 1 and parsed_event.message.properties.targetResources | selectattr('type', 'equalto', 'Group') | map(attribute = 'modifiedProperties') | list | first != [] }}"

      - set:
          user.target.group.id: >
            {%- set properties = parsed_event.message.properties.targetResources | selectattr('type', 'equalto', 'User') | map(attribute = 'modifiedProperties') | list | first -%}
            {%- for prop in properties -%}
              {%- if prop.displayName == 'Group.ObjectID' -%}{{prop.oldValue | from_json or "null"}}{%- endif -%}
            {%- endfor -%}
          user.changes.group.id: >
            {%- set properties = parsed_event.message.properties.targetResources | selectattr('type', 'equalto', 'User') | map(attribute = 'modifiedProperties') | list | first -%}
            {%- for prop in properties -%}
              {%- if prop.displayName == 'Group.ObjectID' -%}{{prop.newValue | from_json or "null"}}{%- endif -%}
            {%- endfor -%}
          user.target.group.name: >
            {%- set properties = parsed_event.message.properties.targetResources | selectattr('type', 'equalto', 'User') | map(attribute = 'modifiedProperties') | list | first -%}
            {%- for prop in properties -%}
              {%- if prop.displayName == 'Group.DisplayName' -%}{{prop.oldValue | from_json or "null"}}{%- endif -%}
            {%- endfor -%}
          user.changes.group.name: >
            {%- set properties = parsed_event.message.properties.targetResources | selectattr('type', 'equalto', 'User') | map(attribute = 'modifiedProperties') | list | first -%}
            {%- for prop in properties -%}
              {%- if prop.displayName == 'Group.DisplayName' -%}{{prop.newValue | from_json or "null"}}{%- endif -%}
            {%- endfor -%}

      - set:
          source.ip: "{{parsed_event.message.ipAddress}}"
        filter: "{{parsed_event.message.ipAddress | is_ipaddress}}"

      - set:
          azuread.resourceId: "{{parsed_event.message.resourceId}}"
          azuread.operationName: "{{parsed_event.message.operationName}}"
          azuread.operationVersion: "{{parsed_event.message.operationVersion}}"
          azuread.category: "{{parsed_event.message.category}}"
          azuread.tenantId: "{{parsed_event.message.tenantId}}"
          azuread.resultSignature: "{{parsed_event.message.resultSignature}}"
          azuread.durationMs: "{{parsed_event.message.durationMs}}"
          azuread.correlationId: "{{parsed_event.message.correlationId}}"
          azuread.identity: "{{parsed_event.message.identity}}"

          azuread.activityDateTime: "{{parsed_event.message.activityDateTime}}"
          azuread.detectedDateTime: "{{parsed_event.message.detectedDateTime}}"
          azuread.lastUpdatedDateTime: "{{parsed_event.message.lastUpdatedDateTime}}"
          azuread.additionalInfo: "{{parsed_event.message.additionalInfo}}"
          azuread.tokenIssuerType: "{{parsed_event.message.tokenIssuerType}}"
          azuread.resourceTenantId: "{{parsed_event.message.resourceTenantId}}"
          azuread.homeTenantId: "{{parsed_event.message.homeTenantId}}"
          azuread.userType: "{{parsed_event.message.userType}}"
          azuread.crossTenantAccessType: "{{parsed_event.message.crossTenantAccessType}}"
          azuread.authenticationRequirementPolicies: "{{parsed_event.message.authenticationRequirementPolicies}}"
          azuread.authenticationRequirement: "{{parsed_event.message.authenticationRequirement}}"
          azuread.servicePrincipalId: "{{parsed_event.message.servicePrincipalId}}"
          azuread.flaggedForReview: "{{parsed_event.message.flaggedForReview}}"
          azuread.isTenantRestricted: "{{parsed_event.message.isTenantRestricted}}"
          azuread.autonomousSystemNumber: "{{parsed_event.message.autonomousSystemNumber}}"
          azuread.privateLinkDetails: "{{parsed_event.message.privateLinkDetails}}"
          azuread.ssoExtensionVersion: "{{parsed_event.message.ssoExtensionVersion}}"
          azuread.uniqueTokenIdentifier: "{{parsed_event.message.uniqueTokenIdentifier}}"
          azuread.incomingTokenType: "{{parsed_event.message.incomingTokenType}}"
          azuread.authenticationProtocol: "{{parsed_event.message.authenticationProtocol}}"

      - set:
          action.target: "user"
        filter: "{{parsed_event.message.userId != null}}"

      - set:
          source.ip: "{{parsed_event.message.callerIpAddress}}"
        filter: "{{parsed_event.message.callerIpAddress | is_ipaddress}}"

      - set:
          azuread.callerIpAddress: "{{parsed_event.message.callerIpAddress}}"
        filter: "{{parsed_event.message.callerIpAddress | is_ipaddress}}"

      - set:
          user_agent.original: >
            {%- for item in parsed_additional_info.message -%}
              {%- if item.Key == 'userAgent' -%}{{ item.Value }}{%- endif -%}
            {%- endfor -%}

          azuread.properties.riskReasons: >
            {%- for item in parsed_additional_info.message -%}
              {%- if item.Key == 'riskReasons' -%}{{ item.Value }}{%- endif -%}
            {%- endfor -%}

  log_type_auditlogs_has_message_properties:
    actions:
      - set:
          action.outcome: "{{parsed_event.message.properties.result}}"
      - set:
          action.outcome_reason: "{{parsed_event.message.properties.resultReason}}"
          event.reason: "{{parsed_event.message.properties.resultReason}}"
        filter: "{{parsed_event.message.properties.result == 'failure'}}"
      - set:
          user.id: "{{ parsed_event.message.properties.initiatedBy.user.id}}"
          user.name: "{{ parsed_event.message.properties.initiatedBy.user.userPrincipalName}}"
          action.target: "user"
        filter: "{{parsed_event.message.properties.initiatedBy.user != null}}"

      - set:
          user.id: "{{ parsed_event.message.properties.initiatedBy.app.servicePrincipalId}}"
          user.name: "{{ parsed_event.message.properties.initiatedBy.app.displayName}}"
          action.target: "user"
        filter: "{{parsed_event.message.properties.initiatedBy.app != null}}"

  log_type_auditlogs:
    actions:
      - set:
          action.properties: >
            [
            {%- for targetResource in parsed_event.message.properties.targetResources -%}
              {%- if targetResource.modifiedProperties != null -%}
                {%- for modifiedProperty in targetResource.modifiedProperties -%}
                  {%- if modifiedProperty.displayName != "Included Updated Properties"-%}
                    {'name': '{{modifiedProperty.displayName or Null}}', 'newValue': '{{modifiedProperty.newValue or Null}}', 'oldValue': '{{modifiedProperty.oldValue or ""}}'},
                  {%- endif -%}
                {%- endfor -%}
              {%- endif -%}
              {%- if targetResource.type == "User" -%}
                {'name': '{{targetResource.userPrincipalName | lower }}', 'id': '{{targetResource.id}}', 'type': 'targetedUser'},
              {%- endif -%}
            {%- endfor -%}
            ]
        filter: "{{parsed_event.message.properties.targetResources != [] }}"

      - set:
          azuread.properties.targetUserPrincipalName: "{{parsed_event.message.properties.targetResources[0].userPrincipalName}}"
          azuread.properties.targetUserDisplayName: "{{parsed_event.message.properties.targetResources[0].displayName}}"
        filter: '{{ parsed_event.message.properties.targetResources|length == 1 and parsed_event.message.properties.targetResources[0].type == "User"}}'
      - set:
          azuread.properties.targetDevicePrincipalName: "{{parsed_event.message.properties.targetResources[0].devicePrincipalName}}"
          azuread.properties.targetDeviceDisplayName: "{{parsed_event.message.properties.targetResources[0].displayName}}"
        filter: '{{ parsed_event.message.properties.targetResources|length == 1 and parsed_event.message.properties.targetResources[0].type == "Device"}}'

      - set:
          action.properties: []
        filter: "{{ parsed_event.message.properties.targetResources == [] }}"

  log_type_authentication:
    actions:
      - set:
          event.category: ["authentication"]
          event.type: ["start"]
          azuread.authenticationDetails: "{{parsed_event.message.properties.authenticationDetails}}"
          user.id: "{{ parsed_event.message.properties.userId}}"
      - set:
          action.outcome: "success"
        filter: "{{ parsed_event.message.properties.status.errorCode == 0 }}"
      - set:
          action.outcome: "failure"
        filter: "{{ parsed_event.message.properties.status.errorCode != 0 }}"

      - set:
          azuread.properties.conditionalAccessStatus: "{{ parsed_event.message.properties.conditionalAccessStatus }}"
