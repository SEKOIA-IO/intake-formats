name: retarus email security
pipeline:
  - name: json_event
    external:
      name: json.parse-json
  - name: parse_sender
    external:
      name: grok.match
      properties:
        raise_errors: false
        input_field: json_event.message.sender
        output_field: sender
        pattern: "^%{GREEDYDATA:username}@%{GREEDYDATA:domain}$"
    filter: "{{json_event.message.sender != null and json_event.message.sender != ''}}"
  - name: parse_recipient
    external:
      name: grok.match
      properties:
        raise_errors: false
        input_field: json_event.message.recipient
        output_field: recipient
        pattern: "^%{GREEDYDATA:username}@%{GREEDYDATA:domain}$"
    filter: "{{json_event.message.recipient != null}}"
  - name: field_extraction
  - name: hash_extraction
    filter: "{{final.retarus.class == 'THREAT'}}"
stages:
  field_extraction:
    actions:
      - set:
          event.category: ["email"]
          event.type: ["info"]

      - set:
          observer.vendor: "Retarus"
          observer.product: "Email Security"
          observer.version: "{{json_event.message.version}}"
          observer.hostname: "{{json_event.message.host}}"

          organization.id: "{{json_event.message.customer}}"
          source.domain: "{{parse_sender.sender.domain}}"
          destination.domain: "{{parse_recipient.recipient.domain}}"

          "retarus.spf.status": "{{json_event.message.metaData.authentication.spf.status}}"
          "retarus.spf.record": "{{json_event.message.metaData.authentication.spf.dns}}"
          "retarus.dkim.result": "{{json_event.message.metaData.authentication.dkim.details}}"

          email.from.address: ["{{json_event.message.metaData.header.from}}"]
          email.sender.address: ["{{json_event.message.recipient}}"]
          email.subject: "{{json_event.message.metaData.header.subject}}"

          retarus.timestamp: "{{json_event.message.ts}}"
          retarus.email_direction: "{{json_event.message.direction}}"
          retarus.mime_message_id: "{{json_event.message.mimeId}}"
          retarus.message_id: "{{json_event.message.rmxId}}"
          retarus.recipient: "{{json_event.message.recipient}}"
          retarus.sender: "{{json_event.message.sender}}"
          retarus.status: "{{json_event.message.status}}"
          retarus.class: "{{json_event.message.class}}"
          retarus.type: "{{json_event.message.type}}"

      - set:
          source.ip: "{{json_event.message.sourceIp}}"
        filter: "{{json_event.message.sourceIp| is_ipaddress}}"

      - set:
          action.name: "EVENT"
          action.outcome: "success"
          action.outcome_reason: "ACCEPTED"
        filter: "{{json_event.message.class == 'EVENT'  and json_event.message.type == 'MTA' }}"

      - set:
          event.kind: "alert"
          action.name: "THREAT"
          action.outcome: "failure"
          action.outcome_reason: "{{retarus.status}}"
        filter: "{{json_event.message.class == 'THREAT'}}"

      - set:
          event.category: ["malware"]
          event.type: ["info"]
          retarus.virus_name: "{{json_event.message.metaData.details}}"
        filter: "{{json_event.message.type == 'MultiScan'}}"

      - set:
          event.category: ["malware"]
          event.type: ["info"]
        filter: "{{json_event.message.type == 'Sandboxing'}}"

      - set:
          event.category: ["malware"]
          event.type: ["info"]
        filter: "{{json_event.message.type == 'CxO'}}"

      - set:
          event.category: ["web"]
          event.type: ["info"]
          url.full: "{{json_event.message.metaData.uniformResourceLocator}}"
          retarus.phishing_identifier: "{{json_event.message.metaData.details}}"
        filter: "{{json_event.message.type == 'PZD' and json_event.message.metaData.threatType == 'URL'}}"

      - set:
          event.category: ["malware"]
          event.type: ["info"]
          file.mimeType: "{{json_event.message.metaData.mimeType}}"
          retarus.virus_name: "{{json_event.message.metaData.details}}"
        filter: "{{json_event.message.type == 'PZD' and json_event.message.metaData.threatType == 'VIRUS'}}"

  hash_extraction:
    actions:
      - set:
          file.hash.sha1: "{{json_event.message.metaData.hashFunction}}"
        filter: "{{json_event.message.metaData.hashFunction == 'sha1'}}"
      - set:
          file.hash.sha256: "{{json_event.message.metaData.hashFunction}}"
        filter: "{{json_event.message.metaData.hashFunction == 'sha256'}}"
      - set:
          file.hash.sha512: "{{json_event.message.metaData.hashFunction}}"
        filter: "{{json_event.message.metaData.hashFunction == 'sha512'}}"
      - set:
          file.hash.md5: "{{json_event.message.metaData.hashFunction}}"
        filter: "{{json_event.message.metaData.hashFunction == 'md5'}}"
      - set:
          file.hash.ssdeep: "{{json_event.message.metaData.hashFunction}}"
        filter: "{{json_event.message.metaData.hashFunction == 'ssdeep'}}"
