{
  "input": {
    "message": "{\"time\": \"2024-10-22T15:10:32.7309209Z\", \"tenantId\": \"793abec2-9e48-4d04-b341-59b054c49348\", \"operationName\": \"Publish\", \"category\": \"AdvancedHunting-DeviceEvents\", \"_TimeReceivedBySvc\": \"2024-10-22T15:09:55.6358865Z\", \"properties\": {\"DeviceId\": \"a94a8fe5ccb19ba61c4c0873d391e987982fbbd3\", \"DeviceName\": \"computer.intranet.example\", \"ReportId\": 67420, \"InitiatingProcessId\": 423638, \"InitiatingProcessCreationTime\": \"2024-10-22T15:09:47.165481Z\", \"InitiatingProcessCommandLine\": null, \"InitiatingProcessParentFileName\": null, \"InitiatingProcessParentId\": 0, \"InitiatingProcessParentCreationTime\": null, \"InitiatingProcessSHA1\": null, \"InitiatingProcessMD5\": null, \"InitiatingProcessFileName\": null, \"InitiatingProcessFolderPath\": null, \"InitiatingProcessAccountName\": null, \"InitiatingProcessAccountDomain\": null, \"SHA1\": null, \"MD5\": null, \"FileName\": null, \"FolderPath\": null, \"AccountName\": null, \"AccountDomain\": null, \"AdditionalFields\": \"{\\\"ScriptContent\\\":\\\"# sudo python3 open_files.py --ScriptName open_files.py --id log4j_handlersV2 --filter-env LOG4J_FORMAT_MSG_NO_LOOKUPS=true --filter-name \\\\\\\"log4j,LOG4J,spring-core\\\\\\\" --filter-command \\\\\\\"java,javaw\\\\\\\" --manifest-path \\\\\\\"META-INF/maven/org.apache.logging.log4j/log4j-core/pom.properties\\\\\\\" --marker-path /var/opt/microsoft/mdatp/wdavedr/log4jMitigationApplied --collect-dirlist /log4j/core/lookup/JndiLookup.class,log4j-,spring-core-\\\\n# sudo python2 open_files.py --ScriptName open_files.py --id log4j_handlersV2 --filter-env LOG4J_FORMAT_MSG_NO_LOOKUPS=true --filter-name \\\\\\\"log4j,LOG4J,spring-core\\\\\\\" --filter-command \\\\\\\"java,javaw\\\\\\\" --manifest-path \\\\\\\"META-INF/maven/org.apache.logging.log4j/log4j-core/pom.properties\\\\\\\" --marker-path /var/opt/microsoft/mdatp/wdavedr/log4jMitigationApplied --collect-dirlist /log4j/core/lookup/JndiLookup.class,log4j-,spring-core-\\\\n# sudo rm /opt/microsoft/mdatp/resources/cache/log4j_handlersV2.json \\\\n\\\\nfrom genericpath import isdir\\\\nimport os\\\\nimport re\\\\nimport sys\\\\nimport json\\\\nfrom datetime import datetime as dt\\\\nimport zipfile\\\\nimport string\\\\nimport argparse\\\\nimport traceback\\\\nimport functools\\\\nimport itertools\\\\nimport subprocess as sb\\\\n\\\\nMAX_FILE_SIZE = 1024 * 1024  # 1MB\\\\nMANIFEST_OLD_PATH = \\\\\\\"META-INF/MANIFEST.MF\\\\\\\"\\\\n\\\\ndef take(n, l):\\\\n    for i, item in enumerate(l):\\\\n        if i > n:\\\\n            break\\\\n        yield item\\\\n\\\\nclass Jar:\\\\n    def __init__(self, path):\\\\n        self.path = path\\\\n        self._manifest = {}\\\\n        self._dirlist = []\\\\n\\\\n    def _parse_manifest(self, lines):\\\\n        version_indication = \\\\\\\"version=\\\\\\\"\\\\n        version_lines = [line for line in lines if line.startswith(version_indication)]\\\\n\\\\n        if len(version_lines) > 0:\\\\n            version = version_lines[0][len(version_indication):]\\\\n            yield 'Version', version.strip()\\\\n\\\\n        field_names = ['Specification-Version', 'Specification-Title', 'Specification-Vendor', 'Implementation-Version', 'Implementation-Title', 'Implementation-Vendor']\\\\n        for line in lines:\\\\n            if any(line.startswith(field_name) for field_name in field_names):\\\\n                    key, value = line.split(':')\\\\n                    yield key.strip(), value.strip()\\\\n\\\\n    def _open(self):\\\\n        if not zipfile.is_zipfile(self.path):\\\\n            raise ValueError(\\\\\\\"path is not a zip file: {}\\\\\\\".format(self.path))\\\\n        return zipfile.ZipFile(self.path)\\\\n\\\\n    def _read_dirlist(self):\\\\n        with self._open() as zf:\\\\n            filenames = dict(p for p in zf.namelist())\\\\n            return [f for f in filenames if any(r.search(f.lower()) for r in args.dirlist)]\\\\n\\\\n\\\\n\\\\n    def _get_manifest_path(self, zf):\\\\n        for path in [args.manifest_path, MANIFEST_OLD_PATH]:\\\\n            if path in zf.namelist():\\\\n                return path\\\\n\\\\n    def _read_manifest(self, throw_on_error=False):\\\\n        try:\\\\n            with self._open() as zf:\\\\n                manifest_path = self._get_manifest_path(zf)\\\\n                if not manifest_path:\\\\n                    # Not found manifest file\\\\n                    return {}\\\\n\\\\n                manifest_info = zf.getinfo(manifest_path)\\\\n                if manifest_info.file_size > MAX_FILE_SIZE:\\\\n                    raise IOError(\\\\\\\"manifest file is too big\\\\\\\")\\\\n\\\\n                with zf.open(manifest_path) as f:\\\\n                    readline_f = functools.partial(f.readline, MAX_FILE_SIZE)\\\\n                    manifest_lines = list(x.decode().strip() for x in iter(readline_f, b''))\\\\n                    manifest = self._parse_manifest(manifest_lines)\\\\n                    return dict((k, v) for k, v in manifest\\\\n                            if not args.manifest_keys or any(m.search(k.lower()) for m in args.manifest_keys))\\\\n        except:\\\\n            sys.stderr.write(\\\\\\\"error while reading manifest of '{}': {}\\\\\\\\n\\\\\\\".format(self.path, traceback.format_exc()))\\\\n\\\\n            if throw_on_error:\\\\n                raise\\\\n\\\\n            return {}\\\\n\\\\n    def manifest(self, throw_on_error=False):\\\\n        if not self._manifest:\\\\n            self._manifest = self._read_manifest(throw_on_error)\\\\n        return self._\\\"}\", \"InitiatingProcessAccountSid\": null, \"AppGuardContainerId\": null, \"InitiatingProcessSHA256\": null, \"SHA256\": \"9f86d081884c7d659a2feaa0c55ad015a3bf4f1b2b0b822cd15d6c15b0f00a08\", \"RemoteUrl\": null, \"ProcessCreationTime\": null, \"ProcessTokenElevation\": null, \"ActionType\": \"ScriptContent\", \"FileOriginUrl\": null, \"FileOriginIP\": null, \"InitiatingProcessLogonId\": 0, \"AccountSid\": null, \"RemoteDeviceName\": null, \"RegistryKey\": null, \"RegistryValueName\": null, \"RegistryValueData\": null, \"LogonId\": null, \"LocalIP\": null, \"LocalPort\": null, \"RemoteIP\": null, \"RemotePort\": null, \"ProcessId\": null, \"ProcessCommandLine\": null, \"InitiatingProcessAccountUpn\": null, \"InitiatingProcessAccountObjectId\": null, \"FileSize\": null, \"InitiatingProcessFileSize\": null, \"InitiatingProcessVersionInfoCompanyName\": null, \"InitiatingProcessVersionInfoProductName\": null, \"InitiatingProcessVersionInfoProductVersion\": null, \"InitiatingProcessVersionInfoInternalFileName\": null, \"InitiatingProcessVersionInfoOriginalFileName\": null, \"InitiatingProcessVersionInfoFileDescription\": null, \"InitiatingProcessSessionId\": null, \"IsInitiatingProcessRemoteSession\": false, \"InitiatingProcessRemoteSessionDeviceName\": null, \"InitiatingProcessRemoteSessionIP\": null, \"CreatedProcessSessionId\": null, \"IsProcessRemoteSession\": false, \"ProcessRemoteSessionDeviceName\": null, \"ProcessRemoteSessionIP\": null, \"Timestamp\": \"2024-10-22T15:09:47.246794Z\", \"MachineGroup\": \"Linux Servers - remediate threats automatically\"}, \"Tenant\": \"DefaultTenant\"}"
  },
  "expected": {
    "message": "{\"time\": \"2024-10-22T15:10:32.7309209Z\", \"tenantId\": \"793abec2-9e48-4d04-b341-59b054c49348\", \"operationName\": \"Publish\", \"category\": \"AdvancedHunting-DeviceEvents\", \"_TimeReceivedBySvc\": \"2024-10-22T15:09:55.6358865Z\", \"properties\": {\"DeviceId\": \"a94a8fe5ccb19ba61c4c0873d391e987982fbbd3\", \"DeviceName\": \"computer.intranet.example\", \"ReportId\": 67420, \"InitiatingProcessId\": 423638, \"InitiatingProcessCreationTime\": \"2024-10-22T15:09:47.165481Z\", \"InitiatingProcessCommandLine\": null, \"InitiatingProcessParentFileName\": null, \"InitiatingProcessParentId\": 0, \"InitiatingProcessParentCreationTime\": null, \"InitiatingProcessSHA1\": null, \"InitiatingProcessMD5\": null, \"InitiatingProcessFileName\": null, \"InitiatingProcessFolderPath\": null, \"InitiatingProcessAccountName\": null, \"InitiatingProcessAccountDomain\": null, \"SHA1\": null, \"MD5\": null, \"FileName\": null, \"FolderPath\": null, \"AccountName\": null, \"AccountDomain\": null, \"AdditionalFields\": \"{\\\"ScriptContent\\\":\\\"# sudo python3 open_files.py --ScriptName open_files.py --id log4j_handlersV2 --filter-env LOG4J_FORMAT_MSG_NO_LOOKUPS=true --filter-name \\\\\\\"log4j,LOG4J,spring-core\\\\\\\" --filter-command \\\\\\\"java,javaw\\\\\\\" --manifest-path \\\\\\\"META-INF/maven/org.apache.logging.log4j/log4j-core/pom.properties\\\\\\\" --marker-path /var/opt/microsoft/mdatp/wdavedr/log4jMitigationApplied --collect-dirlist /log4j/core/lookup/JndiLookup.class,log4j-,spring-core-\\\\n# sudo python2 open_files.py --ScriptName open_files.py --id log4j_handlersV2 --filter-env LOG4J_FORMAT_MSG_NO_LOOKUPS=true --filter-name \\\\\\\"log4j,LOG4J,spring-core\\\\\\\" --filter-command \\\\\\\"java,javaw\\\\\\\" --manifest-path \\\\\\\"META-INF/maven/org.apache.logging.log4j/log4j-core/pom.properties\\\\\\\" --marker-path /var/opt/microsoft/mdatp/wdavedr/log4jMitigationApplied --collect-dirlist /log4j/core/lookup/JndiLookup.class,log4j-,spring-core-\\\\n# sudo rm /opt/microsoft/mdatp/resources/cache/log4j_handlersV2.json \\\\n\\\\nfrom genericpath import isdir\\\\nimport os\\\\nimport re\\\\nimport sys\\\\nimport json\\\\nfrom datetime import datetime as dt\\\\nimport zipfile\\\\nimport string\\\\nimport argparse\\\\nimport traceback\\\\nimport functools\\\\nimport itertools\\\\nimport subprocess as sb\\\\n\\\\nMAX_FILE_SIZE = 1024 * 1024  # 1MB\\\\nMANIFEST_OLD_PATH = \\\\\\\"META-INF/MANIFEST.MF\\\\\\\"\\\\n\\\\ndef take(n, l):\\\\n    for i, item in enumerate(l):\\\\n        if i > n:\\\\n            break\\\\n        yield item\\\\n\\\\nclass Jar:\\\\n    def __init__(self, path):\\\\n        self.path = path\\\\n        self._manifest = {}\\\\n        self._dirlist = []\\\\n\\\\n    def _parse_manifest(self, lines):\\\\n        version_indication = \\\\\\\"version=\\\\\\\"\\\\n        version_lines = [line for line in lines if line.startswith(version_indication)]\\\\n\\\\n        if len(version_lines) > 0:\\\\n            version = version_lines[0][len(version_indication):]\\\\n            yield 'Version', version.strip()\\\\n\\\\n        field_names = ['Specification-Version', 'Specification-Title', 'Specification-Vendor', 'Implementation-Version', 'Implementation-Title', 'Implementation-Vendor']\\\\n        for line in lines:\\\\n            if any(line.startswith(field_name) for field_name in field_names):\\\\n                    key, value = line.split(':')\\\\n                    yield key.strip(), value.strip()\\\\n\\\\n    def _open(self):\\\\n        if not zipfile.is_zipfile(self.path):\\\\n            raise ValueError(\\\\\\\"path is not a zip file: {}\\\\\\\".format(self.path))\\\\n        return zipfile.ZipFile(self.path)\\\\n\\\\n    def _read_dirlist(self):\\\\n        with self._open() as zf:\\\\n            filenames = dict(p for p in zf.namelist())\\\\n            return [f for f in filenames if any(r.search(f.lower()) for r in args.dirlist)]\\\\n\\\\n\\\\n\\\\n    def _get_manifest_path(self, zf):\\\\n        for path in [args.manifest_path, MANIFEST_OLD_PATH]:\\\\n            if path in zf.namelist():\\\\n                return path\\\\n\\\\n    def _read_manifest(self, throw_on_error=False):\\\\n        try:\\\\n            with self._open() as zf:\\\\n                manifest_path = self._get_manifest_path(zf)\\\\n                if not manifest_path:\\\\n                    # Not found manifest file\\\\n                    return {}\\\\n\\\\n                manifest_info = zf.getinfo(manifest_path)\\\\n                if manifest_info.file_size > MAX_FILE_SIZE:\\\\n                    raise IOError(\\\\\\\"manifest file is too big\\\\\\\")\\\\n\\\\n                with zf.open(manifest_path) as f:\\\\n                    readline_f = functools.partial(f.readline, MAX_FILE_SIZE)\\\\n                    manifest_lines = list(x.decode().strip() for x in iter(readline_f, b''))\\\\n                    manifest = self._parse_manifest(manifest_lines)\\\\n                    return dict((k, v) for k, v in manifest\\\\n                            if not args.manifest_keys or any(m.search(k.lower()) for m in args.manifest_keys))\\\\n        except:\\\\n            sys.stderr.write(\\\\\\\"error while reading manifest of '{}': {}\\\\\\\\n\\\\\\\".format(self.path, traceback.format_exc()))\\\\n\\\\n            if throw_on_error:\\\\n                raise\\\\n\\\\n            return {}\\\\n\\\\n    def manifest(self, throw_on_error=False):\\\\n        if not self._manifest:\\\\n            self._manifest = self._read_manifest(throw_on_error)\\\\n        return self._\\\"}\", \"InitiatingProcessAccountSid\": null, \"AppGuardContainerId\": null, \"InitiatingProcessSHA256\": null, \"SHA256\": \"9f86d081884c7d659a2feaa0c55ad015a3bf4f1b2b0b822cd15d6c15b0f00a08\", \"RemoteUrl\": null, \"ProcessCreationTime\": null, \"ProcessTokenElevation\": null, \"ActionType\": \"ScriptContent\", \"FileOriginUrl\": null, \"FileOriginIP\": null, \"InitiatingProcessLogonId\": 0, \"AccountSid\": null, \"RemoteDeviceName\": null, \"RegistryKey\": null, \"RegistryValueName\": null, \"RegistryValueData\": null, \"LogonId\": null, \"LocalIP\": null, \"LocalPort\": null, \"RemoteIP\": null, \"RemotePort\": null, \"ProcessId\": null, \"ProcessCommandLine\": null, \"InitiatingProcessAccountUpn\": null, \"InitiatingProcessAccountObjectId\": null, \"FileSize\": null, \"InitiatingProcessFileSize\": null, \"InitiatingProcessVersionInfoCompanyName\": null, \"InitiatingProcessVersionInfoProductName\": null, \"InitiatingProcessVersionInfoProductVersion\": null, \"InitiatingProcessVersionInfoInternalFileName\": null, \"InitiatingProcessVersionInfoOriginalFileName\": null, \"InitiatingProcessVersionInfoFileDescription\": null, \"InitiatingProcessSessionId\": null, \"IsInitiatingProcessRemoteSession\": false, \"InitiatingProcessRemoteSessionDeviceName\": null, \"InitiatingProcessRemoteSessionIP\": null, \"CreatedProcessSessionId\": null, \"IsProcessRemoteSession\": false, \"ProcessRemoteSessionDeviceName\": null, \"ProcessRemoteSessionIP\": null, \"Timestamp\": \"2024-10-22T15:09:47.246794Z\", \"MachineGroup\": \"Linux Servers - remediate threats automatically\"}, \"Tenant\": \"DefaultTenant\"}",
    "event": {
      "category": [
        "host"
      ],
      "dataset": "device_events",
      "type": [
        "info"
      ]
    },
    "@timestamp": "2024-10-22T15:09:47.246794Z",
    "action": {
      "properties": {
        "InitiatingProcessLogonId": "0"
      },
      "type": "ScriptContent"
    },
    "file": {
      "hash": {
        "sha256": "9f86d081884c7d659a2feaa0c55ad015a3bf4f1b2b0b822cd15d6c15b0f00a08"
      }
    },
    "host": {
      "id": "a94a8fe5ccb19ba61c4c0873d391e987982fbbd3",
      "name": "computer.intranet.example"
    },
    "microsoft": {
      "defender": {
        "report": {
          "id": "67420"
        }
      }
    },
    "process": {
      "parent": {
        "pid": 0
      },
      "pid": 423638,
      "start": "2024-10-22T15:09:47.165481Z"
    },
    "related": {
      "hash": [
        "9f86d081884c7d659a2feaa0c55ad015a3bf4f1b2b0b822cd15d6c15b0f00a08"
      ]
    }
  }
}