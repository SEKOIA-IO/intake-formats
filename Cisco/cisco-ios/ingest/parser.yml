name: cisco-ios
pipeline:
  - name: parsed_event
    external:
      name: grok.match
      properties:
        pattern: "(?:%{HOSTNAME:hostname}: )?%{CISCO_HEADER}: %{DATA:description}"
        custom_patterns:
          CISCO_HEADER: "%{CISCO_DATESTAMP}: %{MSG_CODE}"
          CISCO_TIMESTAMP: "%{MONTH}\\s+%{MONTHDAY}( %{YEAR})? %{TIME}"
          CISCO_DATESTAMP: "%{CISCO_TIMESTAMP:date}( %{WORD:timezone})?"
          MSG_CODE: '\%%{WORD:facility}\-%{NONNEGINT:severity}\-%{WORD:mnemonic}'

  - name: parsed_description
    external:
      name: grok.match
      properties:
        raise_errors: false
        input_field: parsed_event.message.description
        pattern: "%{ACCTLOCAL}|%{BLOCK_BPDUGUARD}|%{CFGLOG_LOGGEDCMD}|%{CONFIG_I}|%{DHCP_SNOOPING}|%{DHCP_SNOOPING_MATCH_MAC_FAIL}|%{DMI_AUTH_FAILED}|%{DMI_AUTH_PASSED}|%{DUPADDR}|%{ERR_DISABLE}|%{LINEPROTO}|%{LINK}|%{MAB}|%{PORT_SECURITY}|%{PRIV_AUTH_FAIL}|%{PRIV_AUTH_PASS}|%{SEC_LOGIN}|%{SEC_VIOLATION}|%{SSH2_CLOSE}|%{SSH2_SESSION}|%{SSH2_USERAUTH}|%{SW_MATM_MACFLAP}|%{SYS_LOGIN_FAILURE}|%{SYS_LOGOUT}|%{SYS_TTY_EXPIRE_TIMER}|%{WEAK_PASSWORD_TYPE}"
        custom_patterns:
          ACCTLOCAL: "Username: %{USERNAME:username} Privilege level: %{NUMBER:priv_level} Command: %{GREEDYDATA:command_line}"
          BLOCK_BPDUGUARD: "Received BPDU from bridge %{DATA:source_mac_addr} on port %{NOTSPACE:ifname} with BPDU Guard enabled. Disabling port."
          CFGLOG_LOGGEDCMD: 'User:%{USERNAME:username}\s+logged command:%{GREEDYDATA:command_line}'
          CONFIG_I: 'Configured from console by %{DATA:username} on %{DATA:vty} \(%{IP:source_ip}\)'
          DHCP_SNOOPING: "DHCP_SNOOPING drop message on untrusted port, message type: %{DATA} sa: %{DATA:source_mac_addr}"
          DHCP_SNOOPING_MATCH_MAC_FAIL: "DHCP_SNOOPING drop message because the chaddr doesn't match source mac, message type: %{WORD:message_type}, chaddr: %{DATA:chaddr}, MAC sa: %{DATA:source_mac_addr}"
          DMI_AUTH_FAILED: "%{DATA:switch}: %{DATA:process_name}: Authentication failure from %{IP:source_ip}:%{NUMBER:source_port} for (?P<proto>%{DATA} over %{DATA})."
          DMI_AUTH_PASSED: "%{DATA:switch}: %{DATA:process_name}: User '%{DATA:username}' authenticated successfully from %{IP:source_ip}:%{NUMBER:source_port}\\s+for netconf over ssh. External groups: %{DATA}"
          DUPADDR: "Duplicate address %{IP:source_ip} on %{IFNAME_AND_VLAN:ifname}, sourced by %{DATA:source_mac_addr}"
          ERR_DISABLE: "%{DATA:error_type} error detected on %{NOTSPACE:ifname}, putting %{DATA} in %{DATA:ifstate} state"
          LINEPROTO: "Line protocol on Interface %{NOTSPACE:ifname}, changed state to %{WORD:ifstate}"
          LINK: "Interface %{NOTSPACE:ifname}, changed state to %{WORD:ifstate}"
          MAB: "Authentication failed for client (%{DATA}) on Interface %{NOTSPACE:ifname} AuditSessionID %{DATA:session_id}"
          PORT_SECURITY: "Security violation on port %{NOTSPACE:ifname} due to MAC address %{DATA:source_mac_addr} on VLAN %{NUMBER:vlan}"
          PRIV_AUTH_FAIL: 'Authentication to privilege level %{NUMBER:priv_level} failed by %{DATA:username} on %{DATA:vty} \(%{IP:source_ip}\)'
          PRIV_AUTH_PASS: 'Privilege level set to %{NUMBER:priv_level} by %{DATA:username} on %{DATA:vty} \(%{IP:source_ip}\)'
          SEC_VIOLATION: "Security violation occurred, caused by MAC address %{DATA:source_mac_addr} on port %{NOTSPACE:ifname}( attempting to access port %{DATA})?."
          SEC_LOGIN: 'Login (Success|failed) \[user: %{DATA:username}\] \[Source: %{IP:source_ip}\] \[localport: %{NUMBER:source_port}\]( \[Reason: %{DATA}\])? at %{TIME} %{TIMEZONE} %{DAY} %{MONTH} %{MONTHDAY} %{YEAR}'
          SSH2_CLOSE: '(SSH|SSH2) Session from %{IP:source_ip} \(?tty = %{NUMBER:tty}\)? for user ''%{DATA:username}'' using (crypto cipher )?''%{DATA:cypher}''(, hmac ''%{DATA:hmac}'')? closed'
          SSH2_USERAUTH: 'User ''%{DATA:username}'' authentication for SSH2 Session from %{IP:source_ip} \(tty = %{NUMBER:tty}\) using crypto cipher ''%{DATA:cypher}'', hmac ''%{DATA:hmac}'' Succeeded'
          SSH2_SESSION: 'SSH2 Session request from %{IP:source_ip} \(?tty = %{NUMBER:tty}\)? using crypto cipher ''%{DATA:cypher}'', hmac ''%{DATA:hmac}'' Succeeded'
          SYS_LOGIN_FAILURE: "Logging to host %{IP:destination_ip} port %{NUMBER:destination_port} failed"
          SYS_LOGOUT: 'User %{USERNAME:username} has exited tty session %{NUMBER:terminal}\(%{IP:source_ip}\)'
          SYS_TTY_EXPIRE_TIMER: '\(exec timer expired, tty %{NUMBER:terminal} \(%{IP:source_ip}\)\), user %{USERNAME:username}'
          SW_MATM_MACFLAP: "Host %{MAC:source_mac_addr} in vlan %{NUMBER:vlan} is flapping between port %{NOTSPACE:port1} and port %{NOTSPACE:port2}( %{DATA})?"
          WEAK_PASSWORD_TYPE: "(%{WORD}: )?Command has been added to the configuration using a type %{NUMBER:password_type} password. However, type %{NUMBER} passwords will soon be deprecated. Migrate to a supported password type"

          IFNAME_AND_VLAN: "Vlan%{NUMBER:vlan}|%{NOTSPACE}"
          TIMEZONE: '[A-Z0-9\+\-]+'

  - name: parsed_date
    external:
      name: date.parse
      properties:
        input_field: "{{parsed_event.message.date}}"
        output_field: date
        timezone: "{{parsed_event.message.timezone}}"

  - name: set_ecs_fields
  - name: set_cisco_fields

stages:
  set_ecs_fields:
    actions:
      - set:
          "@timestamp": "{{parsed_date.date}}"
          observer.vendor: "Cisco"
          observer.product: "ios"
          event.severity: "{{parsed_event.message.severity}}"
          event.code: "{{parsed_event.message.mnemonic}}"
          event.reason: "{{parsed_event.message.description}}"
          event.action: "{{parsed_description.message.ifstate}}"
          host.name: "{{parsed_event.message.hostname}}"
      - set:
          source.ip: "{{parsed_description.message.source_ip}}"
        filter: "{{parsed_description.message.source_ip | is_ipaddress}}"

      - set:
          source.mac: "{{parsed_description.message.source_mac_addr | to_mac_address}}"
          source.port: "{{parsed_description.message.source_port}}"

      - set:
          destination.ip: "{{parsed_description.message.destination_ip}}"
        filter: "{{parsed_description.message.destination_ip | is_ipaddress}}"

      - set:
          destination.port: "{{parsed_description.message.destination_port}}"
          user.name: "{{parsed_description.message.username}}"
          network.vlan.id: "{{parsed_description.message.vlan}}"
          process.name: "{{parsed_description.message.process_name}}"
          network.protocol: "{{parsed_description.message.proto}}"
          process.command_line: "{{parsed_description.message.command_line}}"

      - translate:
        dictionary:
          LOGIN_FAILED: ["authentication"]
          LOGIN_SUCCESS: ["authentication"]
          LOGOUT: ["authentication"]
          LOGGINGHOST_FAIL: ["authentication"]
          AUTHENTICATION_FAILED: ["authentication"]
          AUTH_PASSED: ["authentication"]
          PRIV_AUTH_FAIL: ["authentication"]
          CONFIG_I: ["configuration"]
          SSH2_CLOSE: ["session"]
          SSH2_USERAUTH: ["authentication"]
          SSH_CLOSE: ["session"]
          SSH2_SESSION: ["session"]
        mapping:
          parsed_event.message.mnemonic: event.category
        fallback: ["host"]

      - translate:
        dictionary:
          LOGIN_FAILED: ["start"]
          LOGIN_SUCCESS: ["start"]
          LOGOUT: ["end"]
          LOGGINGHOST_FAIL: ["end"]
          AUTHENTICATION_FAILED: ["start"]
          AUTH_PASSED: ["start"]
          PRIV_AUTH_FAIL: ["start"]
          SSH2_CLOSE: ["end"]
          SSH_CLOSE: ["end"]
        mapping:
          parsed_event.message.mnemonic: event.type
        fallback: ["info"]

      - translate:
        dictionary:
          LOGIN_FAILED: "failure"
          LOGIN_SUCCESS: "success"
          LOGOUT: "success"
          LOGGINGHOST_FAIL: "failure"
          AUTHENTICATION_FAILED: "failure"
          AUTH_PASSED: "success"
          PRIV_AUTH_FAIL: "failure"
        mapping:
          parsed_event.message.mnemonic: event.outcome

      - set:
          event.category: ["authentication"]
          event.type: ["start"]
          event.outcome: "failure"
        filter: "{{'Authentication failed' in parsed_event.message.description}}"

      - set:
          event.outcome: "success"
          event.type: ["start"]
        filter: "{{parsed_event.message.mnemonic == 'SSH2_USERAUTH' and 'Succeeded' in parsed_event.message.description}}"

  set_cisco_fields:
    actions:
      - set:
          cisco.ios.event.facility: "{{parsed_event.message.facility}}"
          cisco.ios.event.error_type: "{{parsed_description.message.error_type}}"
          cisco.ios.observer.interface.name: "{{parsed_description.message.ifname}}"
          cisco.ios.observer.terminal: "{{parsed_description.message.terminal}}"
          cisco.ios.privilege_level: "{{parsed_description.message.priv_level}}"
          cisco.ios.password_type: "{{parsed_description.message.password_type}}"
          cisco.ios.chaddr: "{{parsed_description.message.chaddr | to_mac_address}}"
      - set:
          cisco.ios.observer.interface.ports:
            - "{{parsed_description.message.port1}}"
            - "{{parsed_description.message.port2}}"
        filter: '{{parsed_description.message.get("port1") != None and parsed_description.message.get("port2") != None}}'
