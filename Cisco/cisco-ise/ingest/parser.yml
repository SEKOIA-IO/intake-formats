name: cisco-ise
pipeline:
  - name: pre_parsed_event
    external:
      name: grok.match
      properties:
        input_field: original.message
        output_field: pre_message
        pattern: "%{KV_MESSAGE_WIDTH_DATETIME}|%{KV_MESSAGE}|%{WITH_HEADER}"
        custom_patterns:
          KV_MESSAGE_WIDTH_DATETIME: "%{NUMBER} %{NUMBER} %{NUMBER} %{DATETIME} %{NUMBER} %{NUMBER} %{WORD:severity}\\s+%{GREEDYDATA:reason_with_kv}"
          KV_MESSAGE: "%{NUMBER} %{NUMBER} %{NUMBER}\\s+%{GREEDYDATA:reason_with_kv}"
          WITH_HEADER: "%{NOT_KV_DATA:status}:\\s+%{GREEDYDATA:reason_with_kv}"

          NOT_KV_DATA: "[^=]*?"
          DATETIME: "%{YEAR}-%{MONTHNUM}-%{MONTHDAY}[T ]%{HOUR}:?%{MINUTE}(?::?%{SECOND})? %{ISO8601_TIMEZONE}"

  - name: parsed_event
    external:
      name: grok.match
      properties:
        input_field: "{{pre_parsed_event.pre_message.reason_with_kv}}"
        output_field: message
        pattern: "%{REASON_ONLY:reason}|(%{PRE_REASON:reason}(\\s+%{GREEDYDATA:kv})?)|%{GREEDYDATA:kv}"
        custom_patterns:
          PRE_REASON: "(%{NOT_KV_DATA}: %{NOT_KV_DATA:reason},)|(%{NOT_KV_DATA:reason}:)|(%{NOT_KV_DATA:reason},)"
          REASON_ONLY: "%{NOT_KV_DATA}:: %{NOT_KV_DATA}"
          NOT_KV_DATA: "[^=]*?"

  - name: parsed_kv_sentence
    filter: '{{";" in parsed_event.message.kv and "Response={" not in parsed_event.message.kv}}'
    external:
      name: kv.parse-kv
      properties:
        input_field: "{{parsed_event.message.kv.strip()}}"
        output_field: result
        value_sep: "="
        item_sep: ';\s'

  - name: parsed_kv_sentence
    filter: '{{"=" in pre_parsed_event.pre_message.reason_with_kv and "," in pre_parsed_event.pre_message.reason_with_kv}}'
    external:
      name: kv.parse-kv
      properties:
        input_field: "{{parsed_event.message.kv.strip(' ,').replace(', ', ',')}}"
        output_field: result
        value_sep: "="
        item_sep: ","

  - name: grok_mac
    filter: '{{parsed_kv_sentence.result.get("NAS Identifier") != None and "Configuration" not in parsed_event.message.reason}}'
    external:
      name: grok.match
      properties:
        input_field: '{{parsed_kv_sentence.result.get("NAS Identifier")}}'
        output_field: address_mac
        pattern: "%{MAC:address}:%{GREEDYDATA:word}"

  - name: set_ecs_fields
  - name: set_configuration_fields
  - name: set_network_fields
  - name: set_miscellaneous_fields

stages:
  set_ecs_fields:
    actions:
      - set:
          observer.vendor: Cisco
          observer.product: "Cisco ISE"
          event.type: ["info"]

  set_configuration_fields:
    actions:
      - set:
          user.name: "{{parsed_kv_sentence.result.Admin}}"
        filter: "{{parsed_kv_sentence.result.get('Admin') != None and 'Configuration' in parsed_event.message.reason}}"
      - set:
          event.category: ["configuration"]
          event.type: ["change"]
          cisco.ise.config_object.name: '{{parsed_kv_sentence.result.get("Object Name")}}'
          cisco.ise.config_object.type: '{{parsed_kv_sentence.result.get("Object Type")}}'
          cisco.ise.config_action: '{{parsed_event.message.get("reason").split() | last}}'
        filter: '{{"Configuration" in parsed_event.message.reason }}'

  set_network_fields:
    actions:
      - set:
          event.category: ["network"]
          event.reason: '{{parsed_kv_sentence.result.get("Error Message") or parsed_kv_sentence.result.get("Failure Reason") or parsed_event.message.get("reason").strip()}}'
          cisco.ise.network_calling_station.id: '{{parsed_kv_sentence.result.get("Error Message")}}'
          user.name: '{{parsed_kv_sentence.result.get("AdminName") or parsed_kv_sentence.result.get("Device login username") or parsed_kv_sentence.result.get("Calling Station Id") or parsed_kv_sentence.result.get("UserName")}}'
          source.domain: '{{parsed_kv_sentence.result.get("Server") or parsed_kv_sentence.result.get("Device Name")}}'
          source.ip: '{{parsed_kv_sentence.result.get("AdminIPAddress") or parsed_kv_sentence.result.get("NAS IP Address") or parsed_kv_sentence.result.get("NAS-IP-Address") or parsed_kv_sentence.result.get("NAD Address") or parsed_kv_sentence.result.get("Device Ip") or parsed_kv_sentence.result.get("Network device IP") or parsed_kv_sentence.result.get("Device IP Address") or parsed_kv_sentence.result.get("EndpointIPAddress")}}'
          destination.ip: '{{parsed_kv_sentence.result.get("DestinationIPAddress")}}'
          destination.port: '{{parsed_kv_sentence.result.get("DestinationPort")}}'
          network.protocol: '{{parsed_kv_sentence.result.get("Protocol")}}'
        filter: '{{"Configuration" not in parsed_event.message.reason }}'

      - set:
          destination.domain: "{{parsed_kv_sentence.result.get('PeerName', '').replace('CN=', '') }}"
        filter: "{{parsed_kv_sentence.result.get('PeerName') != None}}"

      - set:
          source.mac: "{{grok_mac.address_mac.address | to_mac_address}}"
        filter: '{{grok_mac != None and grok_mac.get("address_mac", {}).get("address") != None}}'

      - set:
          source.mac: '{{parsed_kv_sentence.result.get("EndpointMacAddress") | to_mac_address}}'
        filter: '{{parsed_kv_sentence.result.get("EndpointMacAddress") != None}}'

      - set:
          destination.mac: '{{parsed_kv_sentence.result["Called-Station-ID"] | to_mac_address}}'
        filter: '{{parsed_kv_sentence.result.get("Called-Station-ID") != None }}'

      - set:
          destination.mac: '{{parsed_kv_sentence.result["PeerAddress"] | to_mac_address  }}'
        filter: '{{parsed_kv_sentence.result.get("PeerAddress") != None}}'

      - set:
          source.mac: "{{parsed_kv_sentence.result.get('EndPointMACAddress') | to_mac_address}}"
        filter: '{{parsed_kv_sentence.result.get("EndPointMACAddress") != None }}'

      - set:
          source.mac: '{{parsed_kv_sentence.result["Calling-Station-ID"] | to_mac_address}}'
        filter: '{{parsed_kv_sentence.result.get("Calling-Station-ID") != None }}'

      - set:
          destination.ip: '{{parsed_kv_sentence.result["Called-Station-ID"] }}'
        filter: '{{parsed_kv_sentence.result.get("Called-Station-ID") | is_ipaddress }}'

      - set:
          source.ip: '{{parsed_kv_sentence.result["Calling-Station-ID"]}}'
        filter: '{{parsed_kv_sentence.result.get("Calling-Station-ID") | is_ipaddress }}'

  set_miscellaneous_fields:
    actions:
      - set:
          event.reason: "{{parsed_event.message.reason.strip()}}"

      - set:
          event.reason: "{{parsed_kv_sentence.result.FailureReason}}"

      - set:
          event.reason: "{{pre_parsed_event.pre_message.reason_with_kv}}"
        filter: '{{":" not in pre_parsed_event.pre_message.reason_with_kv and "=" not in pre_parsed_event.pre_message.reason_with_kv}}'

      - set:
          event.reason: "{{parsed_event.message.kv}}"
        filter: '{{":" in parsed_event.message.kv and "=" not in parsed_event.message.kv}}'

      - set:
          event.reason: "{{parsed_kv_sentence.result.get('EapChainingResult')}}"
        filter: '{{parsed_kv_sentence.result.get("EapChainingResult") != None}}'

      - set:
          event.category: ["authentication"]
          user.name: "{{parsed_kv_sentence.result.get('AD-Account-Name')}}"
          user.domain: "{{parsed_kv_sentence.result.get('AD-Domain')}}"
        filter: "{{parsed_kv_sentence.result.get('AD-Log-Id') != None}}"

      - set:
          event.category: ["network"]
          event.reason: "{{parsed_kv_sentence.result.get('Response')}}"
        filter: "{{parsed_kv_sentence.result.get('Response') != None}}"

      - set:
          event.category: ["authentication"]
          event.outcome: >
            {%- if parsed_kv_sentence.result.get('AuthenticationStatus') == 'AuthenticationPassed' -%}
              success
            {%- else -%}
              failure
            {%- endif -%}
          source.mac: "{{parsed_kv_sentence.result.get('EndPointMACAddress')}}"
          user.name: "{{parsed_kv_sentence.result.get('EndPointMatchedProfile')}}"
        filter: '{{"Authentication" in parsed_kv_sentence.result.get("AuthenticationStatus")}}'

      - set:
          event.category: ["authentication"]
        filter: '{{parsed_kv_sentence.result.get("AuthenticationMethod") != None}}'

      - set:
          event.category: ["authentication"]
        filter: '{{parsed_kv_sentence.result.get("AKI") != None}}'

      - set:
          cisco.ise.event.outcome: "success"
        filter: "{{'success' in parsed_kv_sentence.result.get('MESSAGE', '')}}"

      - set:
          cisco.ise.event.outcome: "failure"
        filter: "{{'failure' in parsed_kv_sentence.result.get('MESSAGE', '')}}"

      - set:
          cisco.ise.dhcp.message_type: "{{parsed_kv_sentence.result.get('dhcp-message-type')}}"
          cisco.ise.dhcp.requested_address: "{{parsed_kv_sentence.result.get('dhcp-requested-address')}}"
          rule.id: "{{parsed_kv_sentence.result.get('EndPointPolicyID')}}"
          rule.name: "{{parsed_kv_sentence.result.get('EndpointPolicy')}}"
          host.os.full: "{{parsed_kv_sentence.result.get('AD-Operating-System')}}"
