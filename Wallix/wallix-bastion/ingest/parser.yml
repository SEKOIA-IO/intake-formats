name: wallix-bastion
pipeline:
  - name: parsed_event
    external:
      name: kv.parse-kv

  - name: set_extracted_fields
  - name: set_ecs_fields
  - name: set_provider
  - name: set_auditd
  - name: set_ip_fields

stages:
  set_ecs_fields:
    actions:
      - set:
          event.kind: 'event'

      - translate:
        dictionary:
          'sessionlog': 'authentication'
          'Backup/Restore': 'database'
        mapping:
          parsed_event.message.type: event.category

      - translate:
        dictionary:
          'authentify': 'authentication'
        mapping:
          parsed_event.message.action: event.category

      - translate:
        dictionary:
          'add': [ 'creation' ]
          'edit': [ 'change' ]
          'delete': [ 'deletion' ]
          'list': [ 'access' ]
        mapping:
          parsed_event.message.action: event.type


      - translate:
        dictionary:
          'failure': [ 'denied' ]
        mapping:
          parsed_event.message.status: event.type
        filter: '{{parsed_event.message.action == "authentify"}}'

      - set:
          event.type: ['end']
        filter: '{{parsed_event.message.infos.startswith("\"Closed")}}'

  set_extracted_fields:
    actions:
      - set:
          wallix: '{{ parsed_event.message}}'
          event.action: '{{ parsed_event.message.type}}'
          user.name: '{{ parsed_event.message.user}}'
          service.name: '{{ parsed_event.message.service}}'
          source.port: '{{parsed_event.message.src_port}}'
          event.reason: '{{ parsed_event.message.infos }}'

  set_auditd:
    actions:
      - set:
          user.name: '{{parsed_event.message.USER}}'
          process.command_line: '{{parsed_event.message.COMMAND}}'

  set_provider:
    actions:
      - set:
          event.provider: 'wabengine'
        filter: '{{original.message.startswith("[wabaudit]")}}'
      - set:
          event.provider: 'sshproxy'
        filter: '{{original.message.startswith("[sshproxy]") or original.message.startswith("[SSH Session]") }}'
      - set:
          event.provider: 'SSH Session'
        filter: '{{original.message.startswith("[SSH Session]")}}'
      - set:
          event.provider: 'cron'
        filter: '{{original.message.startswith("pam_unix(cron")}}'
      - set:
          event.provider: 'sudo'
        filter: '{{original.message.startswith("pam_unix(sudo")}}'
      - set:
          event.provider: 'sudo'
        filter: '{{original.message.startswith("root")}}'
      - set:
          event.provider: 'sshd'
        filter: '{{original.message.startswith("rexec")}}'
      - set:
          event.provider: 'sshd'
        filter: '{{original.message.startswith("rexec")}}'

  # We use a custom stage for IP fields
  # because Wallix can set things like target_ip="foo-bar-baz-foo.foobar.eu"
  set_ip_fields:
    actions:
      - set:
          host.ip: '{{parsed_event.message.device}}'
        filter: '{{ parsed_event.message.device | re_match("^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$") }}'

      - set:
          destination.ip: '{{ parsed_event.message.target_ip }}'
        filter: '{{parsed_event.message.target_ip | re_match("^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$")}}'

      - set:
          source.ip: '{{ parsed_event.message.client_ip }}'
        filter: '{{parsed_event.message.client_ip | re_match("^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$")}}'

      - set:
          source.ip: '{{ parsed_event.message.src_ip }}'
        filter: '{{parsed_event.message.src_ip | re_match("^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$")}}'
