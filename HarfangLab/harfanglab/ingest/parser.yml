name: harfanglab
pipeline:
  - name: json_event
    external:
      name: json.parse-json
      properties:
        input_field: "{{original.message}}"
  - name: agent_info

  - name: network_info
    filter: "{{json_event.message.log_type == 'network' or json_event.message.alert_subtype == 'network'}}"

  - name: process_info
    filter: "{{json_event.message.log_type == 'process'}}"

  - name: registry_info
    filter: '{{json_event.message.details_registry != null}}'

  - name: powershell_info
    filter: '{{json_event.message.details_powershell != null}}'

  - name: alert_info
    filter: "{{json_event.message.log_type == 'alert'}}"

  - name: alert_process_info
    filter: "{{json_event.message.alert_subtype == 'process'}}"

  - name: investigation_info
    filter: "{{json_event.message.log_type == 'investigation'}}"

  - name: eventlog_info
    filter: "{{json_event.message.log_type == 'eventlog'}}"

stages:

  agent_info:
    actions:
      - set:
          '@timestamp': "{{json_event.message.get('@event_create_date')}}"
          agent.id: "{{json_event.message.agent.agentid}}"
          agent.name: "harfanglab"
          log.hostname: "{{json_event.message.agent.hostname}}"
          host.hostname: "{{json_event.message.agent.hostname}}"
          host.domain: "{{json_event.message.agent.domainname}}"
          host.os.version: "{{json_event.message.agent.osversion}}"
          host.os.full: "{{json_event.message.agent.osproducttype}}"

  network_info:
    actions:
      - set:
          destination.ip: "{{json_event.message.daddr}}"
          destination.port: "{{json_event.message.dport}}"
          source.ip: "{{json_event.message.saddr}}"
          source.port: "{{json_event.message.sport}}"

          process.pid: "{{json_event.message.pid}}"
          process.executable: "{{json_event.message.image_name}}"
          user.name: "{{json_event.message.username}}"

          event.category: ["network"]
          event.type: ["connection"]
      - set:
          event.kind: "event"
        filter: "{{ json_event.message.log_type == 'network'}}"
      - set:
          event.kind: "alert"
        filter: "{{ json_event.message.log_type == 'alert'}}"


  process_info:
    actions:
      - set:
          process.command_line: "{{json_event.message.commandline}}"
          process.pid: "{{json_event.message.pid}}"
          process.name: "{{json_event.message.process_name}}"
          process.pe.description: "{{json_event.message.pe_info.file_description}}"
          process.pe.original_file_name: "{{json_event.message.pe_info.original_filename}}"
          process.pe.file_version: "{{json_event.message.pe_info.file_version}}"
          process.pe.company: "{{json_event.message.pe_info.company_name}}"
          process.pe.product: "{{json_event.message.pe_info.product_name}}"

          process.executable: "{{json_event.message.image_name}}"
          user.name: "{{json_event.message.username}}"

          process.parent.executable: "{{json_event.message.parent_image}}"
          process.parent.command_line: "{{json_event.message.parent_commandline}}"
          process.parent.name: '{{json_event.message.parent_image.split("\\") | last}}'
          process.working_directory: "{{json_event.message.current_directory}}"
          process.pe.imphash: "{{json_event.message.pe_imphash}}"

          event.category: ["process"]
          event.type: ["start"]
          event.kind: "event"
      - set:
          file.hash.md5: "{{json_event.message.hashes.md5}}"
          file.hash.sha256: "{{json_event.message.hashes.sha256}}"
          file.hash.sha1: "{{json_event.message.hashes.sha1}}"
        filter: '{{json_event.message.hashes != null}}'

  registry_info:
    actions:
      - set:
          registry.key: '{{json_event.message.details_registry.target_object.split("\\")[1:-1] | join("\\")}}'
          registry.hive: '{{json_event.message.details_registry.target_object.split("\\") | first}}'
          registry.path: '{{{{json_event.message.details_registry.target_object}}'
          registry.value: '{{json_event.message.details_registry.target_object.split("\\") | last }}'

  powershell_info:
    actions:
      - set:
          harfanglab.process.powershell.command: '{{json_event.message.details_powershell.PowershellCommand}}'

  alert_info:
    actions:
      - set:
          harfanglab.level: "{{json_event.message.level}}"
          rule.description: "{{json_event.message.msg}}"
          rule.name: "{{json_event.message.rule_name}}"
          rule.category: "{{json_event.message.alert_type}}"
          rule.id: "{{json_event.message.rule_id}}"
          harfanglab.alert_time: "{{json_event.message.alert_time}}"
          harfanglab.alert_unique_id: "{{json_event.message.alert_unique_id}}"
          harfanglab.alert_subtype: "{{json_event.message.alert_subtype}}"
          harfanglab.execution: "{{json_event.message.execution}}"
          harfanglab.status: "{{json_event.message.status}}"
          harfanglab.aggregation_key: '{{json_event.message.aggregation_key}}'

  alert_process_info:
    actions:
      - set:
          process.command_line: "{{json_event.message.process.commandline}}"
          process.pid: "{{json_event.message.process.pid}}"
          process.name: "{{json_event.message.process.process_name}}"
          process.pe.description: "{{json_event.message.process.pe_info.file_description}}"
          process.pe.original_file_name: "{{json_event.message.process.pe_info.original_filename}}"
          process.pe.file_version: "{{json_event.message.process.pe_info.file_version}}"
          process.pe.company: "{{json_event.message.process.pe_info.company_name}}"
          process.pe.product: "{{json_event.message.process.pe_info.product_name}}"

          process.executable: "{{json_event.message.process.image_name}}"
          user.name: "{{json_event.message.process.username}}"

          process.parent.executable: "{{json_event.message.process.parent_image}}"
          process.parent.command_line: "{{json_event.message.process.parent_commandline}}"
          process.working_directory: "{{json_event.message.process.current_directory}}"
          process.pe.imphash: "{{json_event.message.process.pe_imphash}}"

          event.category: ["process"]
          event.type: ["start"]
          event.kind: "alert"
      - set:
          file.hash.md5: "{{json_event.message.process.hashes.md5}}"
          file.hash.sha256: "{{json_event.message.process.hashes.sha256}}"
          file.hash.sha1: "{{json_event.message.process.hashes.sha1}}"
        filter: '{{json_event.message.process.hashes != null}}'

  investigation_info:
    actions:
      - set:
          event.kind: "event"
          event.type: ["info"]

          file.path: "{{json_event.message.binaryinfo.fullpath}}"
          file.name: "{{json_event.message.binaryinfo.filename}}"
          file.hash.md5: "{{json_event.message.binaryinfo.binaryinfo.md5}}"
          file.hash.sha1: "{{json_event.message.binaryinfo.binaryinfo.sha1}}"
          file.hash.sha256: "{{json_event.message.binaryinfo.binaryinfo.sha256}}"
          file.pe.description: "{{json_event.message.binaryinfo.binaryinfo.pe_file_description}}"
          file.pe.original_file_name: "{{json_event.message.binaryinfo.binaryinfo.pe_original_filename}}"
          file.pe.file_version: "{{json_event.message.binaryinfo.binaryinfo.pe_file_version}}"
          file.pe.company: "{{json_event.message.binaryinfo.binaryinfo.pe_company_name}}"
          file.pe.product: "{{json_event.message.binaryinfo.binaryinfo.pe_product_name}}"
          file.pe.imphash: "{{json_event.message.binaryinfo.binaryinfo.pe_imphash}}"

  eventlog_info:
    actions:
      - set:
          event.kind: "event"
          event.type: ["info"]
          event.provider: "{{json_event.message.source_name}}"
          event.code: "{{json_event.message.event_id|string}}"
          action.properties: '{ {% for name, value in json_event.message.event_data.items() %}{% if value != None %}"{{name.replace(" ","")}}": "{{value | replace("\n", "") | replace("\\", "\\\\")}}",{% endif %}{% endfor %} }'
          action.id: "{{json_event.message.event_id}}"
