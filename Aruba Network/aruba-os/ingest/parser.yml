name: aruba-os
pipeline:
  - name: parse_leef
    external:
      name: grok.match
      properties:
        pattern: "LEEF:%{NUMBER:version}\\|%{DATA:vendor}\\|%{DATA:product}\\|%{DATA:version}\\|%{INT:msg_id}\\|%{GREEDYDATA:message}"
    filter: '{{"LEEF:" in original.message}}'

  - name: parsed_leef_event
    external:
      name: kv.parse-kv
      properties:
        input_field: "parse_leef.message.message"
        value_sep: "="
        output_field: message
        groups: true
    filter: '{{"LEEF:" in original.message}}'

  - name: parsed_leef_date
    external:
      name: date.parse
      properties:
        input_field: "{{parsed_leef_event.message.devTime}}"
        output_field: date
    filter: "{{parsed_leef_event.message.devTime != None}}"

  - name: parse_message
    external:
      name: grok.match
      properties:
        pattern: "%{CLI}|%{SYSLOG}|%{DEFAULT}"
        custom_patterns:
          CLI: 'cli\[%{NUMBER}\]: <%{NUMBER:code}> <%{WORD}> %{DATA} <%{IP:src_ip} %{MAC:src_mac}>\s*%{GREEDYDATA:syslog_payload}'
          SYSLOG: '<%{NUMBER:code}> <%{NUMBER}> (<%{WORD}> )?<%{WORD} %{IP:src_ip}>\s*(%{WORD}:\s*)?\s*%{GREEDYDATA:syslog_payload}'
          DEFAULT: '%{DATA:prefix}\:\s*%{USERNAME:obs}\s*\:\s*%{GREEDYDATA:payload}\s*'
    filter: '{{"LEEF:" not in original.message}}'

  - name: parse_syslog_message
    external:
      name: grok.match
      properties:
        input_field: "parse_message.message.syslog_payload"
        pattern: "%{USER_INFO}|%{SRC_MAC}|%{FORMAT_133121}|%{KV_PART}"
        custom_patterns:
          FORMAT_133121: "%{DATA} to %{IP:dst_ip}(:%{NUMBER:dst_port})? with %{GREEDYDATA}"
          KV_PART: '%{DATA:payload}.\s*%{GREEDYDATA:kv_part}'
          USER_INFO: "User %{USERNAME:user_name}.*?"
          SRC_MAC: ".*?mac-%{MAC:src_mac}.*?"
    filter: "{{ parse_message.message.get('syslog_payload') != None }}"

  - name: syslog_parse_kv_part_message
    external:
      name: kv.parse-kv
      properties:
        input_field: "{{parse_syslog_message.message.kv_part}}"
        output_field: message
        value_sep: "="
        item_sep: \s
    filter: "{{ parse_syslog_message.message.get('kv_part') != None }}"

  - name: parse_auth_message
    external:
      name: grok.match
      properties:
        input_field: "parse_message.message.payload"
        pattern: ".*?User '%{USERNAME:user_name}'.*from %{IP:src_ip}.*"
    filter: "{{ parse_message.message.prefix.lower()  == 'auth' }}"

  - name: parse_mgr_message
    external:
      name: grok.match
      properties:
        input_field: "parse_message.message.payload"
        pattern: ".*?from %{IP:src_ip}.*"
    filter: "{{ parse_message.message.prefix.lower()  == 'mgr' }}"

  - name: parse_ssl_message
    external:
      name: grok.match
      properties:
        input_field: "parse_message.message.payload"
        pattern: ".*?from %{IP:src_ip}.*"
    filter: "{{ parse_message.message.prefix.lower()  == 'ssl' }}"

  - name: parse_sntp_message
    external:
      name: grok.match
      properties:
        input_field: "parse_message.message.payload"
        pattern: ".*?at %{IP:src_ip}.*"
    filter: "{{ parse_message.message.prefix.lower()  == 'sntp' }}"

  - name: parse_snmp_message
    external:
      name: grok.match
      properties:
        input_field: "parse_message.message.payload"
        pattern: ".*?from %{IP:src_ip}.*"
    filter: "{{ parse_message.message.prefix.lower()  == 'snmp' }}"

  - name: parse_dhcp_snoop_message
    external:
      name: grok.match
      properties:
        input_field: "parse_message.message.payload"
        pattern: ".*?%{IP:src_ip}.*"
    filter: "{{ parse_message.message.prefix.lower()  == 'dhcp-snoop' }}"

  - name: set_ecs_fields

  - name: set_auth_fields
    filter: "{{ parse_message.message.prefix.lower()  == 'auth' }}"

  - name: set_mgr_fields
    filter: "{{ parse_message.message.prefix.lower()  == 'mgr' }}"

  - name: set_ssl_fields
    filter: "{{ parse_message.message.prefix.lower()  == 'ssl' }}"

  - name: set_sntp_fields
    filter: "{{ parse_message.message.prefix.lower()  == 'sntp' }}"

  - name: set_snmp_fields
    filter: "{{ parse_message.message.prefix.lower()  == 'snmp' }}"

  - name: set_dhcp_fields
    filter: "{{ parse_message.message.prefix.lower()  == 'dhcp-snoop' }}"

  - name: set_misc_fields
    filter: "{{ parse_message.message.prefix.lower()  not in ('auth', 'mgr', 'ssl', 'sntp', 'snmp', 'dhcp-snoop') }}"

  - name: set_syslog_fields
    filter: "{{ parse_message.message.get('syslog_payload') != None }}"

  - name: set_leef_fields
    filter: '{{"LEEF:" in original.message}}'

stages:
  set_syslog_fields:
    actions:
      - set:
          event.category: ["network"]
          event.type: ["info"]
          event.reason: "{{ parse_message.message.syslog_payload }}"
          source.ip: "{{ parse_message.message.src_ip }}"
          source.mac: "{{ parse_syslog_message.message.src_mac or parse_message.message.src_mac }}"
          destination.domain: "{{ syslog_parse_kv_part_message.message.servername }}"
          destination.ip: "{{ parse_syslog_message.message.dst_ip or syslog_parse_kv_part_message.message.serverip }}"
          destination.port: "{{ parse_syslog_message.message.dst_port }}"
          user.name: "{{ parse_syslog_message.message.user_name or syslog_parse_kv_part_message.message.username }}"

      - set:
          source.ip: "{{ syslog_parse_kv_part_message.message.userip }}"
        filter: "{{ syslog_parse_kv_part_message.message.get('userip') != None }}"

      - set:
          event.category: ["authentication"]
        filter: "{{ 'authentication' in parse_message.message.syslog_payload.lower() }}"

      - set:
          event.outcome: "failure"
        filter: "{{ 'failed' in parse_message.message.syslog_payload.lower() }}"

      - set:
          event.outcome: "success"
        filter: "{{ 'succeeded' in parse_message.message.syslog_payload.lower() }}"

  set_ecs_fields:
    actions:
      - set:
          event.dataset: "{{ parse_message.message.prefix }}"
          event.reason: "{{ parse_message.message.payload }}"
        filter: '{{original.message.startswith("LEEF") == False}}'

  set_auth_fields:
    actions:
      - set:
          event.category: ["authentication"]

      - set:
          event.type: ["start"]
          event.outcome: "success"
        filter: "{{ 'logged in' in parse_message.message.payload }}"

      - set:
          event.type: ["info"]
        filter: "{{ 'logged in' not in parse_message.message.payload }}"

      - set:
          event.outcome: "failure"
        filter: "{{ 'invalid' in parse_message.message.payload.lower() }}"

      - set:
          user.name: "{{ parse_auth_message.message.user_name }}"
          source.ip: "{{ parse_auth_message.message.src_ip }}"

  set_mgr_fields:
    actions:
      - set:
          event.category: ["session"]
          event.type: ["start"]

      - set:
          source.ip: "{{ parse_mgr_message.message.src_ip }}"

  set_ssl_fields:
    actions:
      - set:
          event.category: ["session"]

      - set:
          event.type: ["end"]
        filter: "{{ 'session closed' in parse_message.message.payload }}"

      - set:
          event.type: ["info"]
        filter: "{{ 'session closed' not in parse_message.message.payload }}"

      - set:
          source.ip: "{{ parse_ssl_message.message.src_ip }}"

  set_sntp_fields:
    actions:
      - set:
          event.category: ["network"]
          event.type: ["connection"]

      - set:
          source.ip: "{{ parse_sntp_message.message.src_ip }}"

  set_snmp_fields:
    actions:
      - set:
          event.kind: "alert"
          event.category: ["session"]
          event.type: ["info"]

      - set:
          source.ip: "{{ parse_snmp_message.message.src_ip }}"

  set_dhcp_fields:
    actions:
      - set:
          event.category: ["network"]
          event.type: ["connection"]

      - set:
          source.ip: "{{ parse_dhcp_snoop_message.message.src_ip }}"

  set_misc_fields:
    actions:
      - set:
          event.category: ["network"]
          event.type: ["connection"]

  set_leef_fields:
    actions:
      - set:
          event.provider: "{{ parsed_leef_event.message.get('component') }}"
          event.action: "{{ parsed_leef_event.message.get('action') }}"
          event.dataset: "{{ parsed_leef_event.message.cat }}"
          event.reason: "{{ parsed_leef_event.message.description }}"
          "@timestamp": "{{ parsed_leef_date.date }}"
          source.ip: "{{ parsed_leef_event.message.src }}"
          event.code: "{{ parse_leef.message.msg_id }}"

      - translate:
        dictionary:
          1001: ["authentication"]
          1002: ["authentication"]
          1003: ["authentication"]
          1004: ["authentication"]
          1101: ["authentication"]
          1102: ["authentication"]
          1201: ["authentication"]
          1202: ["authentication"]
          1203: ["authentication"]
          1301: ["authentication"]
          1302: ["authentication"]
          1303: ["authentication"]
          2001: ["iam"]
          2002: ["iam"]
          2003: ["iam"]
          3001: ["network"]
          3002: ["network"]
          3003: ["network"]
          5001: ["host"]
          5002: ["host"]
          5003: ["host"]
          5004: ["host"]
          5005: ["host"]
          6001: ["iam"]
          6002: ["iam"]
          6003: ["iam"]
          6004: ["iam"]
          6005: ["iam"]
          6006: ["iam"]
          6007: ["iam"]
          7001: ["network"]
          7002: ["network"]
          7003: ["network"]
          7004: ["network"]
          7005: ["network"]
          7006: ["network"]
          9001: ["configuration"]
          9002: ["configuration"]
          9003: ["configuration"]
          9004: ["configuration"]
          11001: ["configuration"]
          12001: ["configuration"]
        mapping:
          parse_leef.message.msg_id: event.category
        filter: "{{ parse_leef.message.msg_id != None }}"

      - translate:
        dictionary:
          1001: ["start"]
          1002: ["end"]
          1003: ["end"]
          1004: ["info"]
          1101: ["start"]
          1102: ["end"]
          1201: ["start"]
          1202: ["end"]
          1203: ["end"]
          1301: ["start"]
          1302: ["end"]
          1303: ["end"]
          2001: ["user"]
          2002: ["user"]
          2003: ["change"]
          3001: ["start"]
          3002: ["end"]
          3003: ["info"]
          5001: ["start"]
          5002: ["end"]
          5003: ["info"]
          5004: ["start"]
          5005: ["end"]
          6001: ["creation"]
          6002: ["change"]
          6003: ["deletion"]
          6004: ["user"]
          6005: ["user"]
          6006: ["user"]
          6007: ["user"]
          7001: ["connection"]
          7002: ["end"]
          7003: ["allowed"]
          7004: ["denied"]
          7005: ["info"]
          7006: ["info"]
          9001: ["info"]
          9002: ["info"]
          9003: ["info"]
          9004: ["info"]
          11001: ["change"]
          12001: ["info"]
        mapping:
          parse_leef.message.msg_id: event.type
        filter: "{{ parse_leef.message.msg_id != None }}"

      - translate:
        dictionary:
          1002: "success"
          1003: "failure"
          1202: "success"
          1203: "failure"
          1302: "success"
          1303: "failure"
          2001: "success"
          2002: "failure"
          6006: "success"
          7003: "success"
          7004: "failure"
        mapping:
          parse_leef.message.msg_id: event.outcome
        fallback: "unknown"
        filter: "{{ parse_leef.message.msg_id != None }}"
