name: sns
pipeline:
  - name: kv
    external:
      name: kv.parse-kv
      properties:
        input_field: '{{ original.message }}'
        output_field: result
        value_sep: '='
        item_sep: \s

  - name: parsed_time
    external:
      name: date.parse
      properties:
        # “Local” time at which the log was recorded in the log file (time configured on the Firewall).
        # String in “YYYY-MM-DD HH:MM:SS” format.
        input_field: "{{kv.result.time}}{{kv.result.tz}}" #startime="2022-03-03 14:21:10"
        output_field: date
        # timezone: kv.result.tz #tz=+0100
        # Time difference between the Firewall’s time and GMT. This depends on the time zone used.
        # String in “+HHMM” or “-HHMM” format.
        format: "%Y-%m-%d %H:%M:%S%z"

  - name: parsed_startime
    filter: '{{kv.result.get("startime") != None}}'
    external:
      name: date.parse
      properties:
        input_field: "{{kv.result.startime}}{{kv.result.tz}}" #startime="2022-03-03 14:21:10"
        output_field: date
        format: "%Y-%m-%d %H:%M:%S%z"

  - name: set_startime
  - name: action_field_is_empty
  - name: set_fields

stages:
  set_fields:
    actions:
      - set:
          event.kind: 'event'
          event.category: ['network']
          event.type: ['connection']
          '@timestamp': '{{ parsed_time.date }}'
          observer.serial_number: '{{ kv.result.fw }}'
          event.timezone: '{{ kv.result.tz }}'
          event.risk_score: '{{ kv.result.pri }}'
          stormshield: '{{ kv.result }}'
          stormshield.filter.action: '{{ kv.result.action }}'
          observer.ingress.interface.name: '{{ kv.result.srcif }}'
          observer.ingress.interface.alias: '{{ kv.result.srcifname }}'
          network.transport: '{{ kv.result.ipproto }}'
          source.ip: '{{ kv.result.src }}'
          source.port: '{{ kv.result.srcport }}'
          source.mac: '{{ kv.result.srcmac }}'
          source.geo.continent_name: '{{ kv.result.srccontinent }}'
          source.geo.country_iso_code: '{{ kv.result.srccountry }}'
          destination.ip: '{{ kv.result.dst }}'
          destination.port: '{{ kv.result.dstport }}'
          destination.geo.continent_name: '{{ kv.result.dstcontinent }}'
          destination.geo.country_iso_code: '{{ kv.result.dstcountry }}'
          observer.egress.interface.name: '{{ kv.result.dstif }}'
          observer.egress.interface.alias: '{{ kv.result.dstifname }}'
          host.network.ingress.bytes: '{{ kv.result.rcvd }}'
          host.network.egress.bytes: '{{ kv.result.sent }}'
          network.bytes: '{{ kv.result.sent|int + kv.result.rcvd|int }}'
          # Duration of the connection in seconds converted in nanoseconds.
          event.duration: '{{ kv.result.duration | float * 1000000000 }}'
          network.protocol: '{{ kv.result.proto }}'
          network.type: '{{ kv.result.ipv }}'
          rule.id: '{{ kv.result.ruleid }}'
          rule.category: '{{ kv.result.slotlevel }}'

  set_startime:
    actions:
      - set:
          event.start: '{{parsed_startime.date}}'
    filter: '{{kv.result.startime != "" }}'


  # from Stormshield documentation:
  # action Behavior associated with the filter rule.
  # Value: “pass” or “block” (empty field for “Log” action)
  action_field_is_empty:
    actions:
      - set:
          stormshield.filter.action: 'log'
    filter: '{{kv.result.action == None }}'
