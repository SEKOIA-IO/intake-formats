name: Palo Alto networks next-generation firewall
pipeline:
  - name: parsed_event
    external:
      name: cef.parse-cef
    filter: '{{original.message.startswith("CEF")}}'

  # Just used to get the column format
  - name: parsed_dsv
    filter: '{{original.message.startswith("CEF") == False}}'
    external:
      name: dsv.parse-dsv
      properties:
        columnnames:
          - tmp1
          - ReceiveTime
          - SerialNum
          - Type
        delimiter: ","

  # TRAFFIC CSV
  - name: parsed_event
    filter: "{{parsed_dsv.message.Type == 'TRAFFIC'}}"
    external:
      name: dsv.parse-dsv
      properties:
        input_field: original.message
        output_field: message
        columnnames:
          - PaloAltoDomain
          - ReceiveTime
          - SerialNum
          - Type
          - Threat_ContentType
          - ConfigVersion
          - GenerateTime
          - SourceAddress
          - DestinationAddress
          - NATSourceIP
          - NATDestinationIP
          - Rule
          - SourceUser
          - DestinationUser
          - Application
          - VirtualSystem
          - SourceZone
          - DestinationZone
          - InboundInterface
          - OutboundInterface
          - LogAction
          - TimeLogged
          - SessionID
          - RepeatCount
          - SourcePort
          - DestinationPort
          - NATSourcePort
          - NATDestinationPort
          - Flags
          - IPProtocol
          - Action
          - Bytes
          - BytesSent
          - BytesReceived
          - Packets
          - StartTime
          - ElapsedTimeInSec
          - Category
          - Padding
          - seqno
          - ActionFlags
          - SourceCountry
          - DestinationCountry
          - cpadding
          - pkts_sent
          - pkts_received
        delimiter: ","

  # USERID CSV
  - name: parsed_event
    filter: "{{parsed_dsv.message.Type == 'USERID'}}"
    external:
      name: dsv.parse-dsv
      properties:
        input_field: original.message
        output_field: message
        columnnames:
          - FUTURE_USER
          - ReceiveTime
          - SerialNum
          - Type
          - Threat_ContentType
          - FUTURE_USE
          - GeneratedTime
          - VirtualSystem
          - SourceIP
          - User
          - DataSourceName
          - EventID
          - RepeatCount
          - TimeOutThreshold
          - SourcePort
          - DestinationPort
          - DataSource
          - DataSourceType
          - SequenceNumber
          - ActionFlags
          - DeviceGroupHierarchyLevel1
          - DeviceGroupHierarchyLevel2
          - DeviceGroupHierarchyLevel3
          - DeviceGroupHierarchyLevel4
          - VirtualSystemName
          - DeviceName
          - VirtualSystemID
          - FactorType
          - FactorCompletionTime
          - FactorNumber
          - FUTURE_USE
          - FUTURE_USE2
          - UserGroupFlags
          - UserbySource
        delimiter: ","

  # GLOBALPROTECT CSV
  - name: parsed_event
    filter: "{{parsed_dsv.message.Type == 'GLOBALPROTECT'}}"
    external:
      name: dsv.parse-dsv
      properties:
        input_field: original.message
        output_field: message
        columnnames:
          - FUTURE_USE
          - ReceiveTime
          - SerialNumber
          - Type
          - Threat_ContentType
          - FUTURE_USE
          - GeneratedTime
          - VirtualSystem
          - EventID
          - Stage
          - AuthenticationMethod
          - TunnelType
          - SourceUser
          - SourceRegion
          - MachineName
          - PublicIP
          - PublicIPv6
          - PrivateIP
          - PrivateIPv6
          - HostID
          - SerialNumber
          - ClientVersion
          - ClientOS
          - ClientOSVersion
          - RepeatCount
          - Reason
          - Error
          - Description
          - Status
          - Location
          - LoginDuration
          - ConnectMethod
          - ErrorCode
          - Portal
          - SequenceNumber
          - ActionFlags
        delimiter: ","

  # SYSTEM CSV
  - name: parsed_event
    filter: "{{parsed_dsv.message.Type == 'SYSTEM'}}"
    external:
      name: dsv.parse-dsv
      properties:
        input_field: original.message
        output_field: message
        columnnames:
          - FUTURE_USE
          - ReceiveTime
          - SerialNumber
          - Type
          - Threat_ContentType
          - FUTURE_USE
          - GeneratedTime
          - VirtualSystem
          - EventID
          - Object
          - FUTURE_USE
          - FUTURE_USE_2
          - Module
          - Severity
          - Description
          - SequenceNumber
          - ActionFlags
          - DeviceGroupHierarchyLevel1
          - DeviceGroupHierarchyLevel2
          - DeviceGroupHierarchyLevel3
          - DeviceGroupHierarchyLevel4
          - VirtualSystemName
          - DeviceName
        delimiter: ","

  # THREAT CSV
  - name: parsed_event
    filter: "{{parsed_dsv.message.Type == 'THREAT'}}"
    external:
      name: dsv.parse-dsv
      properties:
        input_field: original.message
        output_field: message
        columnnames:
          - PaloAltoDomain
          - ReceiveTime
          - SerialNum
          - Type
          - Threat_ContentType
          - ConfigVersion
          - GenerateTime
          - SourceAddress
          - DestinationAddress
          - NATSourceIP
          - NATDestinationIP
          - Rule
          - SourceUser
          - DestinationUser
          - Application
          - VirtualSystem
          - SourceZone
          - DestinationZone
          - InboundInterface
          - OutboundInterface
          - LogAction
          - TimeLogged
          - SessionID
          - RepeatCount
          - SourcePort
          - DestinationPort
          - NATSourcePort
          - NATDestinationPort
          - Flags
          - IPProtocol
          - Action
          - URLFilename
          - Threat_ContentName
          - Category
          - Severity
          - Direction
          - seqno
          - ActionFlags
          - SourceCountry
          - DestinationCountry
          - cpadding
          - ContentType
          - PcapID
          - FileDigest
          - Cloud
          - URLID
          - UserAgent
          - FileType
          - Xff
          - Referer
          - Sender
          - Subject
          - Recipient
          - ReportID
          - DeviceGroupHierarchyLevel1
          - DeviceGroupHierarchyLevel2
          - DeviceGroupHierarchyLevel3
          - DeviceGroupHierarchyLevel4
          - VirtualSystemName
          - DeviceName
          - FileURL
          - SourceVMUUID
          - DestinationVMUUID
          - HttpMethod
          - TunnelIDIMSI
          - MonitorTagIMEI
          - ParentSessionID
          - ParentSessionStartTime
          - Tunnel
          - Threat_Category
          - Contentver
          - SigFlags
          - SCTPAssociationID
          - PayloadProtocolID
          - HttpHeaders
        delimiter: ","


  - name: parsed_rt
    external:
      name: date.parse
      properties:
        input_field: '{{parsed_event.message.rt}}'
        output_field: datetime
        # ingest does not allow this stage to resolve Jinja template ATM
        #timezone: '{{parsed_event.message.dtz}}'
    filter: '{{parsed_event.message.get("rt") != None}}'

  - name: parsed_start
    external:
      name: date.parse
      properties:
        input_field: '{{parsed_event.message.start}}'
        output_field: datetime
        # ingest does not allow this stage to resolve Jinja template ATM
        #timezone: '{{parsed_event.message.dtz}}'
    filter: '{{parsed_event.message.get("start") != None}}'

  - name: set_extracted_fields
  - name: set_ecs_deviceOutboundInterface
    filter: '{{parsed_event.message.get("deviceOutboundInterface") != None}}'
  - name: set_ecs_deviceInboundInterface
    filter: '{{parsed_event.message.get("deviceInboundInterface") != None}}'
  - name: set_action_outcome
  - name: set_csv_severity

stages:
  set_csv_severity:
    actions:
      - set:
          event.severity: '{{parsed_event.message.Severity}}'
        filter: '{{original.message.startswith("CEF")}}'

  set_ecs_deviceOutboundInterface:
    actions:
      - set:
          observer.egress.interface.name: '{{parsed_event.message.deviceOutboundInterface}}'
          observer.egress.interface.id: '{{parsed_event.message.deviceOutboundInterface.split("/") | last}}'

  set_ecs_deviceInboundInterface:
    actions:
      - set:
          observer.ingress.interface.name: '{{parsed_event.message.deviceInboundInterface | last}}'
          observer.ingress.interface.id: '{{parsed_event.message.deviceOutboundInterface.split("/") | last}}'

  set_action_outcome:
    actions:
      - set:
          action.outcome: '{{parsed_event.message.Status}}'
        filter: "{{parsed_event.message.Status != None}}"
      - set:
          action.outcome: "success"
        filter: "{{parsed_event.message.Action != null}}"

  set_extracted_fields:
    actions:
      - set:
          '@timestamp': '{{parsed_rt.datetime}}'
        filter: '{{parsed_event.message.get("rt")  != None}}'
      - set:
          event.start: '{{parsed_start.datetime}}'
        filter: '{{parsed_event.message.get("start") != None}}'
      - set:
          action.name: '{{parsed_event.message.Action}}'
          action.type: '{{parsed_event.message.Threat_ContentType}}'
          destination.address: '{{parsed_event.message.DestinationAddress or parsed_event.message.dst}}'
          destination.bytes: '{{parsed_event.message.BytesReceived or parsed_event.message.out}}'
          destination.geo.country_iso_code: '{{parsed_event.message.PanOSDestinationLocation}}'
          destination.ip: '{{parsed_event.message.DestinationAddress or parsed_event.message.dst}}'
          destination.nat.ip: '{{parsed_event.message.destinationTranslatedAddress or parsed_event.message.NATDestinationIP}}'
          destination.nat.port: '{{parsed_event.message.destinationTranslatedPort or parsed_event.message.NATDestinationPort}}'
          destination.packets: '{{parsed_event.message.PanOSPacketsReceived or parsed_event.message.pkts_received}}'
          destination.port: '{{parsed_event.message.DestinationPort or parsed_event.message.dpt}}'
          destination.user.name: '{{parsed_event.message.duser}}'
          email.from.address: '{{parsed_event.message.Sender}}'
          email.subject: '{{parsed_event.message.Subject}}'
          email.to.address: '{{parsed_event.message.Recipient}}'
          event.action: '{{parsed_event.message.act or parsed_event.message.Threat_Category}}'
          event.category: [ 'network' ]
          event.timezone: '{{parsed_event.message.dtz}}'
          event.dataset: '{{parsed_event.message.DeviceEventClassID | lower}}'
          event.duration: '{{parsed_event.message.ElapsedTimeInSec or parsed_event.message.SessionDuration}}'
          event.kind: 'event'
          event.reason: '{{parsed_event.message.reason or parsed_event.message.Threat_ContentName or parsed_event.message.Description or parsed_event.message.PanOSConnectionError}}'
          file.path: '{{parsed_event.message.URLFilename}}'
          host.hostname: '{{parsed_event.message.DeviceName or parsed_event.message.dvchost or parsed_event.message.PanOSEndpointDeviceName}}'
          host.name: '{{parsed_event.message.dvchost or parsed_event.message.PanOSEndpointDeviceName}}'
          host.id: '{{parsed_event.message.deviceExternalId}}'
          host.mac: '{{parsed_event.message.PanOSSourceDeviceMac}}'
          host.os.family: '{{parsed_event.message.PanOSSourceDeviceOSFamily}}'
          host.os.version: '{{parsed_event.message.PanOSSourceDeviceOSVersion}}'
          host.os.type: '{{parsed_event.message.PanOSEndpointOSType}}'
          host.type: '{{parsed_event.message.PanOSSourceDeviceCategory}}'
          http.request.method: '{{parsed_event.message.HttpMethod}}'
          http.request.referrer: '{{parsed_event.message.Referer}}'
          log.level: '{{parsed_event.message.Severity}}'
          log.logger: '{{parsed_event.message.DeviceEventClassID|lower or parsed_event.message.Type|lower}}'
          network.application: '{{parsed_event.message.app}}'
          network.bytes: '{{parsed_event.message.Bytes or parsed_event.message.PanOSBytes}}'
          network.packets: '{{parsed_event.message.Packets or parsed_event.message.PacketsTotal}}'
          network.transport: '{{parsed_event.message.IPProtocol or parsed_event.message.proto}}'
          network.type: '{{parsed_event.message.PanOSTunnelType}}'
          observer.egress.interface.alias: '{{parsed_event.message.ToZone}}'
          observer.ingress.interface.alias: '{{parsed_event.message.FromZone}}'
          observer.product: 'PAN-OS'
          observer.vendor: '{{parsed_event.message.DeviceVendor}}'
          observer.type: '{{parsed_event.message.DeviceProduct}}'
          observer.version: '{{parsed_event.message.DeviceVersion}}'
          rule.name: '{{parsed_event.message.Rule}}'
          rule.uuid: '{{parsed_event.message.PanOSRuleUUID}}'
          source.address: '{{parsed_event.message.PublicIP or parsed_event.message.SourceAddress or parsed_event.message.SourceIP or parsed_event.message.src}}'
          source.bytes: '{{parsed_event.message.BytesSent or parsed_event.message.in}}'
          source.geo.country_iso_code: '{{parsed_event.message.SourceRegion}}'
          source.ip: '{{parsed_event.message.PublicIP or parsed_event.message.SourceAddress or parsed_event.message.SourceIP or parsed_event.message.src}}'
          source.nat.ip: '{{parsed_event.message.NATSourceIP or parsed_event.message.sourceTranslatedAddress}}'
          source.nat.port: '{{parsed_event.message.NATSourcePort or parsed_event.message.sourceTranslatedPort}}'
          source.packets: '{{parsed_event.message.PanOSPacketsSent or parsed_event.message.pkts_sent}}'
          source.port: '{{parsed_event.message.SourcePort or parsed_event.message.spt}}'
          source.user.name: '{{parsed_event.message.suser or parsed_event.message.PanOSSourceUserName}}'
          user_agent.name: '{{parsed_event.message.UserAgent}}'
          user_agent.os.name: '{{parsed_event.message.ClientOS}}'
          user_agent.os.version: '{{parsed_event.message.ClientOSVersion}}'
          user.name: '{{parsed_event.message.SourceUser or parsed_event.message.User or parsed_event.message.suser or parsed_event.message.PanOSSourceUserName}}'
          paloalto: '{{parsed_event.message}}'
      - translate:
        dictionary:
          'start': [ 'start' ]
          'end': [ 'end' ]
          'drop': [ 'denied' ]
          'denied': [ 'denied' ]
        mapping:
          parsed_event.message.Name: event.type
        fallback: [ 'denied' ]
