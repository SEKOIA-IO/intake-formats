name: crowdstrike-telemetry
pipeline:
  - name: parsed_event
    external:
      name: json.parse-json
      properties:
        input_field: "{{original.message}}"
        output_field: message

  - name: event_date
    external:
      name: date.parse
      properties:
        input_field: "{{parsed_event.message.timestamp or parsed_event.message.Time or parsed_event.message.FirstDiscoveredDate}}"
        output_field: datetime

  - name: modified_date
    external:
      name: date.parse
      properties:
        input_field: "{{parsed_event.message.scores.modified_time}}"
        output_field: datetime

  - name: process_start_time
    external:
      name: date.parse
      properties:
        input_field: "{{parsed_event.message.ProcessStartTime}}"
        output_field: datetime

  - name: process_end_time
    external:
      name: date.parse
      properties:
        input_field: "{{parsed_event.message.ProcessEndTime}}"
        output_field: datetime
    filter: "{{parsed_event.message.ProcessEndTime != None}}"

  - name: set_common_fields
  - name: set_dns_fields
  - name: set_registry_fields
  - name: set_host_fields

stages:
  set_host_fields:
    actions:
      - set:
          "host.os.platform": "{{parsed_event.message.event_platform | lower}}"
        filter: '{{parsed_event.message.get("event_platform") != None}}'

      - set:
          "host.name": "{{parsed_event.message.ComputerName}}"
          "host.domain": "{{parsed_event.message.MachineDomain}}"
          "host.mac": "{{parsed_event.message.MAC}}"

  set_registry_fields:
    actions:
      - set:
          "registry.value": "{{parsed_event.message.RegValueName}}"
          "registry.data.strings": "{{parsed_event.message.RegStringValue}}"

      - set:
          "registry.key": '{{"\\".join(parsed_event.message.RegObjectName.split("\\")[3:])}}'
          "registry.hive": '{{parsed_event.message.RegObjectName.split("\\")[2]}}'
        filter: '{{parsed_event.message.get("RegObjectName") != None and "\\" in parsed_event.message.get("RegObjectName")}}'

      - set:
          "registry.path": '{{"\\".join(parsed_event.message.RegObjectName.split("\\")[2:])}}\{{parsed_event.message.RegValueName}}'
        filter: '{{parsed_event.message.get("RegValueName") != None or parsed_event.message.get("RegObjectName") != None}}'

  set_dns_fields:
    actions:
      - set:
          "dns.question.name": "{{parsed_event.message.DomainName}}"
          "dns.question.type": "{{parsed_event.message.RequestType}}"
          "source.nat.port": "{{parsed_event.message.LocalPort}}"

          "destination.nat.port": "{{parsed_event.message.RemotePort | int}}"

      - set:
          "source.ip": "{{parsed_event.message.LocalAddressIP6}}"
        filter: "{{parsed_event.message.LocalAddressIP6 | is_ipaddress}}"
      - set:
          "source.ip": "{{parsed_event.message.LocalAddressIP4}}"
        filter: "{{parsed_event.message.LocalAddressIP4 | is_ipaddress}}"
      - set:
          "source.nat.ip": "{{parsed_event.message.aip}}"
        filter: "{{parsed_event.message.aip | is_ipaddress}}"

      - set:
          "destination.ip": "{{parsed_event.message.RemoteAddressIP6}}"
        filter: "{{parsed_event.message.RemoteAddressIP6 | is_ipaddress}}"
      - set:
          "destination.ip": "{{parsed_event.message.RemoteAddressIP4}}"
        filter: "{{parsed_event.message.RemoteAddressIP4 | is_ipaddress}}"

      - set:
          "host.ip": >
            [
              {% for record in parsed_event.message.get("aip").split(" ") %}
                  {% if record != "" %}"{{record}}",{% endif %}
              {% endfor %}
            ]

      - translate:
        dictionary:
          "1": "A"
          "28": "AAAA"
          "18": "AFSDB"
          "42": "APL"
          "257": "CAA"
          "60": "CDNSKEY"
          "59": "CDS"
          "37": "CERT"
          "5": "CNAME"
          "62": "CSYNC"
          "49": "DHCID"
          "32769": "DLV"
          "39": "DNAME"
          "48": "DNSKEY"
          "43": "DS"
          "108": "EUI48"
          "109": "EUI64"
          "13": "HINFO"
          "55": "HIP"
          "65": "HTTPS"
          "45": "IPSECKEY"
          "25": "KEY"
          "36": "KX"
          "29": "LOC"
          "15": "MX"
          "35": "NAPTR"
          "2": "NS"
          "47": "NSEC"
          "50": "NSEC3"
          "51": "NSEC3PARAM"
          "61": "OPENPGPKEY"
          "12": "PTR"
          "46": "RRSIG"
          "17": "RP"
          "24": "SIG"
          "53": "SMIMEA"
          "6": "SOA"
          "33": "SRV"
          "44": "SSHFP"
          "64": "SVCB"
          "32768": "TA"
          "249": "TKEY"
          "52": "TLSA"
          "250": "TSIG"
          "16": "TXT"
          "256": "URI"
          "63": "ZONEMD"
        mapping:
          dns.question.type: dns.question.type

      - set:
          dns.answers: >
            [
              {% for record in parsed_event.message.get("IP4Records").split(";") %}
                  {% if record != "" %}{"data": "{{record}}"},{% endif %}
              {% endfor %}

              {% for record in parsed_event.message.get("IP6Records").split(";") %}
                  {% if record != "" %}{"data": "{{record}}"},{% endif %}
              {% endfor %}
            ]
        filter: '{{parsed_event.message.get("IP4Records") != None or parsed_event.message.get("IP6Records") != None}}'

  set_common_fields:
    actions:
      - set:
          "@timestamp": "{{event_date.datetime}}"
      - set:
          "@timestamp": "{{modified_date.datetime}}"
        filter: "{{parsed_event.message.timestamp == null}}"
      - set:
          "event.action": "{{parsed_event.message.event_simpleName}}"

          "process.command_line": "{{parsed_event.message.CommandLine or parsed_event.message.ContextBaseFileName}}"
          "process.executable": "{{parsed_event.message.ImageFileName}}"
          "process.name": "{{parsed_event.message.ImageFileName | basename or parsed_event.message.ContextBaseFileName}}"
          "process.thread.id": "{{parsed_event.message.SourceThreadId | int}}"
          "process.parent.name": "{{parsed_event.message.ParentBaseFileName}}"
          "process.parent.pid": "{{parsed_event.message.ParentProcessId}}"
          "process.end": "{{process_end_time.datetime}}"
          "process.start": "{{process_start_time.datetime}}"
          "process.pid": "{{parsed_event.message.RawProcessId}}"
          "process.args": "{{parsed_event.message.EnvironmentVariablesString}}"

          "user.id": "{{parsed_event.message.UserSid}}"
          "user.name": "{{parsed_event.message.UserName}}"
          "agent.id": "{{parsed_event.message.aid}}"
          "agent.version": "{{parsed_event.message.AgentVersion}}"

          "source.geo.country_name": "{{parsed_event.message.Country}}"
          "source.geo.city_name": "{{parsed_event.message.City}}"

          "file.path": "{{parsed_event.message.TargetFileName}}"
          "file.hash.sha1": "{{parsed_event.message.SHA1HashData}}"
          "file.hash.sha256": "{{parsed_event.message.SHA256HashData}}"
          "file.hash.md5": "{{parsed_event.message.MD5HashData}}"

          "crowdstrike.customer_id": "{{parsed_event.message.cid}}"
          "crowdstrike.gateway_ip": "{{parsed_event.message.GatewayIP}}"
          "crowdstrike.gateway_mac": "{{parsed_event.message.GatewayMAC}}"

          "url.domain": "{{parsed_event.message.DownloadServer}}"
          "url.path": "{{parsed_event.message.DownloadPath}}"
          "url.full": "{{parsed_event.message.OriginatingURL}}"
          "network.iana_number": "{{parsed_event.message.Protocol}}"

          "observer.mac": "{{parsed_event.message.MAC}}"
          "observer.egress.interface.alias": "{{parsed_event.message.InterfaceAlias}}"

      - set:
          "observer.ip": >
            [
              {% for record in parsed_event.message.get("LocalAddressIP4").split(" ") %}
                  {% if record != "" %}"{{record}}",{% endif %}
              {% endfor %}
            ]
      - set:
          "user.target.id": "{{parsed_event.message.UserRid}}"
          "user.target.group.id": "{{parsed_event.message.GroupRid}}"
        filter: "{{parsed_event.message.event_simpleName == 'UserAccountAddedToGroup'}}"

      - translate:
        dictionary:
          "EndOfProcess": ["end"]
          "ServiceStarted": ["start"]
          "ClassifiedModuleLoad": ["start"]
          "UserAccountAddedToGroup": ["change"]
          "NewExecutableWritten": ["creation"]
          "GzipFileWritten": ["creation"]
          "DirectoryCreate": ["creation"]
          "FirewallDeleteRule": ["deletion"]
          "ConfigStateUpdate": ["change"]
          "CurrentSystemTags": ["change"]
          "AsepValueUpdate": ["change"]
        mapping:
          parsed_event.message.event_simpleName: event.type
        fallback: ["info"]

      - translate:
        dictionary:
          "EndOfProcess": ["process"]
          "ProcessRollup2": ["process"]
          "ProcessRollup2Stats": ["process"]
          "SyntheticProcessRollup2": ["process"]
          "ServiceStarted": ["process"]
          "AssociateIndicator": ["process"]
          "ClassifiedModuleLoad": ["process"]
          "ScriptControlScanTelemetry": ["process"]
          "NewExecutableWritten": ["file"]
          "GzipFileWritten": ["file"]
          "DirectoryCreate": ["file"]
          "NetworkConnectIP4": ["network"]
          "RawBindIP6": ["network"]
          "DnsRequest": ["network"]
          "LFODownloadConfirmation": ["network"]
          "UserAccountAddedToGroup": ["configuration"]
          "FirewallDeleteRule": ["configuration"]
          "ConfigStateUpdate": ["configuration"]
          "CurrentSystemTags": ["configuration"]
          "ChannelActive": ["host"]
          "SensorHeartbeat": ["host"]
          "ErrorEvent": ["host"]
          "AsepValueUpdate": ["registry"]
          "DetectionExcluded": ["intrusion_detection"]
          "SpotlightEntityBatchHeader": ["intrusion_detection"]
        mapping:
          parsed_event.message.event_simpleName: event.category
        fallback: ["process"]

      - translate:
        dictionary:
          "ZeroTrustHostAssessment": ["host"]
        mapping:
          parsed_event.message.event_type: event.category

      - set:
          "event.category": ["host"]
        filter: "{{parsed_event.message.get('ComputerName') != None and parsed_event.message.get('MAC') != None}}"

      - set:
          "event.category": ["host"]
        filter: "{{parsed_event.message.get('LocalAddressIP4') != None and parsed_event.message.get('MAC') != None}}"

      - set:
          "event.category": ["host"]
        filter: "{{parsed_event.message.get('ComputerName') != None and parsed_event.message.get('MachineDomain') != None}}"
